{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Qmate Service","text":"<p>Qmate Service is a custom WebdriverIO service for testing web applications and APIs.</p> <p>Note</p> <p>The latest release of the Qmate Service is compatible with WebdriverIO V8.</p>"},{"location":"#main-features","title":"Main features","text":"<p>The main features of this service are:</p> <ul> <li> Supporting UI5 and OPA Selectors</li> <li> Reuse API with useful functions for UI5 and any other type of web application</li> <li> REST &amp; OData API testing</li> <li> Dynamic test data handling</li> </ul> <p>Reuse API </p>"},{"location":"doc/","title":"\u2630 Reuse API","text":""},{"location":"doc/#constants","title":"Constants","text":"common <p>Global namespace for common modules.</p> util <p>Global namespace for util modules.</p> ui5 <p>Global namespace for UI5 modules.</p> nonUi5 <p>Global namespace for non UI5 modules.</p> service <p>Global namespace for service modules.</p> mobile <p>Global namespace for mobile modules.</p> flp <p>Global namespace for Fiori Launchpad (FLP) modules.</p> <p></p>"},{"location":"doc/#common","title":"common","text":"<p>Global namespace for common modules.</p> <p>Kind: global constant  </p> <ul> <li>common<ul> <li>.assertion<ul> <li>.expectEqual(value1, value2)</li> <li>.expectUnequal(value1, value2)</li> <li>.expectTrue(value)</li> <li>.expectFalse(value)</li> <li>.expectDefined(value)</li> <li>.expectUndefined(value)</li> <li>.expectUrlToBe()</li> </ul> </li> <li>.date<ul> <li>.getToday([format]) \u21d2 <code>String</code></li> <li>.getTomorrow([format]) \u21d2 <code>String</code></li> <li>.getNextMonth([format]) \u21d2 <code>String</code></li> <li>.getPreviousMonth([format]) \u21d2 <code>String</code></li> <li>.getNextYear([format]) \u21d2 <code>String</code></li> <li>.getPreviousYear([format]) \u21d2 <code>String</code></li> <li>.getSpecific(date, [format]) \u21d2 <code>String</code></li> <li>.calculate([date], [format]) \u21d2 <code>String</code> | <code>Date</code></li> </ul> </li> <li>.navigation<ul> <li>.navigateToUrl(url)</li> <li>.navigateToUrlAndRetry(url, [retries], [interval])</li> </ul> </li> <li>.userInteraction<ul> <li>.fillActive(value)</li> <li>.fillActiveAndRetry(value, [retries], [interval])</li> <li>.clearAndFillActive(value)</li> <li>.clearAndFillActiveAndRetry(value, [retries], [interval])</li> <li>.pressKey(keys)</li> <li>.pressEnter()</li> <li>.pressTab()</li> <li>.pressF4()</li> <li>.pressBackspace()</li> <li>.pressEscape()</li> <li>.pressArrowLeft()</li> <li>.pressArrowRight()</li> </ul> </li> </ul> </li> </ul> <p></p>"},{"location":"doc/#commonassertion","title":"common.assertion","text":"<p>Kind: static class of <code>common</code> </p> <ul> <li>.assertion<ul> <li>.expectEqual(value1, value2)</li> <li>.expectUnequal(value1, value2)</li> <li>.expectTrue(value)</li> <li>.expectFalse(value)</li> <li>.expectDefined(value)</li> <li>.expectUndefined(value)</li> <li>.expectUrlToBe()</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#assertionexpectequalvalue1-value2","title":"assertion.expectEqual(value1, value2)","text":"<p>Expects the passed values to be equal.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Description value1 <code>Any</code> Value (1) to be equal to value (2) value2 <code>Any</code> Value (2) to be equal to value (1) <p>Example <pre><code>common.assertion.expectEqual(value1, value2);\n</code></pre> </p>"},{"location":"doc/#assertionexpectunequalvalue1-value2","title":"assertion.expectUnequal(value1, value2)","text":"<p>Expects the passed values to be unequal.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Description value1 <code>Any</code> Value (1) to be unequal to value (2) value2 <code>Any</code> Value (2) to be unequal to value (1) <p>Example <pre><code>common.assertion.expectUnequal(value1, value2);\n</code></pre> </p>"},{"location":"doc/#assertionexpecttruevalue","title":"assertion.expectTrue(value)","text":"<p>Expects the passed value to be true.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Description value <code>Any</code> Value to be equal to true <p>Example <pre><code>common.assertion.expectTrue(value);\n</code></pre> </p>"},{"location":"doc/#assertionexpectfalsevalue","title":"assertion.expectFalse(value)","text":"<p>Expects the passed value to be false.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Description value <code>Boolean</code> The value to be false. <p>Example <pre><code>common.assertion.expectFalse(false);\n</code></pre> </p>"},{"location":"doc/#assertionexpectdefinedvalue","title":"assertion.expectDefined(value)","text":"<p>Expects the passed values is defined.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Description value <code>Any</code> Value to be defined (not undefined) <p>Example <pre><code>common.assertion.expectDefined(value);\n</code></pre> </p>"},{"location":"doc/#assertionexpectundefinedvalue","title":"assertion.expectUndefined(value)","text":"<p>Expects the passed values is undefined.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Description value <code>Any</code> Value to be undefined <p>Example <pre><code>common.assertion.expectUndefined(value);\n</code></pre> </p>"},{"location":"doc/#assertionexpecturltobe","title":"assertion.expectUrlToBe()","text":"<p>Expects the url to be the passed value.</p> <p>Kind: static method of <code>assertion</code> Example <pre><code>await common.assertion.expectUrlToBe(\"www.sap.com\");\n</code></pre> </p>"},{"location":"doc/#commondate","title":"common.date","text":"<p>Kind: static class of <code>common</code> </p> <ul> <li>.date<ul> <li>.getToday([format]) \u21d2 <code>String</code></li> <li>.getTomorrow([format]) \u21d2 <code>String</code></li> <li>.getNextMonth([format]) \u21d2 <code>String</code></li> <li>.getPreviousMonth([format]) \u21d2 <code>String</code></li> <li>.getNextYear([format]) \u21d2 <code>String</code></li> <li>.getPreviousYear([format]) \u21d2 <code>String</code></li> <li>.getSpecific(date, [format]) \u21d2 <code>String</code></li> <li>.calculate([date], [format]) \u21d2 <code>String</code> | <code>Date</code></li> </ul> </li> </ul> <p></p>"},{"location":"doc/#dategettodayformat-string","title":"date.getToday([format]) \u21d2 <code>String</code>","text":"<p>Returns the current day in the given format.</p> <p>Kind: static method of <code>date</code> Returns: <code>String</code> - The date in the given format.  </p> Param Type Default Description [format] <code>String</code> <code>\"object\"</code> The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). <p>Example <pre><code>const date = await common.date.getToday(\"mm/dd/yyyy\");\n</code></pre> </p>"},{"location":"doc/#dategettomorrowformat-string","title":"date.getTomorrow([format]) \u21d2 <code>String</code>","text":"<p>Returns tomorrows date in the given format.</p> <p>Kind: static method of <code>date</code> Returns: <code>String</code> - The date in the given format.  </p> Param Type Default Description [format] <code>String</code> <code>\"object\"</code> The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). <p>Example <pre><code>const date = await common.date.getTomorrow(\"mm/dd/yyyy\");\n</code></pre> </p>"},{"location":"doc/#dategetnextmonthformat-string","title":"date.getNextMonth([format]) \u21d2 <code>String</code>","text":"<p>Returns the current day one month later in the given format.</p> <p>Kind: static method of <code>date</code> Returns: <code>String</code> - The date in the given format.  </p> Param Type Default Description [format] <code>String</code> <code>\"object\"</code> The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). <p>Example <pre><code>const date = await common.date.getNextMonth(\"mm/dd/yyyy\");\n</code></pre> </p>"},{"location":"doc/#dategetpreviousmonthformat-string","title":"date.getPreviousMonth([format]) \u21d2 <code>String</code>","text":"<p>Returns the current day one month before in the given format.</p> <p>Kind: static method of <code>date</code> Returns: <code>String</code> - The date in the given format.  </p> Param Type Default Description [format] <code>String</code> <code>\"object\"</code> The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). <p>Example <pre><code>const date = await common.date.getPreviousMonth(\"mm/dd/yyyy\");\n</code></pre> </p>"},{"location":"doc/#dategetnextyearformat-string","title":"date.getNextYear([format]) \u21d2 <code>String</code>","text":"<p>Returns the current day one year later in the given format.</p> <p>Kind: static method of <code>date</code> Returns: <code>String</code> - The date in the given format.  </p> Param Type Default Description [format] <code>String</code> <code>\"object\"</code> The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). <p>Example <pre><code>const date = await common.date.getNextYear(\"mm/dd/yyyy\");\n</code></pre> </p>"},{"location":"doc/#dategetpreviousyearformat-string","title":"date.getPreviousYear([format]) \u21d2 <code>String</code>","text":"<p>Returns the current day one year before in the given format.</p> <p>Kind: static method of <code>date</code> Returns: <code>String</code> - The date in the given format.  </p> Param Type Default Description [format] <code>String</code> <code>\"object\"</code> The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). <p>Example <pre><code>const date = await common.date.getPreviousYear(\"mm/dd/yyyy\");\n</code></pre> </p>"},{"location":"doc/#dategetspecificdate-format-string","title":"date.getSpecific(date, [format]) \u21d2 <code>String</code>","text":"<p>Returns a specific date in the given format.</p> <p>Kind: static method of <code>date</code> Returns: <code>String</code> - The date in the given format.  </p> Param Type Default Description date <code>String</code> A specific date string. [format] <code>String</code> <code>\"object\"</code> The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). <p>Example <pre><code>const date = await common.date.getSpecific(\"2020, 0, 17\", \"mm/dd/yyyy\");\n</code></pre> </p>"},{"location":"doc/#datecalculatedate-format-string-date","title":"date.calculate([date], [format]) \u21d2 <code>String</code> | <code>Date</code>","text":"<p>Calculates the date based on the input parameter and returns it in the given format.</p> <p>Kind: static method of <code>date</code> Returns: <code>String</code> | <code>Date</code> - The calculated date in the given format.  </p> Param Type Default Description [date] <code>String</code> <code>\"today\"</code> Supported values: today, tomorrow, nextMonth, previousMonth, nextYear, previousYear [format] <code>String</code> <code>\"object\"</code> The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"mmm d, yyyy\", \"datetime\", \"object\"). <p>Example <pre><code>const date = await common.date.calculate(\"today\", \"mm/dd/yyyy\");\n</code></pre> </p>"},{"location":"doc/#commonnavigation","title":"common.navigation","text":"<p>Kind: static class of <code>common</code> </p> <ul> <li>.navigation<ul> <li>.navigateToUrl(url)</li> <li>.navigateToUrlAndRetry(url, [retries], [interval])</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#navigationnavigatetourlurl","title":"navigation.navigateToUrl(url)","text":"<p>Navigates to the passed url.</p> <p>Kind: static method of <code>navigation</code> </p> Param Type Description url <code>String</code> The url. <p>Example <pre><code>await common.navigation.navigateToUrl(\"www.sap.com\");\n</code></pre> </p>"},{"location":"doc/#navigationnavigatetourlandretryurl-retries-interval","title":"navigation.navigateToUrlAndRetry(url, [retries], [interval])","text":"<p>Navigates to the passed url and retries the function in case of a failure.</p> <p>Kind: static method of <code>navigation</code> </p> Param Type Default Description url <code>String</code> The url to navigate to. [retries] <code>Integer</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Integer</code> <code>5000</code> The interval of the retries (ms), can be set in config for all functions under params stepRetriesIntervals. <p>Example <pre><code>await common.navigation.navigateToUrlAndRetry(\"www.sap.com\");\n</code></pre> </p>"},{"location":"doc/#commonuserinteraction","title":"common.userInteraction","text":"<p>Kind: static class of <code>common</code> </p> <ul> <li>.userInteraction<ul> <li>.fillActive(value)</li> <li>.fillActiveAndRetry(value, [retries], [interval])</li> <li>.clearAndFillActive(value)</li> <li>.clearAndFillActiveAndRetry(value, [retries], [interval])</li> <li>.pressKey(keys)</li> <li>.pressEnter()</li> <li>.pressTab()</li> <li>.pressF4()</li> <li>.pressBackspace()</li> <li>.pressEscape()</li> <li>.pressArrowLeft()</li> <li>.pressArrowRight()</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#userinteractionfillactivevalue","title":"userInteraction.fillActive(value)","text":"<p>Fills the active input with the given value.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Description value <code>String</code> | <code>Number</code> The value to enter. <p>Example <pre><code>await common.userInteraction.fillActive(\"My Value\");\n</code></pre> </p>"},{"location":"doc/#userinteractionfillactiveandretryvalue-retries-interval","title":"userInteraction.fillActiveAndRetry(value, [retries], [interval])","text":"<p>Enters the given value to the active input field and retries the action in case it fails.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description value <code>String</code> The value to enter. [retries] <code>Number</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Number</code> <code>5000</code> The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. <p>Example <pre><code>await common.userInteraction.fillActiveAndRetry(\"My Value\");\n</code></pre> </p>"},{"location":"doc/#userinteractionclearandfillactivevalue","title":"userInteraction.clearAndFillActive(value)","text":"<p>Clears and fills the active input.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Description value <code>String</code> The value to fill. <p>Example <pre><code>await common.userInteraction.clearAndFillActive(\"My Value\");\n</code></pre> </p>"},{"location":"doc/#userinteractionclearandfillactiveandretryvalue-retries-interval","title":"userInteraction.clearAndFillActiveAndRetry(value, [retries], [interval])","text":"<p>CClears and fills the active input. Retries the action in case of a failure.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description value <code>String</code> The value to fill. [retries] <code>Number</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Number</code> <code>5000</code> The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. <p>Example <pre><code>await common.userInteraction.clearAndFillActiveAndRetry(\"My Value\");\n</code></pre> </p>"},{"location":"doc/#userinteractionpresskeykeys","title":"userInteraction.pressKey(keys)","text":"<p>Performs the specified keypress. Possible values: https://w3c.github.io/webdriver/#keyboard-actions</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Description keys <code>String</code> | <code>Array.&lt;String&gt;</code> The key or combination of keys to execute. <p>Example <pre><code>await common.userInteraction.pressKey(\"Enter\");\n</code></pre> Example <pre><code>await common.userInteraction.pressKey(\"\\uE004\");\n</code></pre> Example <pre><code>await common.userInteraction.pressKey([\"\\uE009\", \"Alt\"]);\n</code></pre> </p>"},{"location":"doc/#userinteractionpressenter","title":"userInteraction.pressEnter()","text":"<p>Performs the Enter keypress.</p> <p>Kind: static method of <code>userInteraction</code> Example <pre><code>await common.userInteraction.pressEnter();\n</code></pre> </p>"},{"location":"doc/#userinteractionpresstab","title":"userInteraction.pressTab()","text":"<p>Performs the Tab keypress.</p> <p>Kind: static method of <code>userInteraction</code> Example <pre><code>await common.userInteraction.pressTab();\n</code></pre> </p>"},{"location":"doc/#userinteractionpressf4","title":"userInteraction.pressF4()","text":"<p>Performs the F4 keypress.</p> <p>Kind: static method of <code>userInteraction</code> Example <pre><code>await common.userInteraction.pressF4();\n</code></pre> </p>"},{"location":"doc/#userinteractionpressbackspace","title":"userInteraction.pressBackspace()","text":"<p>Performs the Backspace keypress.</p> <p>Kind: static method of <code>userInteraction</code> Example <pre><code>await common.userInteraction.pressBackspace();\n</code></pre> </p>"},{"location":"doc/#userinteractionpressescape","title":"userInteraction.pressEscape()","text":"<p>Performs the Escape keypress.</p> <p>Kind: static method of <code>userInteraction</code> Example <pre><code>await common.userInteraction.pressEscape();\n</code></pre> </p>"},{"location":"doc/#userinteractionpressarrowleft","title":"userInteraction.pressArrowLeft()","text":"<p>Performs the Arrow Left keypress.</p> <p>Kind: static method of <code>userInteraction</code> Example <pre><code>await common.userInteraction.pressArrowLeft();\n</code></pre> </p>"},{"location":"doc/#userinteractionpressarrowright","title":"userInteraction.pressArrowRight()","text":"<p>Performs the Arrow Right keypress.</p> <p>Kind: static method of <code>userInteraction</code> Example <pre><code>await common.userInteraction.pressArrowRight();\n</code></pre> </p>"},{"location":"doc/#util","title":"util","text":"<p>Global namespace for util modules.</p> <p>Kind: global constant  </p> <ul> <li>util<ul> <li>.browser<ul> <li>.getBaseUrl() \u21d2 <code>String</code></li> <li>.setBaseUrl(baseUrl:)</li> <li>.logCurrentUrl()</li> <li>.getCurrentUrl()</li> <li>.resetFocus()</li> <li>.sleep([duration])</li> <li>.collectCoverage()</li> <li>.sleepAndCollectCoverage([duration])</li> <li>.refresh()</li> <li>.clearBrowser([clearLocal], [clearSession], [clearCookies])</li> <li>.getBrowserName() \u21d2 <code>String</code></li> <li>.getUI5Version([timeout])</li> <li>.logUI5Version()</li> <li>.executeScript(command) \u21d2 <code>Any</code></li> <li>.waitUntil(condition, [options]) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.switchToNewWindow(titleOrUrl, [timeout])</li> <li>.switchToWindow(handle)</li> <li>.getCurrentWindow() \u21d2 <code>Object</code></li> <li>.switchToIframe(selector)</li> <li>.switchToDefaultContent()</li> <li>.back()</li> <li>.forward()</li> <li>.log(message)</li> <li>.warn(message)</li> <li>.error(message)</li> <li>.isMobile() \u21d2 <code>boolean</code></li> <li>.isAndroid() \u21d2 <code>boolean</code></li> <li>.isIos() \u21d2 <code>boolean</code></li> </ul> </li> <li>.component<ul> <li>new component()</li> <li>.loadEntryPoint([folderPath]) \u21d2 <code>Object</code></li> <li>.storeEntryPoint(data, [folderPath])</li> </ul> </li> <li>.console<ul> <li>.log(message, [textColor], [backgroundColor], [brightness])</li> <li>.error(message)</li> <li>.warn(message)</li> <li>.success(message)</li> <li>.info(message)</li> </ul> </li> <li>.data<ul> <li>.getData(filename, [source]) \u21d2 <code>Object</code></li> <li>.getSecureData(filename, [source], [options]) \u21d2 <code>Object</code></li> <li>.readDataFromFile(filePath) \u21d2 <code>Object</code></li> <li>.writeDataToFile(filePath, data)</li> <li>.decrypt(data, options) \u21d2 <code>String</code></li> </ul> </li> <li>.file<ul> <li>.upload(files, [selector])</li> <li>.uploadWebGui(files, selector)</li> <li>.parsePdf(pdfStream, renderingMethod) \u21d2 <code>String</code></li> <li>.expectPdfContainsText(pdfStream, text, renderingMethod)</li> <li>.expectPdfNotContainsText(pdfStream, text, renderingMethod)</li> <li>.getExcelData(filePath, fileName, [sheetIndex], [conversionType])</li> <li>.getTextData(filePath)</li> <li>.expectTextDataToContain(filePath)</li> <li>.getXmlData(filePath)</li> <li>.getAttributeValuesFromJson(object)</li> <li>.findFilePathRecursively(directory, fileName)</li> <li>.getFileNamesByExtensions(dirPath, fileExtensions)</li> </ul> </li> <li>.formatter<ul> <li>.sliceStringAt(input, slicePoint, length) \u21d2 <code>String</code></li> <li>.sliceStringAfter(input, slicePoint, length) \u21d2 <code>String</code></li> <li>.trimString(input)</li> <li>.extractNumberFromString(input, [index]) \u21d2 <code>String</code></li> <li>.stringifyJSON(object) \u21d2 <code>String</code></li> <li>.addRemoveLeadingZeros(number, length) \u21d2 <code>String</code></li> <li>.formatDate(date, format, [locale]) \u21d2 <code>String</code></li> </ul> </li> <li>.function<ul> <li>.retry(fct, args, [retries], [interval], [scope])</li> <li>.executeOptional(fct, args)</li> </ul> </li> <li>.system<ul> <li>.getOS() \u21d2 <code>String</code></li> </ul> </li> <li>.userSettings</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#utilbrowser","title":"util.browser","text":"<p>Kind: static class of <code>util</code> </p> <ul> <li>.browser<ul> <li>.getBaseUrl() \u21d2 <code>String</code></li> <li>.setBaseUrl(baseUrl:)</li> <li>.logCurrentUrl()</li> <li>.getCurrentUrl()</li> <li>.resetFocus()</li> <li>.sleep([duration])</li> <li>.collectCoverage()</li> <li>.sleepAndCollectCoverage([duration])</li> <li>.refresh()</li> <li>.clearBrowser([clearLocal], [clearSession], [clearCookies])</li> <li>.getBrowserName() \u21d2 <code>String</code></li> <li>.getUI5Version([timeout])</li> <li>.logUI5Version()</li> <li>.executeScript(command) \u21d2 <code>Any</code></li> <li>.waitUntil(condition, [options]) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.switchToNewWindow(titleOrUrl, [timeout])</li> <li>.switchToWindow(handle)</li> <li>.getCurrentWindow() \u21d2 <code>Object</code></li> <li>.switchToIframe(selector)</li> <li>.switchToDefaultContent()</li> <li>.back()</li> <li>.forward()</li> <li>.log(message)</li> <li>.warn(message)</li> <li>.error(message)</li> <li>.isMobile() \u21d2 <code>boolean</code></li> <li>.isAndroid() \u21d2 <code>boolean</code></li> <li>.isIos() \u21d2 <code>boolean</code></li> </ul> </li> </ul> <p></p>"},{"location":"doc/#browsergetbaseurl-string","title":"browser.getBaseUrl() \u21d2 <code>String</code>","text":"<p>Retrieves the baseUrl from the configuration file.</p> <p>Kind: static method of <code>browser</code> Returns: <code>String</code> - The baseUrl. Example <pre><code>const baseUrl = util.browser.getBaseUrl();\n</code></pre> </p>"},{"location":"doc/#browsersetbaseurlbaseurl","title":"browser.setBaseUrl(baseUrl:)","text":"<p>Sets or overwrites the baseUrl in the configuration file.</p> <p>Kind: static method of <code>browser</code> </p> Param Type Description baseUrl: <code>String</code> base URL to set <p>Example <pre><code>await util.browser.setBaseUrl(\"https://www.sap.com\");\n</code></pre> </p>"},{"location":"doc/#browserlogcurrenturl","title":"browser.logCurrentUrl()","text":"<p>Displays the current URL in the console.</p> <p>Kind: static method of <code>browser</code> Example <pre><code>await util.browser.logCurrentUrl();\n</code></pre> </p>"},{"location":"doc/#browsergetcurrenturl","title":"browser.getCurrentUrl()","text":"<p>Returns the current URL</p> <p>Kind: static method of <code>browser</code> Example <pre><code>await util.browser.getCurrentUrl();\n</code></pre> </p>"},{"location":"doc/#browserresetfocus","title":"browser.resetFocus()","text":"<p>Resets the focus in case it set for a specific element.</p> <p>Kind: static method of <code>browser</code> Example <pre><code>await util.browser.resetFocus();\n</code></pre> </p>"},{"location":"doc/#browsersleepduration","title":"browser.sleep([duration])","text":"<p>Sleeps (pauses execution) for the passed duration.</p> <p>Kind: static method of <code>browser</code> </p> Param Type Default Description [duration] <code>Number</code> <code>1000</code> The time to pause (ms). <p>Example <pre><code>await util.browser.sleep(30000);\n</code></pre> </p>"},{"location":"doc/#browsercollectcoverage","title":"browser.collectCoverage()","text":"<p>Trigger collection of coverage by coverage service.</p> <p>Kind: static method of <code>browser</code> Example <pre><code>await util.browser.collectCoverage();\n</code></pre> </p>"},{"location":"doc/#browsersleepandcollectcoverageduration","title":"browser.sleepAndCollectCoverage([duration])","text":"<p>Trigger collection of coverage by coverage service.</p> <p>Kind: static method of <code>browser</code> </p> Param Type Default Description [duration] <code>Number</code> <code>1000</code> The time to pause (ms). <p>Example <pre><code>await util.browser.sleepAndCollectCoverage(3000);\n</code></pre> </p>"},{"location":"doc/#browserrefresh","title":"browser.refresh()","text":"<p>Refreshes the page.</p> <p>Kind: static method of <code>browser</code> Example <pre><code>await util.browser.refresh();\n</code></pre> </p>"},{"location":"doc/#browserclearbrowserclearlocal-clearsession-clearcookies","title":"browser.clearBrowser([clearLocal], [clearSession], [clearCookies])","text":"<p>Clears the local and session cache and deletes all browser cookies.</p> <p>Kind: static method of <code>browser</code> </p> Param Type Default Description [clearLocal] <code>Boolean</code> <code>true</code> Specifies if the local cache will be cleared. [clearSession] <code>Boolean</code> <code>true</code> Specifies if the session cache will be cleared. [clearCookies] <code>Boolean</code> <code>true</code> Specifies if the cookies will be cleared. <p>Example <pre><code>await util.browser.clearBrowser();\n</code></pre> </p>"},{"location":"doc/#browsergetbrowsername-string","title":"browser.getBrowserName() \u21d2 <code>String</code>","text":"<p>Retrieves the name of the current browser.</p> <p>Kind: static method of <code>browser</code> Returns: <code>String</code> - The browser name. Example <pre><code>const browserName = util.browser.getBrowserName();\n</code></pre> </p>"},{"location":"doc/#browsergetui5versiontimeout","title":"browser.getUI5Version([timeout])","text":"<p>Gets the UI5 version and creation date for UI5 based applications.</p> <p>Kind: static method of <code>browser</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await util.browser.getUI5Version();\n</code></pre> </p>"},{"location":"doc/#browserlogui5version","title":"browser.logUI5Version()","text":"<p>Logs the UI5 version and creation date for UI5 based applications to the console.</p> <p>Kind: static method of <code>browser</code> Example <pre><code>await util.browser.logUI5Version();\n</code></pre> </p>"},{"location":"doc/#browserexecutescriptcommand-any","title":"browser.executeScript(command) \u21d2 <code>Any</code>","text":"<p>Executes the specified JavaScript command.</p> <p>Kind: static method of <code>browser</code> Returns: <code>Any</code> - The result from the executed function.  </p> Param Type Description command <code>String</code> | <code>function</code> The command to execute. <p>Example <pre><code>await util.browser.executeScript(command);\n</code></pre> </p>"},{"location":"doc/#browserwaituntilcondition-options-promisevoid","title":"browser.waitUntil(condition, [options]) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Waits until the specified function returns true or the timeout is reached.</p> <p>Kind: static method of <code>browser</code> Returns: <code>Promise.&lt;void&gt;</code> - Resolves when the function returns true or the timeout is reached.  </p> Param Type Description condition <code>function</code> The function to wait for. [options] <code>Object</code> Options for the wait. [options.timeout] <code>Number</code> The timeout to wait (ms). [options.timeoutMsg] <code>String</code> The message to display if the timeout is reached. [options.interval] <code>Number</code> The interval to check the function (ms). <p>Example <pre><code>await util.browser.waitUntil(async () =&gt; await ui5.element.isVisible(selector), { timeout: 5000, timeoutMsg: \"Element not visible\" });\n</code></pre> </p>"},{"location":"doc/#browserswitchtonewwindowtitleorurl-timeout","title":"browser.switchToNewWindow(titleOrUrl, [timeout])","text":"<p>Switches to the window or tab with the given title.</p> <p>Kind: static method of <code>browser</code> </p> Param Type Default Description titleOrUrl <code>String</code> | <code>RegExp</code> Window title or url of the expected window or tab (can be either a string or part of it as regular expression). [timeout] <code>Number</code> <code>10000</code> The timeout to wait (ms). <p>Example <pre><code>await util.browser.switchToNewWindow(\"SAP - Home\");\n</code></pre> Example <pre><code>await util.browser.switchToNewWindow(/Home/);\n</code></pre> Example <pre><code>await util.browser.switchToNewWindow(\"www.sap.com\");\n</code></pre> </p>"},{"location":"doc/#browserswitchtowindowhandle","title":"browser.switchToWindow(handle)","text":"<p>Switches to the passed window.</p> <p>Kind: static method of <code>browser</code> </p> Param Type Description handle <code>Object</code> The window handle. <p>Example <pre><code>await util.browser.switchToWindow(originalWindowHandle);\n</code></pre> </p>"},{"location":"doc/#browsergetcurrentwindow-object","title":"browser.getCurrentWindow() \u21d2 <code>Object</code>","text":"<p>Returns the current window handle.</p> <p>Kind: static method of <code>browser</code> Returns: <code>Object</code> - The window handle. Example <pre><code>const originalWindowHandle = await util.browser.getCurrentWindow();\n</code></pre> </p>"},{"location":"doc/#browserswitchtoiframeselector","title":"browser.switchToIframe(selector)","text":"<p>Switches to the passed iframe.</p> <p>Kind: static method of <code>browser</code> </p> Param Type Description selector <code>String</code> The CSS selector describing the iframe element. <p>Example <pre><code>await util.browser.switchToIframe(\"iframe[id='frame01']\");\n</code></pre> </p>"},{"location":"doc/#browserswitchtodefaultcontent","title":"browser.switchToDefaultContent()","text":"<p>Switches to the default content of the HTML page.</p> <p>Kind: static method of <code>browser</code> Example <pre><code>await util.browser.switchToDefaultContent();\n</code></pre> </p>"},{"location":"doc/#browserback","title":"browser.back()","text":"<p>Go one step back in browser history.</p> <p>Kind: static method of <code>browser</code> Example <pre><code>await util.browser.back();\n</code></pre> </p>"},{"location":"doc/#browserforward","title":"browser.forward()","text":"<p>Go one step ahead in browser history.</p> <p>Kind: static method of <code>browser</code> Example <pre><code>await util.browser.forward();\n</code></pre> </p>"},{"location":"doc/#browserlogmessage","title":"browser.log(message)","text":"<p>add log message to browser logs, can be viewed in the html report</p> <p>Kind: static method of <code>browser</code> </p> Param Type Description message <code>String</code> string - The message to be logged. <p>Example <pre><code>await util.browser.log(\"Created PO 123456\");\n</code></pre> </p>"},{"location":"doc/#browserwarnmessage","title":"browser.warn(message)","text":"<p>add warning message to browser logs, can be viewed in the html report</p> <p>Kind: static method of <code>browser</code> </p> Param Type Description message <code>String</code> string - The warning message to be logged. <p>Example <pre><code>await util.browser.warn(\"This is a warning message\");\n</code></pre> </p>"},{"location":"doc/#browsererrormessage","title":"browser.error(message)","text":"<p>add error message to browser logs, can be viewed in the html report</p> <p>Kind: static method of <code>browser</code> </p> Param Type Description message <code>String</code> string - The error message to be logged. <p>Example <pre><code>await util.browser.error(\"This is an error message\");\n</code></pre> </p>"},{"location":"doc/#browserismobile-boolean","title":"browser.isMobile() \u21d2 <code>boolean</code>","text":"<p>Indicates a mobile session</p> <p>Kind: static method of <code>browser</code> Returns: <code>boolean</code> - Return true if its a mobile session driver. Example <pre><code>await util.browser.isMobile();\n</code></pre> </p>"},{"location":"doc/#browserisandroid-boolean","title":"browser.isAndroid() \u21d2 <code>boolean</code>","text":"<p>Indicates a mobile session</p> <p>Kind: static method of <code>browser</code> Returns: <code>boolean</code> - Return true if its a Android session driver. Example <pre><code>await util.browser.isAndroid();\n</code></pre> </p>"},{"location":"doc/#browserisios-boolean","title":"browser.isIos() \u21d2 <code>boolean</code>","text":"<p>Indicates an iOS session</p> <p>Kind: static method of <code>browser</code> Returns: <code>boolean</code> - Return true if its a iOS session driver. Example <pre><code>await util.browser.isIos();\n</code></pre> </p>"},{"location":"doc/#utilcomponent","title":"util.component","text":"<p>Kind: static class of <code>util</code> </p> <ul> <li>.component<ul> <li>new component()</li> <li>.loadEntryPoint([folderPath]) \u21d2 <code>Object</code></li> <li>.storeEntryPoint(data, [folderPath])</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#new-component","title":"new component()","text":"<p>This class provides functions for writing component tests with qmate-proxy-service</p> <p></p>"},{"location":"doc/#componentloadentrypointfolderpath-object","title":"component.loadEntryPoint([folderPath]) \u21d2 <code>Object</code>","text":"<p>Will be called in component test scripts. Returns a previously stored entry point object for sharing information (like a draft id) between preparation and the actual component tests.</p> <p>Kind: static method of <code>component</code> Returns: <code>Object</code> - The data object of the stored entry point.  </p> Param Type Default Description [folderPath] <code>String</code> <code>\"./entrypoints\"</code> Custom folder path where entry points are stored. <p>Example <pre><code>const entryPoint = util.component.loadEntryPoint();\n</code></pre> </p>"},{"location":"doc/#componentstoreentrypointdata-folderpath","title":"component.storeEntryPoint(data, [folderPath])","text":"<p>Will be called in preparation scripts before component tests. Stores an entry point object for sharing information (like a draft id) between preparation and the actual component tests.</p> <p>Kind: static method of <code>component</code> </p> Param Type Default Description data <code>Object</code> The data object of the entry point to store. [folderPath] <code>String</code> <code>\"./entrypoints\"</code> Custom folder path where entry points are stored. <p>Example <pre><code>const entryPoint = util.component.storeEntryPoint({\"draftId\": \"0123456789\"});\n</code></pre> </p>"},{"location":"doc/#utilconsole","title":"util.console","text":"<p>Kind: static class of <code>util</code> </p> <ul> <li>.console<ul> <li>.log(message, [textColor], [backgroundColor], [brightness])</li> <li>.error(message)</li> <li>.warn(message)</li> <li>.success(message)</li> <li>.info(message)</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#consolelogmessage-textcolor-backgroundcolor-brightness","title":"console.log(message, [textColor], [backgroundColor], [brightness])","text":"<p>Logs a message to the console in the given color.</p> <p>Kind: static method of <code>console</code> </p> Param Type Description message <code>String</code> The message to log. [textColor] <code>String</code> The color of the text: \"black, white\", \"red\", \"yellow\", \"green\", \"blue\", \"cyan\", \"magenta\". [backgroundColor] <code>String</code> The color of the background: \"black, white\", \"red\", \"yellow\", \"green\", \"blue\", \"cyan\", \"magenta\". [brightness] <code>String</code> Adjusts the brightness of the color: \"bright\", \"dim\". Leave empty for default. <p>Example <pre><code>util.console.log(\"The document has been saved.\", \"green\");\n</code></pre> </p>"},{"location":"doc/#consoleerrormessage","title":"console.error(message)","text":"<p>Logs a error message to the console in red.</p> <p>Kind: static method of <code>console</code> </p> Param Type Description message <code>String</code> The message to log. <p>Example <pre><code>util.console.error(\"Error: Please investigate.\");\n</code></pre> </p>"},{"location":"doc/#consolewarnmessage","title":"console.warn(message)","text":"<p>Logs a warning message to the console in yellow.</p> <p>Kind: static method of <code>console</code> </p> Param Type Description message <code>String</code> The message to log. <p>Example <pre><code>util.console.warn(\"Optional step not executed.\");\n</code></pre> </p>"},{"location":"doc/#consolesuccessmessage","title":"console.success(message)","text":"<p>Logs a success message to the console in green.</p> <p>Kind: static method of <code>console</code> </p> Param Type Description message <code>String</code> The message to log. <p>Example <pre><code>util.console.success(\"The document has been saved.\");\n</code></pre> </p>"},{"location":"doc/#consoleinfomessage","title":"console.info(message)","text":"<p>Logs a info message to the console in cyan.</p> <p>Kind: static method of <code>console</code> </p> Param Type Description message <code>String</code> The message to log. <p>Example <pre><code>util.console.success(\"The document has been saved.\");\n</code></pre> </p>"},{"location":"doc/#utildata","title":"util.data","text":"<p>Kind: static class of <code>util</code> </p> <ul> <li>.data<ul> <li>.getData(filename, [source]) \u21d2 <code>Object</code></li> <li>.getSecureData(filename, [source], [options]) \u21d2 <code>Object</code></li> <li>.readDataFromFile(filePath) \u21d2 <code>Object</code></li> <li>.writeDataToFile(filePath, data)</li> <li>.decrypt(data, options) \u21d2 <code>String</code></li> </ul> </li> </ul> <p></p>"},{"location":"doc/#datagetdatafilename-source-object","title":"data.getData(filename, [source]) \u21d2 <code>Object</code>","text":"<p>Returns the data object with the given filename (JSON, stored in data folder).</p> <p>Kind: static method of <code>data</code> Returns: <code>Object</code> - The data object.  </p> Param Type Default Description filename <code>String</code> The name of the data file. [source] <code>String</code> <code>data</code> The source key defined under params.import of the config file. <p>Example <pre><code>const data = util.data.getData(\"myTest\");\n</code></pre> </p>"},{"location":"doc/#datagetsecuredatafilename-source-options-object","title":"data.getSecureData(filename, [source], [options]) \u21d2 <code>Object</code>","text":"<p>Returns and encrypts the data object with the given filename (JSON, stored in data folder). Will return the local file object if private key is not accessible.</p> <p>Kind: static method of <code>data</code> Returns: <code>Object</code> - The encrypted or local data object.  </p> Param Type Default Description filename <code>String</code> The name of the data file (without suffix '.secure' or '.local'). [source] <code>String</code> <code>data</code> The source key defined under params.import of the config file. [options] <code>Object</code> The options object. <p>Example <pre><code>const secureData = util.data.getSecureData(\"myTest\");\n</code></pre> </p>"},{"location":"doc/#datareaddatafromfilefilepath-object","title":"data.readDataFromFile(filePath) \u21d2 <code>Object</code>","text":"<p>Reads the data object from the given filepath.</p> <p>Kind: static method of <code>data</code> Returns: <code>Object</code> - The data object.  </p> Param Type Description filePath <code>String</code> The filepath. <p>Example <pre><code>const data = util.data.readDataFromFile(\"./data/myData.json\");\n</code></pre> </p>"},{"location":"doc/#datawritedatatofilefilepath-data","title":"data.writeDataToFile(filePath, data)","text":"<p>Writes the data object to the given filepath.</p> <p>Kind: static method of <code>data</code> </p> Param Type Description filePath <code>String</code> The filepath. data <code>Object</code> The data object to write. <p>Example <pre><code>const data = util.data.writeDataToFile(\"myTest\");\n</code></pre> </p>"},{"location":"doc/#datadecryptdata-options-string","title":"data.decrypt(data, options) \u21d2 <code>String</code>","text":"<p>Decrypts the passed input data.</p> <p>Kind: static method of <code>data</code> Returns: <code>String</code> - The decrypted data.  </p> Param Type Description data <code>String</code> | <code>Array.&lt;String&gt;</code> The encrypted data to decrypt. Single value or array of values for different keys. options <code>Object</code> The decryption options. <p>Example <pre><code>const decrypted = util.data.decrypt(\"d704004c262faa8ef4bdcf34c8a94883e15524872c7bef334d26a391a1934cf47338b749d99426980ee4cc7a81deaef21439c6894ab0324cdb29b9b6332635baca442651c5d37847f52bb90b8868e037271a7d456024b39b65fdf4dc62e8d82a3d5683a72e4324c59d339742fc79749f0ee74abef916d38e306218adc48e3547a2b346962249320c962d22cb46d9998de36d8219a2496c0997d0fc389f76fb1431a9b57c317886e9c9795c0a09ad98d9fa0b7687d10814dc7973397f3f72a227a04ead4c3d1d428c096a51922ffc4d7afc3952df1c130def5c5fb3e834605cbf1454885966cc65c77046343f4c678e74931fb2dd6cac8dae17837cf674f288d6550dd7fa6b01f5b7ea68aa6bd27d79dd5d53edb5fd4b4edce824bd31b3939352ad7a71a16bab8c54025c2bb92c54e022fcd23ff08bc54a17fc50d00dc3b884cadbfdefe1e75901fdf80e7324ad02a891f2c4863fa120ca238520b79126c65a03\");\n</code></pre> </p>"},{"location":"doc/#utilfile","title":"util.file","text":"<p>Kind: static class of <code>util</code> </p> <ul> <li>.file<ul> <li>.upload(files, [selector])</li> <li>.uploadWebGui(files, selector)</li> <li>.parsePdf(pdfStream, renderingMethod) \u21d2 <code>String</code></li> <li>.expectPdfContainsText(pdfStream, text, renderingMethod)</li> <li>.expectPdfNotContainsText(pdfStream, text, renderingMethod)</li> <li>.getExcelData(filePath, fileName, [sheetIndex], [conversionType])</li> <li>.getTextData(filePath)</li> <li>.expectTextDataToContain(filePath)</li> <li>.getXmlData(filePath)</li> <li>.getAttributeValuesFromJson(object)</li> <li>.findFilePathRecursively(directory, fileName)</li> <li>.getFileNamesByExtensions(dirPath, fileExtensions)</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#fileuploadfiles-selector","title":"file.upload(files, [selector])","text":"<p>Uploads all the file/s by the paths given in the Array.</p> <p>Kind: static method of <code>file</code> </p> Param Type Default Description files <code>Array.&lt;String&gt;</code> Array with path/s of file/s to be uploaded. [selector] <code>String</code> <code>\"input[type='file']\"</code> Custom selector of uploader control (in case there are more then one present). <p>Example <pre><code>await util.file.upload([\"path/to/text1.txt\", \"path/to/text2.txt\"]); // uses the default uploader control\n</code></pre> Example <pre><code>await util.file.upload([\"path/to/text1.txt\", \"path/to/text2.txt\"], \"input[id='myUpload']\"); // upload to file uploader with matching selector\n</code></pre> </p>"},{"location":"doc/#fileuploadwebguifiles-selector","title":"file.uploadWebGui(files, selector)","text":"<p>Uploads all the file/s by the paths given in the Array for SAP WebGUI apps.</p> <p>Kind: static method of <code>file</code> </p> Param Type Description files <code>Array.&lt;String&gt;</code> Array with path/s of file/s to be uploaded. selector <code>String</code> Custom selector of the input element <p>Example <pre><code>await util.file.uploadWebGui([\"path/to/text1.txt\"], \"INPUT[title='External file name']\");\n</code></pre> </p>"},{"location":"doc/#fileparsepdfpdfstream-renderingmethod-string","title":"file.parsePdf(pdfStream, renderingMethod) \u21d2 <code>String</code>","text":"<p>Parses the text from PDF stream. Returned text can be asserted to verify the PDF document content.</p> <p>Kind: static method of <code>file</code> Returns: <code>String</code> - The parsed PDF text. See: Parse PDF </p> Param Type Description pdfStream <code>Buffer</code> PDF stream to be downloaded. renderingMethod <code>function</code> Function to customize the parsing process. <p>Example <pre><code>await util.file.parsePdf(pdfStream, customRenderingMethod);\n</code></pre> </p>"},{"location":"doc/#fileexpectpdfcontainstextpdfstream-text-renderingmethod","title":"file.expectPdfContainsText(pdfStream, text, renderingMethod)","text":"<p>Parses the PDF and checks for given text to be contained in PDF.</p> <p>Kind: static method of <code>file</code> See: Parse pdf </p> Param Type Description pdfStream <code>Buffer</code> PDF stream to be downloaded. text <code>String</code> The expected text. renderingMethod <code>function</code> Function to customize the parsing process. <p>Example <pre><code>await util.file.expectPdfContainsText(pdfStream, \"abc\");\n</code></pre> </p>"},{"location":"doc/#fileexpectpdfnotcontainstextpdfstream-text-renderingmethod","title":"file.expectPdfNotContainsText(pdfStream, text, renderingMethod)","text":"<p>Parses the PDF and checks for given text not to be contained in PDF.</p> <p>Kind: static method of <code>file</code> See: Parse pdf </p> Param Type Description pdfStream <code>Buffer</code> PDF stream to be downloaded text <code>String</code> The text expected to be not contained in the PDF. renderingMethod <code>function</code> Function to customize the parsing process. <p>Example <pre><code>await util.file.expectPdfNotContainsText(pdfStream, \"abc\");\n</code></pre> </p>"},{"location":"doc/#filegetexceldatafilepath-filename-sheetindex-conversiontype","title":"file.getExcelData(filePath, fileName, [sheetIndex], [conversionType])","text":"<ul> <li>It returns the excel data based on the conversion type which is passed</li> </ul> <p>Kind: static method of <code>file</code> </p> Param Type Description filePath <code>string</code> File path is required fileName <code>string</code> File Name is required [sheetIndex] <code>number</code> sheetIndex is required [conversionType] <code>string</code> Value for this are [json, csv, txt] <p>Example <pre><code>const myTableContent = await util.file.getExcelData(\"/Users/path/myWork\", \"myTable.xlx\");\n</code></pre> </p>"},{"location":"doc/#filegettextdatafilepath","title":"file.getTextData(filePath)","text":"<ul> <li>Returns the content of a .txt file.</li> </ul> <p>Kind: static method of <code>file</code> </p> Param Type Description filePath <code>string</code> Path to the file. <p>Example <pre><code>const txtData = await util.file.getTextData(path.resolve(__dirname, \"./testFiles/test3.txt\"));\nconst isDateIncluded = txtData.includes(\"26.6.2023\");\ncommon.assertion.expectEqual(isDateIncluded, true);\n</code></pre> </p>"},{"location":"doc/#fileexpecttextdatatocontainfilepath","title":"file.expectTextDataToContain(filePath)","text":"<ul> <li>Reads the specified .txt file and asserts if it includes a specific string.</li> </ul> <p>Kind: static method of <code>file</code> </p> Param Type Description filePath <code>string</code> Path to the file. <p>Example <pre><code>await util.file.expectTextDataToContain(\"/Users/path/myWork\", \"supplierList.txt\");\n</code></pre> </p>"},{"location":"doc/#filegetxmldatafilepath","title":"file.getXmlData(filePath)","text":"<ul> <li>Returns the converted JSON object based on the passed XML file.</li> </ul> <p>Kind: static method of <code>file</code> </p> Param Type Description filePath <code>string</code> Path to the file. <p>Example <pre><code>const xmlData = await util.file.getXmlData(path.resolve(__dirname, \"./testFiles/test2.xml\"));\n</code></pre> </p>"},{"location":"doc/#filegetattributevaluesfromjsonobject","title":"file.getAttributeValuesFromJson(object)","text":"<ul> <li>Traverses the passed JSON object and returns the value/s of the passed attribute if found. Else returns empty Array.</li> </ul> <p>Kind: static method of <code>file</code> </p> Param Type Description object <code>object</code> The JSON Object to search through. <p>Example <pre><code>const attribute = util.file.getAttributeValuesFromJson(xmlData, \"CtrlSum\");\n</code></pre> </p>"},{"location":"doc/#filefindfilepathrecursivelydirectory-filename","title":"file.findFilePathRecursively(directory, fileName)","text":"<ul> <li>Returns the absolute path of the file with the given filename. Searches Recursively for the file within the given directory.</li> </ul> <p>Kind: static method of <code>file</code> </p> Param Type Description directory <code>string</code> The name of the directory. fileName <code>string</code> The name of the file. <p>Example <pre><code>await util.file.findFilePathRecursively(\"/Users\",\"test.xls\");\n</code></pre> </p>"},{"location":"doc/#filegetfilenamesbyextensionsdirpath-fileextensions","title":"file.getFileNamesByExtensions(dirPath, fileExtensions)","text":"<ul> <li>Returns the filename/s of the given directory filtered by the given extensions.</li> </ul> <p>Kind: static method of <code>file</code> </p> Param Type Description dirPath <code>string</code> The path to the directory. fileExtensions <code>string</code> | <code>Array.&lt;string&gt;</code> The file extension as string or multiple as string array. <p>Example <pre><code>const fileName = await util.file.getFileNamesByExtensions(\"regression/downloads\", \"xml\");\nconst fileNames = await util.file.getFileNamesByExtensions(\"regression/downloads\", \"[\"xml\", \"txt\"]\");\n</code></pre> </p>"},{"location":"doc/#utilformatter","title":"util.formatter","text":"<p>Kind: static class of <code>util</code> </p> <ul> <li>.formatter<ul> <li>.sliceStringAt(input, slicePoint, length) \u21d2 <code>String</code></li> <li>.sliceStringAfter(input, slicePoint, length) \u21d2 <code>String</code></li> <li>.trimString(input)</li> <li>.extractNumberFromString(input, [index]) \u21d2 <code>String</code></li> <li>.stringifyJSON(object) \u21d2 <code>String</code></li> <li>.addRemoveLeadingZeros(number, length) \u21d2 <code>String</code></li> <li>.formatDate(date, format, [locale]) \u21d2 <code>String</code></li> </ul> </li> </ul> <p></p>"},{"location":"doc/#formatterslicestringatinput-slicepoint-length-string","title":"formatter.sliceStringAt(input, slicePoint, length) \u21d2 <code>String</code>","text":"<p>Slices the given string beginning at a specific substring.</p> <p>Kind: static method of <code>formatter</code> Returns: <code>String</code> - The sliced string.  </p> Param Type Description input <code>String</code> The input string to slice. slicePoint <code>String</code> The substring at which the input string is being sliced. length <code>number</code> The required length of the returning string (starting at the index of the passed slice point). <p>Example <pre><code>const sliced = util.formatter.sliceStringAt(\"prefixNR12345postfix\", \"NR\", 7);\n// returns \"NR12345\"\n</code></pre> </p>"},{"location":"doc/#formatterslicestringafterinput-slicepoint-length-string","title":"formatter.sliceStringAfter(input, slicePoint, length) \u21d2 <code>String</code>","text":"<p>Slices the given string after a specific substring.</p> <p>Kind: static method of <code>formatter</code> Returns: <code>String</code> - The sliced string.  </p> Param Type Description input <code>String</code> The input string to slice. slicePoint <code>String</code> The substring after which the input string is being sliced. length <code>number</code> The required length of the returning string (starting at the index after the passed slice point). <p>Example <pre><code>const sliced = util.formatter.sliceStringAfter(\"prefixNR12345postfix\", \"NR\", 5);\n// returns \"12345\"\n</code></pre> </p>"},{"location":"doc/#formattertrimstringinput","title":"formatter.trimString(input)","text":"<p>Removes whitespace from both sides of the given string.</p> <p>Kind: static method of <code>formatter</code> </p> Param Type Description input <code>String</code> The input string to trim. <p>Example <pre><code>const trimmed = util.formatter.trimString(\"   value \");\n// returns \"value\"\n</code></pre> </p>"},{"location":"doc/#formatterextractnumberfromstringinput-index-string","title":"formatter.extractNumberFromString(input, [index]) \u21d2 <code>String</code>","text":"<p>Extracts all numbers from a string.</p> <p>Kind: static method of <code>formatter</code> Returns: <code>String</code> - The extracted number.  </p> Param Type Default Description input <code>String</code> The input string to extract the number. [index] <code>number</code> <code>0</code> If there are multiple numbers in the string you can pass an index to return a specific number. <p>Example <pre><code>const extracted = util.formatter.extractNumberFromString(\"prefixNR12345postfix\");\n// returns \"12345\"\n</code></pre> Example <pre><code>const extracted = util.formatter.extractNumberFromString(\"first12345 someText second 20 abc\", 1);\n// returns \"20\"\n</code></pre> </p>"},{"location":"doc/#formatterstringifyjsonobject-string","title":"formatter.stringifyJSON(object) \u21d2 <code>String</code>","text":"<p>Converts a JSON object to string.</p> <p>Kind: static method of <code>formatter</code> Returns: <code>String</code> - The converted JSON object.  </p> Param Type Description object <code>Object</code> The JSON to be converted. <p>Example <pre><code>console.log(`Printing the current selector: ${util.formatter.stringifyJSON(selector)}`);\n</code></pre> </p>"},{"location":"doc/#formatteraddremoveleadingzerosnumber-length-string","title":"formatter.addRemoveLeadingZeros(number, length) \u21d2 <code>String</code>","text":"<p>Adds or removes leading zeros to the passed number to format it to the required length.</p> <p>Kind: static method of <code>formatter</code> Returns: <code>String</code> - The formatted number.  </p> Param Type Description number <code>String</code> The number to be formatted. length <code>Number</code> The required length of the number. <p>Example <pre><code>const itemNumber = util.formatter.addRemoveLeadingZeros(10, 5);\n</code></pre> </p>"},{"location":"doc/#formatterformatdatedate-format-locale-string","title":"formatter.formatDate(date, format, [locale]) \u21d2 <code>String</code>","text":"<p>formats date.</p> <p>Kind: static method of <code>formatter</code> Returns: <code>String</code> - The formatted date as string.  </p> Param Type Default Description date <code>Date</code> The date object to be formatted. format <code>String</code> The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"mmm d, yyyy\", \"datetime\", \"object\"). [locale] <code>String</code> <code>\"en-US\"</code> The locale format of the date. E.g. \"en-US\", \"de-DE\", etc. <p>Example <pre><code>const date = new Date(2020, 0, 17);\nconst formattedDate = util.formatter.formatDate(date, \"mm/dd/yyyy\");\n// returns \"01/17/2020\"\n</code></pre> Example <pre><code>const date = new Date(2022, 3, 12);\nconst formattedDate = util.formatter.formatDate(date, \"mmm dd, yyyy\");\n// returns \"Apr 03, 2022\"\n</code></pre> </p>"},{"location":"doc/#utilfunction","title":"util.function","text":"<p>Kind: static class of <code>util</code> </p> <ul> <li>.function<ul> <li>.retry(fct, args, [retries], [interval], [scope])</li> <li>.executeOptional(fct, args)</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#functionretryfct-args-retries-interval-scope","title":"function.retry(fct, args, [retries], [interval], [scope])","text":"<p>Retries the passed function n times with a specific interval until it executed successfully.</p> <p>Kind: static method of <code>function</code> </p> Param Type Default Description fct <code>function</code> The function to retry. args <code>Array</code> An array of the arguments passed to the function. [retries] <code>Integer</code> <code>3</code> The number of retries. Can be set in config for all functions under \"params\" - \"stepsRetries\". [interval] <code>Integer</code> <code>5000</code> The interval of the retries (ms). Can be set in config for all functions under \"params\" - \"stepRetriesIntervals\". [scope] <code>Object</code> <code></code> The function scope. Defaults is the global object. <p>Example <pre><code>await util.function.retry(ui5.userInteraction.fill, [selector, value], 4, 10000);\n</code></pre> Example <pre><code>await util.function.retry(async () =&gt; {\n await ui5.userInteraction.fill(selector, \"ABC\");\n}, [], 2, 30000);\n</code></pre> </p>"},{"location":"doc/#functionexecuteoptionalfct-args","title":"function.executeOptional(fct, args)","text":"<p>Executes the given function optionally. If it fails, a promise will be returned anyway.</p> <p>Kind: static method of <code>function</code> </p> Param Type Description fct <code>function</code> The function to execute. args <code>Array</code> An array of the arguments passed to the function. <p>Example <pre><code>await util.function.executeOptional(ui5.userInteraction.fill, [selector, value]);\n</code></pre> Example <pre><code>await util.function.executeOptional(async () =&gt; {\n await ui5.userInteraction.fill(selector, \"ABC\");\n}, []);\n</code></pre> </p>"},{"location":"doc/#utilsystem","title":"util.system","text":"<p>Kind: static class of <code>util</code> </p>"},{"location":"doc/#systemgetos-string","title":"system.getOS() \u21d2 <code>String</code>","text":"<p>Returns the current operating system.</p> <p>Kind: static method of <code>system</code> Returns: <code>String</code> - AIX | Android | MacOS | FreeBSD | Linux | OpenBSD | Windows | SunOS Example <pre><code>const os = await util.system.getOS();\n</code></pre> </p>"},{"location":"doc/#utilusersettings","title":"util.userSettings","text":"<p>Kind: static class of <code>util</code> </p>"},{"location":"doc/#ui5","title":"ui5","text":"<p>Global namespace for UI5 modules.</p> <p>Kind: global constant  </p> <ul> <li>ui5<ul> <li>.assertion<ul> <li>.expectAttributeToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectAttributeToContain(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectTextToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectValueToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectValueToBeDefined(selector, [index], [timeout])</li> <li>.expectToBeNotEnabled(selector, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectToBeEnabled(selector, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectValidationError(selector, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectValidationSuccess(selector, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectCssPropertyValueToBe(selector, cssProperty, compareValue, [index], [timeout])</li> <li>.expectBindingPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectBindingContextPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectToBeVisible(selector, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectToBeVisibleInViewport(selector, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectToBeNotVisible(selector, [index], [timeout])</li> <li>.expectMessageToastTextToBe(text, [timeout])</li> </ul> </li> <li>.confirmationDialog<ul> <li>.clickButton(text, [timeout])</li> <li>.clickOk([timeout])</li> <li>.clickCancel([timeout])</li> <li>.clickYes([timeout])</li> <li>.clickNo([timeout])</li> <li>.clickCreate([timeout])</li> <li>.clickDelete([timeout])</li> <li>.clickRevokeApproval([timeout])</li> </ul> </li> <li>.control<ul> <li>.execute(callbackFunction, selectorOrElement, args)</li> <li>.focus(selector, [index], [timeout])</li> <li>.getProperty(selectorOrElement, propertyName)</li> <li>.getAggregationProperty(selectorOrElement, propertyName)</li> <li>.getAssociationProperty(selectorOrElement, propertyName)</li> <li>.getBindingContextPathProperty(selectorOrElement)</li> <li>.getPropertyBinding(selectorOrElement, propertyName) \u21d2 <code>Array</code></li> </ul> </li> <li>.date<ul> <li>.pick(selector, date, [index])</li> <li>.pickRange(selector, range, [index])</li> <li>.fillRange(selector, range, [index])</li> </ul> </li> <li>.element<ul> <li>.waitForAll(selector, [timeout])</li> <li>.getAllDisplayed(selector, [timeout]) \u21d2 <code>Array.&lt;Object&gt;</code></li> <li>.getDisplayed(selector, [index], [timeout]) \u21d2 <code>Object</code></li> <li>.getByText(selector, value, [index], [timeout]) \u21d2 <code>Object</code></li> <li>.getByChild(elementSelector, childSelector, [index], [timeout]) \u21d2 <code>Object</code></li> <li>.getByParent(elementSelector, parentSelector, [index], [timeout]) \u21d2 <code>Object</code></li> <li>.getId(selector, [index], [timeout]) \u21d2 <code>String</code></li> <li>.getPropertyValue(selector, property, [index], [timeout]) \u21d2 <code>any</code></li> <li>.getValue(selector, [index], [timeout]) \u21d2 <code>String</code></li> <li>.getCssPropertyValue(selector, cssProperty, [index], [timeout]) \u21d2 <code>String</code></li> <li>.getBindingValue(selector, bindingContext, [index], [timeout]) \u21d2 <code>String</code></li> <li>.isVisible(selector, [index], [timeout]) \u21d2 <code>Boolean</code></li> <li>.highlight(selector, [duration], [color])</li> </ul> </li> <li>.errorDialog<ul> <li>.expectToBeVisible()</li> <li>.clickClose()</li> </ul> </li> <li>.footerBar<ul> <li>.clickButton(text, [timeout])</li> <li>.clickApply([timeout])</li> <li>.clickSave([timeout])</li> <li>.clickCreate([timeout])</li> <li>.clickCancel([timeout])</li> <li>.clickCheck([timeout])</li> <li>.clickOrder([timeout])</li> <li>.clickPost([timeout])</li> <li>.clickAdd([timeout])</li> </ul> </li> <li>.mockserver<ul> <li>.waitForUi5ApplicationLoad()</li> <li>.interactWithMockServer(mockServerPath, fnCallback, oParams)</li> <li>.attachFunctionBefore(method, mockServerPath, fnBeforeCallback, oParams)</li> <li>.attachFunctionAfter(method, mockServerPath, fnAfterCallback, oParams)</li> <li>.addNewRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation)</li> <li>.removeRequest(method, mockServerPath, urlPathRegex)</li> <li>.addOrOverrideRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation)</li> <li>.startMockServer(mockServerPath)</li> <li>.initMockServer(mockServerPath, mockServerOptions)</li> <li>.initApplication(mockServerPath)</li> <li>.stopMockServer(mockServerPath)</li> <li>.loadMockDataFile(filePath, isText) \u21d2 <code>String</code></li> <li>.getEntitySetData(mockServerPath, entitySetName) \u21d2 <code>Array</code></li> <li>.setEntitySetData(mockServerPath, entitySetName, entries)</li> </ul> </li> <li>.navigation<ul> <li>.navigateToApplication(intent, [preventPopups], [verify], [refresh])</li> <li>.navigateToApplicationAndRetry(intent, [preventPopups], [verify], [retries], [interval])</li> <li>.navigateToSystemAndApplication(system, intent, [closePopups], [verify])</li> <li>.navigateToSystemAndApplicationAndRetry(system, intent, [closePopups], [verify], [retries], [interval])</li> <li>.navigateToApplicationWithQueryParams(intent, queryParams, [preventPopups], [verify])</li> <li>.navigateToApplicationWithQueryParamsAndRetry(intent, queryParams, [preventPopups], [verify], [retries], [interval])</li> <li>.closePopups([timeout])</li> <li>.expectUnsupportedNavigationPopup(navigationTarget)</li> </ul> </li> <li>.navigationBar<ul> <li>.clickBack([timeout])</li> <li>.clickSapLogo([timeout])</li> <li>.clickUserIcon([timeout])</li> <li>.expectPageTitle(compareValue)</li> <li>.expectShellHeader([timeout])</li> </ul> </li> <li>.qunit<ul> <li>.executeTests(path)</li> </ul> </li> <li>.session<ul> <li>.login(username, [password], [verify], [timeout])</li> <li>.loginFiori(username, [password], [verify])</li> <li>.loginSapCloud(username, [password], [verify])</li> <li>.loginCustom(username, [password], usernameFieldSelector, passwordFieldSelector, logonButtonSelector, [verify])</li> <li>.loginCustomViaConfig(username, [password], [verify])</li> <li>.logout([verify])</li> <li>.switchUser(username, [password], [authenticator], [wait])</li> <li>.expectLogoutText()</li> </ul> </li> <li>.table<ul> <li>.sortColumnAscending(columnName, tableSelector)</li> <li>.sortColumnDescending(columnName, tableSelector)</li> <li>.clickSettingsButton(tableSelector)</li> <li>.getTotalNumberOfRows(tableSelectorOrId) \u21d2 <code>Number</code></li> <li>.getTotalNumberOfRowsByValues(tableSelectorOrId, values, [index]) \u21d2 <code>Number</code></li> <li>.getSelectorsForRowsByValues(tableSelectorOrId, values)</li> <li>.getSelectorForRowByIndex(tableSelectorOrId, index)</li> <li>.selectRowByIndex(tableSelectorOrId, index)</li> <li>.selectAllRows(tableSelectorOrId)</li> <li>.deselectRowByIndex(tableSelectorOrId)</li> <li>.deselectAllRows(tableSelectorOrId)</li> <li>.selectRowByValues(tableSelectorOrId, values, [index])</li> <li>.openItemByIndex(tableSelectorOrId, index)</li> <li>.openItemByValues(tableSelectorOrId, values, [index])</li> </ul> </li> <li>.userInteraction<ul> <li>.click(selector, [index], [timeout])</li> <li>.clickAndRetry(selector, [index], [timeout], [retries], [interval])</li> <li>.doubleClick(selector, [index], [timeout])</li> <li>.rightClick(selector, [index], [timeout])</li> <li>.clickTab(selector, [index], [timeout])</li> <li>.clickListItem(selector, [index], [timeout])</li> <li>.check(selector, [index], [timeout])</li> <li>.uncheck(selector, [index], [timeout])</li> <li>.fill(selector, value, [index], [timeout])</li> <li>.fillAndRetry(selector, value, [index], [timeout], [retries], [interval])</li> <li>.clear(selector, [index], [timeout])</li> <li>.clearAndRetry(selector, [index], [timeout], [retries], [interval])</li> <li>.clearAndFill(selector, value, [index], [timeout])</li> <li>.clearAndFillAndRetry(selector, value, [index], [timeout], [retries], [interval], [verify])</li> <li>.clearSmartFieldInput(selector, [index], [timeout])</li> <li>.clearAndFillSmartFieldInput(selector, value, [index], [timeout])</li> <li>.clearAndFillSmartFieldInputAndRetry(selector, value, [index], [timeout], [retries], [interval])</li> <li>.selectBox(selector, value, [index])</li> <li>.selectComboBox(selector, value, [index])</li> <li>.selectMultiComboBox(selector, values, [index])</li> <li>.clickSelectArrow(selector, [index])</li> <li>.clickSelectArrowAndRetry(selector, [index], [retries], [interval])</li> <li>.selectFromTab(selector, value, [index], [timeout])</li> <li>.mouseOverElement(selector, [index], [timeout])</li> <li>.scrollToElement(selector, [index], [alignment], [timeout])</li> <li>.selectAll([selector], [index], [timeout])</li> <li>.openF4Help(selector, [index], [timeout], useF4Key)</li> <li>.searchFor(selector, [index], [timeout], useEnter)</li> <li>.resetSearch(selector, [index], [timeout])</li> </ul> </li> </ul> </li> </ul> <p></p>"},{"location":"doc/#ui5assertion","title":"ui5.assertion","text":"<p>Kind: static class of <code>ui5</code> </p> <ul> <li>.assertion<ul> <li>.expectAttributeToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectAttributeToContain(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectTextToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectValueToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectValueToBeDefined(selector, [index], [timeout])</li> <li>.expectToBeNotEnabled(selector, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectToBeEnabled(selector, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectValidationError(selector, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectValidationSuccess(selector, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectCssPropertyValueToBe(selector, cssProperty, compareValue, [index], [timeout])</li> <li>.expectBindingPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectBindingContextPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectToBeVisible(selector, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectToBeVisibleInViewport(selector, [index], [timeout], [loadPropertyTimeout])</li> <li>.expectToBeNotVisible(selector, [index], [timeout])</li> <li>.expectMessageToastTextToBe(text, [timeout])</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#assertionexpectattributetobeselector-attribute-comparevalue-index-timeout-loadpropertytimeout","title":"assertion.expectAttributeToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])","text":"<p>Expects the passed elements attribute to be the compare value.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. attribute <code>String</code> The attribute to be compared. compareValue <code>String</code> | <code>Boolean</code> | <code>Number</code> | <code>Object</code> The compare value. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [loadPropertyTimeout] <code>Number</code> <code>10000</code> The timeout to wait for a specific property to have the given compare value. <p>Example <pre><code>await ui5.assertion.expectAttributeToBe(selector, \"text\", \"Hello\");\n</code></pre> </p>"},{"location":"doc/#assertionexpectattributetocontainselector-attribute-comparevalue-index-timeout-loadpropertytimeout","title":"assertion.expectAttributeToContain(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])","text":"<p>Expects the passed elements attribute to contain the compare value.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. attribute <code>String</code> The attribute to be compared. compareValue <code>String</code> The compare value. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [loadPropertyTimeout] <code>Number</code> <code>10000</code> The timeout to wait for a specific property to have the given compare value. <p>Example <pre><code>await ui5.assertion.expectAttributeToContain(selector, \"text\", \"abc\");\n</code></pre> </p>"},{"location":"doc/#assertionexpecttexttobeselector-comparevalue-index-timeout-loadpropertytimeout","title":"assertion.expectTextToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout])","text":"<p>Expects the passed elements text attribute to be the compare value.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. compareValue <code>String</code> The compare value. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [loadPropertyTimeout] <code>Number</code> <code>10000</code> The timeout to wait for a specific property to have the given compare value. <p>Example <pre><code>await ui5.assertion.expectTextToBe(selector, \"Hello\");\n</code></pre> </p>"},{"location":"doc/#assertionexpectvaluetobeselector-comparevalue-index-timeout-loadpropertytimeout","title":"assertion.expectValueToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout])","text":"<p>Expects the passed elements value attribute to be the compare value.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. compareValue <code>String</code> | <code>Number</code> The compare value. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [loadPropertyTimeout] <code>Number</code> <code>10000</code> The timeout to wait for a specific property to have the given compare value. <p>Example <pre><code>await ui5.assertion.expectValueToBe(selector, \"123\");\n</code></pre> </p>"},{"location":"doc/#assertionexpectvaluetobedefinedselector-index-timeout","title":"assertion.expectValueToBeDefined(selector, [index], [timeout])","text":"<p>Expects the passed elements value to be defined.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.assertion.expectValueToBeDefined(selector);\n</code></pre> </p>"},{"location":"doc/#assertionexpecttobenotenabledselector-index-timeout-loadpropertytimeout","title":"assertion.expectToBeNotEnabled(selector, [index], [timeout], [loadPropertyTimeout])","text":"<p>Expects that the element is not enabled to the user.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [loadPropertyTimeout] <code>Number</code> <code>10000</code> The timeout to wait for a specific property to have the given compare value. <p>Example <pre><code>await ui5.assertion.expectToBeNotEnabled(selector);\n</code></pre> </p>"},{"location":"doc/#assertionexpecttobeenabledselector-index-timeout-loadpropertytimeout","title":"assertion.expectToBeEnabled(selector, [index], [timeout], [loadPropertyTimeout])","text":"<p>Expects that the element is enabled to the user.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [loadPropertyTimeout] <code>Number</code> <code>10000</code> The timeout to wait for a specific property to have the given compare value. <p>Example <pre><code>await ui5.assertion.expectToBeEnabled(selector);\n</code></pre> </p>"},{"location":"doc/#assertionexpectvalidationerrorselector-index-timeout-loadpropertytimeout","title":"assertion.expectValidationError(selector, [index], [timeout], [loadPropertyTimeout])","text":"<p>Expects the \"valueState\" of the element to be \"Error\".</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [loadPropertyTimeout] <code>Number</code> <code>10000</code> The timeout to wait for a specific property to have the given compare value. <p>Example <pre><code>await ui5.assertion.expectValidationError(selector);\n</code></pre> </p>"},{"location":"doc/#assertionexpectvalidationsuccessselector-index-timeout-loadpropertytimeout","title":"assertion.expectValidationSuccess(selector, [index], [timeout], [loadPropertyTimeout])","text":"<p>Expects the valueState of the element to be \"None\".</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [loadPropertyTimeout] <code>Number</code> <code>10000</code> The timeout to wait for a specific property to have the given compare value. <p>Example <pre><code>await ui5.assertion.expectValidationSuccess(selector);\n</code></pre> </p>"},{"location":"doc/#assertionexpectcsspropertyvaluetobeselector-cssproperty-comparevalue-index-timeout","title":"assertion.expectCssPropertyValueToBe(selector, cssProperty, compareValue, [index], [timeout])","text":"<p>Expects the CSS property value of the passed element to be the compare value.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. cssProperty <code>String</code> The CSS property of the element to compare with. compareValue <code>String</code> The compare value. [index] <code>Number</code> <code>0</code> The index of the selector (in case there is more than one element visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.assertion.expectCssPropertyValueToBe(selector, \"color\", \"rgb(255, 0, 0)\");\n</code></pre> </p>"},{"location":"doc/#assertionexpectbindingpathtobeselector-attribute-comparevalue-index-timeout-loadpropertytimeout","title":"assertion.expectBindingPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])","text":"<p>Expects the passed elements attribute binding-path to contain the compare value</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. attribute <code>String</code> The attribute to be compared. compareValue <code>String</code> | <code>Array.&lt;String&gt;</code> The compare value(s). [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [loadPropertyTimeout] <code>Number</code> <code>10000</code> The timeout to wait for a specific property to have the given compare value. <p>Example <pre><code>await ui5.assertion.expectBindingPathToBe(selector, \"text\", \"Hello\");\n</code></pre> </p>"},{"location":"doc/#assertionexpectbindingcontextpathtobeselector-attribute-comparevalue-index-timeout-loadpropertytimeout","title":"assertion.expectBindingContextPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])","text":"<p>Expects the passed elements binding-context-path to be the compare value.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. attribute <code>String</code> The attribute to be compared. compareValue <code>String</code> The compare value. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [loadPropertyTimeout] <code>Number</code> <code>10000</code> The timeout to wait for a specific property to have the given compare value. <p>Example <pre><code>await ui5.assertion.expectBindingContextPathToBe(selector, \"text\", \"Hello\");\n</code></pre> </p>"},{"location":"doc/#assertionexpecttobevisibleselector-index-timeout-loadpropertytimeout","title":"assertion.expectToBeVisible(selector, [index], [timeout], [loadPropertyTimeout])","text":"<p>Expects that the element is visible to the user.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [loadPropertyTimeout] <code>Number</code> <code>10000</code> The timeout to wait for a specific property to have the given compare value. <p>Example <pre><code>await ui5.assertion.expectToBeVisible(selector);\n</code></pre> </p>"},{"location":"doc/#assertionexpecttobevisibleinviewportselector-index-timeout-loadpropertytimeout","title":"assertion.expectToBeVisibleInViewport(selector, [index], [timeout], [loadPropertyTimeout])","text":"<p>Expects that the element is visible in the viewport.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [loadPropertyTimeout] <code>Number</code> <code>10000</code> The timeout to wait for a specific property to have the given compare value. <p>Example <pre><code>await ui5.assertion.expectToBeVisibleInViewport(selector);\n</code></pre> </p>"},{"location":"doc/#assertionexpecttobenotvisibleselector-index-timeout","title":"assertion.expectToBeNotVisible(selector, [index], [timeout])","text":"<p>Expects that the element is not visible to the user.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). Recommendation is to lower the timeout since the element is not expected to show up. <p>Example <pre><code>await ui5.assertion.expectToBeNotVisible(selector, 0, 5000);\n</code></pre> </p>"},{"location":"doc/#assertionexpectmessagetoasttexttobetext-timeout","title":"assertion.expectMessageToastTextToBe(text, [timeout])","text":"<p>Expects the message toast with the passed text.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description text <code>String</code> The expected text. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.assertion.expectMessageToastTextToBe(text);\n</code></pre> </p>"},{"location":"doc/#ui5confirmationdialog","title":"ui5.confirmationDialog","text":"<p>Kind: static class of <code>ui5</code> </p> <ul> <li>.confirmationDialog<ul> <li>.clickButton(text, [timeout])</li> <li>.clickOk([timeout])</li> <li>.clickCancel([timeout])</li> <li>.clickYes([timeout])</li> <li>.clickNo([timeout])</li> <li>.clickCreate([timeout])</li> <li>.clickDelete([timeout])</li> <li>.clickRevokeApproval([timeout])</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#confirmationdialogclickbuttontext-timeout","title":"confirmationDialog.clickButton(text, [timeout])","text":"<p>Clicks the button with the given text at the confirmation dialog.</p> <p>Kind: static method of <code>confirmationDialog</code> </p> Param Type Default Description text <code>String</code> The text of the button. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.confirmationDialog.clickButton(\"Ok\");\n</code></pre> </p>"},{"location":"doc/#confirmationdialogclickoktimeout","title":"confirmationDialog.clickOk([timeout])","text":"<p>Clicks the \"OK\" button at the confirmation dialog.</p> <p>Kind: static method of <code>confirmationDialog</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.confirmationDialog.clickOk();\n</code></pre> </p>"},{"location":"doc/#confirmationdialogclickcanceltimeout","title":"confirmationDialog.clickCancel([timeout])","text":"<p>Clicks the \"Cancel\" button at the confirmation dialog.</p> <p>Kind: static method of <code>confirmationDialog</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.confirmationDialog.clickCancel();\n</code></pre> </p>"},{"location":"doc/#confirmationdialogclickyestimeout","title":"confirmationDialog.clickYes([timeout])","text":"<p>Clicks the \"Yes\" button at the confirmation dialog.</p> <p>Kind: static method of <code>confirmationDialog</code> </p> Param Type Description [timeout] <code>Number</code> The timeout to wait (default value: 30 sec). <p>Example <pre><code>await ui5.confirmationDialog.clickYes();\n</code></pre> </p>"},{"location":"doc/#confirmationdialogclicknotimeout","title":"confirmationDialog.clickNo([timeout])","text":"<p>Clicks the \"Yes\" button at the confirmation dialog.</p> <p>Kind: static method of <code>confirmationDialog</code> </p> Param Type Description [timeout] <code>Number</code> The timeout to wait (default value: 30 sec). <p>Example <pre><code>await ui5.confirmationDialog.clickNo();\n</code></pre> </p>"},{"location":"doc/#confirmationdialogclickcreatetimeout","title":"confirmationDialog.clickCreate([timeout])","text":"<p>Clicks the create button in the confirmation dialog</p> <p>Kind: static method of <code>confirmationDialog</code> </p> Param Type Description [timeout] <code>Number</code> The timeout to wait (default value: 30 sec). <p>Example <pre><code>await ui5.confirmationDialog.clickCreate();\n</code></pre> </p>"},{"location":"doc/#confirmationdialogclickdeletetimeout","title":"confirmationDialog.clickDelete([timeout])","text":"<p>Clicks the \"Delete\" button at the confirmation dialog.</p> <p>Kind: static method of <code>confirmationDialog</code> </p> Param Type Description [timeout] <code>Number</code> The timeout to wait (default value: 30 sec). <p>Example <pre><code>await ui5.confirmationDialog.clickDelete();\n</code></pre> </p>"},{"location":"doc/#confirmationdialogclickrevokeapprovaltimeout","title":"confirmationDialog.clickRevokeApproval([timeout])","text":"<p>Clicks the \"Revoke Approval\" button at the confirmation dialog.</p> <p>Kind: static method of <code>confirmationDialog</code> </p> Param Type Description [timeout] <code>Number</code> The timeout to wait (default value: 30 sec). <p>Example <pre><code>await ui5.confirmationDialog.clickRevokeApproval();\n</code></pre> </p>"},{"location":"doc/#ui5control","title":"ui5.control","text":"<p>Kind: static class of <code>ui5</code> </p> <ul> <li>.control<ul> <li>.execute(callbackFunction, selectorOrElement, args)</li> <li>.focus(selector, [index], [timeout])</li> <li>.getProperty(selectorOrElement, propertyName)</li> <li>.getAggregationProperty(selectorOrElement, propertyName)</li> <li>.getAssociationProperty(selectorOrElement, propertyName)</li> <li>.getBindingContextPathProperty(selectorOrElement)</li> <li>.getPropertyBinding(selectorOrElement, propertyName) \u21d2 <code>Array</code></li> </ul> </li> </ul> <p></p>"},{"location":"doc/#controlexecutecallbackfunction-selectororelement-args","title":"control.execute(callbackFunction, selectorOrElement, args)","text":"<p>Executes a native UI5 action as callback function in the browser on the given UI5 control.</p> <p>Kind: static method of <code>control</code> </p> Param Type Description callbackFunction <code>function</code> The client script function to be used with the control instance. Caution: The first and last parameter is reserved for the mockserver instance and the promise resolve function - done. selectorOrElement <code>Element</code> | <code>Ui5Selector</code> | <code>Ui5SelectorWithOptions</code> The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed). args <code>Object</code> An object containing the arguments to pass to the callback function. <p>Example <pre><code>const selector = {\"elementProperties\":{\"metadata\":\"sap.m.StandardListItem\", \"id\": \"*categoryList-7\"}};\nconst args = {\"property\": \"text\"};\nconst title = await ui5.control.execute(function (control, args, done) {\n  done(control.getProperty(args.property));\n}, selector, args);\n</code></pre> </p>"},{"location":"doc/#controlfocusselector-index-timeout","title":"control.focus(selector, [index], [timeout])","text":"<p>Focuses on the element with the given selector to get it into view. If focus is not possible scrollToElement is used.</p> <p>Kind: static method of <code>control</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.control.focus(selector);\n</code></pre> Example <pre><code>await ui5.control.focus(selector, 0, 5000);\n</code></pre> </p>"},{"location":"doc/#controlgetpropertyselectororelement-propertyname","title":"control.getProperty(selectorOrElement, propertyName)","text":"<p>Gets the UI5 control property of the given element.</p> <p>Kind: static method of <code>control</code> </p> Param Type Description selectorOrElement <code>Element</code> | <code>Ui5Selector</code> | <code>Ui5SelectorWithOptions</code> The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed) propertyName <code>String</code> The property name of the control to retrieve the value from. <p>Example <pre><code>const selector = { \"elementProperties\":{\"metadata\":\"sap.m.StandardListItem\",\"mProperties\":{ \"title\":[{\"path\":\"CategoryName\"}] }};\nconst elem = await ui5.element.getDisplayed(selector);\nconst propertyName = \"title\";\nconst val = await ui5.control.getProperty(elem, propertyName);\n</code></pre> </p>"},{"location":"doc/#controlgetaggregationpropertyselectororelement-propertyname","title":"control.getAggregationProperty(selectorOrElement, propertyName)","text":"<p>Gets the UI5 control aggregation property  of the given element.</p> <p>Kind: static method of <code>control</code> </p> Param Type Description selectorOrElement <code>Element</code> | <code>Ui5Selector</code> | <code>Ui5SelectorWithOptions</code> The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed) propertyName <code>String</code> The aggregation property name of the control to retrieve the value from. <p>Example <pre><code>const selector = { \"elementProperties\":{\"metadata\":\"sap.m.StandardListItem\",\"mProperties\":{ \"items\":[{\"path\":\"/Categories\"}] }};\nconst elem = await ui5.element.getDisplayed(selector);\nconst propertyName = \"tooltip\";\nconst val = await ui5.control.getAggregationProperty(elem, propertyName);\n</code></pre> </p>"},{"location":"doc/#controlgetassociationpropertyselectororelement-propertyname","title":"control.getAssociationProperty(selectorOrElement, propertyName)","text":"<p>Get UI control property</p> <p>Kind: static method of <code>control</code> </p> Param Type Description selectorOrElement <code>Element</code> | <code>Ui5Selector</code> | <code>Ui5SelectorWithOptions</code> The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed) propertyName <code>String</code> The association property name of the control to retrieve the value from. <p>Example <pre><code>const selector = { \"elementProperties\":{\"metadata\":\"sap.m.MultiComboBox\",\"mProperties\":{}};\nconst elem = await ui5.element.getDisplayed(selector);\nconst propertyName = \"selectedItems\";\nconst propertyValue = await ui5.control.getAssociationProperty(elem, propertyName);\n</code></pre> </p>"},{"location":"doc/#controlgetbindingcontextpathpropertyselectororelement","title":"control.getBindingContextPathProperty(selectorOrElement)","text":"<p>Get UI control binding context path</p> <p>Kind: static method of <code>control</code> </p> Param Type Description selectorOrElement <code>Element</code> | <code>Ui5Selector</code> | <code>Ui5SelectorWithOptions</code> The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed) <p>Example <pre><code>const selector = { \"elementProperties\":{\"metadata\":\"sap.m.StandardListItem\",\"mProperties\":{\"title\":[{\"path\":\"CategoryName\"}] }};\nconst elem = await ui5.element.getDisplayed(selector);\nconst context = await ui5.control.getBindingContextPathProperty(elem);\n</code></pre> </p>"},{"location":"doc/#controlgetpropertybindingselectororelement-propertyname-array","title":"control.getPropertyBinding(selectorOrElement, propertyName) \u21d2 <code>Array</code>","text":"<p>Get UI control property</p> <p>Kind: static method of <code>control</code> Returns: <code>Array</code> - Array of bindings for the specific property  </p> Param Type Description selectorOrElement <code>Element</code> | <code>Ui5Selector</code> | <code>Ui5SelectorWithOptions</code> The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed) propertyName <code>String</code> The property name to retrieve from the control binding <p>Example <pre><code>const selector = { \"elementProperties\":{\"metadata\":\"sap.m.StandardListItem\",\"mProperties\":{ \"title\":[{\"path\":\"CategoryName\"}] }};\nconst elem = await ui5.element.getDisplayed(selector);\nconst propertyName = \"title\";\nconst binding = await ui5.control.getPropertyBinding(elem, propertyName);\n</code></pre> </p>"},{"location":"doc/#ui5date","title":"ui5.date","text":"<p>Kind: static class of <code>ui5</code> </p> <ul> <li>.date<ul> <li>.pick(selector, date, [index])</li> <li>.pickRange(selector, range, [index])</li> <li>.fillRange(selector, range, [index])</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#datepickselector-date-index","title":"date.pick(selector, date, [index])","text":"<p>Picks the passed date using the \"DatePicker\" with the given selector.</p> <p>Kind: static method of <code>date</code> </p> Param Type Default Description selector <code>Selector</code> The selector describing the element. date <code>Date</code> The date object. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). <p>Example <pre><code>const today = await common.date.calculate(\"today\");\nawait ui5.date.pick(selector, today);\n</code></pre> </p>"},{"location":"doc/#datepickrangeselector-range-index","title":"date.pickRange(selector, range, [index])","text":"<p>Picks the passed date range using the \"DatePicker\" with the given selector. Note that this will only work within the current month!</p> <p>Kind: static method of <code>date</code> </p> Param Type Default Description selector <code>Selector</code> The selector describing the element. range <code>Array.&lt;Object&gt;</code> The array of date objects containing start- and end date. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). <p>Example <pre><code>const start = await common.date.calculate(\"2020, 9, 20\");\nconst end = await common.date.calculate(\"2021, 1, 3\");\nconst range = [start, end];\nawait ui5.date.pickRange(selector, range);\n</code></pre> </p>"},{"location":"doc/#datefillrangeselector-range-index","title":"date.fillRange(selector, range, [index])","text":"<p>Enters the passed date range to the date input with the given selector by providing the start- and end date.</p> <p>Kind: static method of <code>date</code> </p> Param Type Default Description selector <code>Selector</code> The selector describing the element. range <code>Array.&lt;Object&gt;</code> The array of date objects containing start- and end date. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). <p>Example <pre><code>const start = await common.date.calculate(\"2020, 9, 20\", \"dd.mm.yyyy\");\nconst end = await common.date.calculate(\"2021, 1, 3\", \"dd.mm.yyyy\");\nconst range = [start, end];\nawait ui5.date.fillRange(selector, range);\n</code></pre> </p>"},{"location":"doc/#ui5element","title":"ui5.element","text":"<p>Kind: static class of <code>ui5</code> </p> <ul> <li>.element<ul> <li>.waitForAll(selector, [timeout])</li> <li>.getAllDisplayed(selector, [timeout]) \u21d2 <code>Array.&lt;Object&gt;</code></li> <li>.getDisplayed(selector, [index], [timeout]) \u21d2 <code>Object</code></li> <li>.getByText(selector, value, [index], [timeout]) \u21d2 <code>Object</code></li> <li>.getByChild(elementSelector, childSelector, [index], [timeout]) \u21d2 <code>Object</code></li> <li>.getByParent(elementSelector, parentSelector, [index], [timeout]) \u21d2 <code>Object</code></li> <li>.getId(selector, [index], [timeout]) \u21d2 <code>String</code></li> <li>.getPropertyValue(selector, property, [index], [timeout]) \u21d2 <code>any</code></li> <li>.getValue(selector, [index], [timeout]) \u21d2 <code>String</code></li> <li>.getCssPropertyValue(selector, cssProperty, [index], [timeout]) \u21d2 <code>String</code></li> <li>.getBindingValue(selector, bindingContext, [index], [timeout]) \u21d2 <code>String</code></li> <li>.isVisible(selector, [index], [timeout]) \u21d2 <code>Boolean</code></li> <li>.highlight(selector, [duration], [color])</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#elementwaitforallselector-timeout","title":"element.waitForAll(selector, [timeout])","text":"<p>Waits for all elements matching the given selector.</p> <p>Kind: static method of <code>element</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the elements. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.element.waitForAll(selector);\n</code></pre> </p>"},{"location":"doc/#elementgetalldisplayedselector-timeout-arrayobject","title":"element.getAllDisplayed(selector, [timeout]) \u21d2 <code>Array.&lt;Object&gt;</code>","text":"<p>Returns the visible elements with the given selector.</p> <p>Kind: static method of <code>element</code> Returns: <code>Array.&lt;Object&gt;</code> - - The found elements.  </p> Param Type Default Description selector <code>Object</code> The selector describing the elements. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const elem = await ui5.element.getAllDisplayed(selector);\n</code></pre> </p>"},{"location":"doc/#elementgetdisplayedselector-index-timeout-object","title":"element.getDisplayed(selector, [index], [timeout]) \u21d2 <code>Object</code>","text":"<p>Returns the visible element.</p> <p>Kind: static method of <code>element</code> Returns: <code>Object</code> - The found element.  </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const elem = await ui5.element.getDisplayed(selector);\n</code></pre> </p>"},{"location":"doc/#elementgetbytextselector-value-index-timeout-object","title":"element.getByText(selector, value, [index], [timeout]) \u21d2 <code>Object</code>","text":"<p>Returns the element with the given selector and text value.</p> <p>Kind: static method of <code>element</code> Returns: <code>Object</code> - The found element.  </p> Param Type Default Description selector <code>Object</code> The selector describing the element. value <code>String</code> The text value of the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const elem = await ui5.element.getByText(selector, \"Home\");\n</code></pre> </p>"},{"location":"doc/#elementgetbychildelementselector-childselector-index-timeout-object","title":"element.getByChild(elementSelector, childSelector, [index], [timeout]) \u21d2 <code>Object</code>","text":"<p>Gets an element by its selector and child selector. Can be used as unique combination between element and child properties when multiple elements have the same properties. Note: For nested selectors, all properties except of the \"elementProperties\" are being ignored.</p> <p>Kind: static method of <code>element</code> Returns: <code>Object</code> - The found element.  </p> Param Type Default Description elementSelector <code>String</code> The selector describing the requested element. childSelector <code>String</code> The selector describing a child element of the requested element. [index] <code>Number</code> <code>0</code> The index of the element (in case the combination applies to more than one element). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const elementSelector = {\n \"elementProperties\": {...}\n};\nconst childSelector = {\n \"elementProperties\": {...}\n};\nconst elem = await ui5.element.getByChild(elementSelector, childSelector);\n</code></pre> </p>"},{"location":"doc/#elementgetbyparentelementselector-parentselector-index-timeout-object","title":"element.getByParent(elementSelector, parentSelector, [index], [timeout]) \u21d2 <code>Object</code>","text":"<p>Gets an element by its selector and parent selector. Can be used as unique combination between element and parent properties when multiple elements have the same properties. Note: For nested selectors, all properties except of the \"elementProperties\" are being ignored.</p> <p>Kind: static method of <code>element</code> Returns: <code>Object</code> - The found element.  </p> Param Type Default Description elementSelector <code>String</code> The selector describing the requested element. parentSelector <code>String</code> The selector describing the parent element of the requested element. [index] <code>Number</code> <code>0</code> The index of the element (in case the combination applies to more than one element). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const elementSelector = {\n \"elementProperties\": {...}\n};\nconst parentSelector = {\n \"elementProperties\": {...}\n};\nconst elem = await ui5.element.getByParent(elementSelector, parentSelector);\n</code></pre> </p>"},{"location":"doc/#elementgetidselector-index-timeout-string","title":"element.getId(selector, [index], [timeout]) \u21d2 <code>String</code>","text":"<p>Returns the id of the element with the given selector.</p> <p>Kind: static method of <code>element</code> Returns: <code>String</code> - The id of the element.  </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const elemId = await ui5.element.getId(selector);\n</code></pre> </p>"},{"location":"doc/#elementgetpropertyvalueselector-property-index-timeout-any","title":"element.getPropertyValue(selector, property, [index], [timeout]) \u21d2 <code>any</code>","text":"<p>Returns the UI5 property value of the passed element.</p> <p>Kind: static method of <code>element</code> Returns: <code>any</code> - The property value of the element.  </p> Param Type Default Description selector <code>Object</code> The selector describing the element. property <code>String</code> The property of the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const elemValue = await ui5.element.getPropertyValue(selector, \"text\");\n</code></pre> </p>"},{"location":"doc/#elementgetvalueselector-index-timeout-string","title":"element.getValue(selector, [index], [timeout]) \u21d2 <code>String</code>","text":"<p>Returns the inner value of the passed element.</p> <p>Kind: static method of <code>element</code> Returns: <code>String</code> - The value of the element.  </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const elemValue = await ui5.element.getValue(selector);\n</code></pre> </p>"},{"location":"doc/#elementgetcsspropertyvalueselector-cssproperty-index-timeout-string","title":"element.getCssPropertyValue(selector, cssProperty, [index], [timeout]) \u21d2 <code>String</code>","text":"<p>Returns the value of the passed CSS property of the element.</p> <p>Kind: static method of <code>element</code> Returns: <code>String</code> - The value of the CSS property.  </p> Param Type Default Description selector <code>Object</code> The selector describing the element. cssProperty <code>String</code> The CSS property of the element to get value. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const cssPropertyValue = await ui5.element.getCssPropertyValue(selector, \"visibility\");\n</code></pre> </p>"},{"location":"doc/#elementgetbindingvalueselector-bindingcontext-index-timeout-string","title":"element.getBindingValue(selector, bindingContext, [index], [timeout]) \u21d2 <code>String</code>","text":"<p>Returns the value of the given binding property for a specific element.</p> <p>Kind: static method of <code>element</code> Returns: <code>String</code> - The binding property value.  </p> Param Type Default Description selector <code>Object</code> The selector describing the element. bindingContext <code>String</code> The binding property to retrieve. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const elemBindingValue = await ui5.element.getBindingValue(selector, \"InvoiceGrossAmount\");\n</code></pre> </p>"},{"location":"doc/#elementisvisibleselector-index-timeout-boolean","title":"element.isVisible(selector, [index], [timeout]) \u21d2 <code>Boolean</code>","text":"<p>Determines if the element is visible.</p> <p>Kind: static method of <code>element</code> Returns: <code>Boolean</code> - The bool value 'true' or 'false' if the element is visible or not.  </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const isVisible = await ui5.element.isVisible(selector);\n</code></pre> </p>"},{"location":"doc/#elementhighlightselector-duration-color","title":"element.highlight(selector, [duration], [color])","text":"<p>Highlights the element with the given selector.</p> <p>Kind: static method of <code>element</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [duration] <code>Number</code> <code>2000</code> The duration of the highlighting (ms). [color] <code>String</code> <code>\"red\"</code> The color of the highlighting (CSS color). <p>Example <pre><code>await ui5.element.highlight(selector, 3000, \"green\");\n</code></pre> </p>"},{"location":"doc/#ui5errordialog","title":"ui5.errorDialog","text":"<p>Kind: static class of <code>ui5</code> </p> <ul> <li>.errorDialog<ul> <li>.expectToBeVisible()</li> <li>.clickClose()</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#errordialogexpecttobevisible","title":"errorDialog.expectToBeVisible()","text":"<p>Expects that the error dialog is visible on the page.</p> <p>Kind: static method of <code>errorDialog</code> Example <pre><code>await ui5.errorDialog.expectToBeVisible();\n</code></pre> </p>"},{"location":"doc/#errordialogclickclose","title":"errorDialog.clickClose()","text":"<p>Clicks the 'Close' button at the error dialog.</p> <p>Kind: static method of <code>errorDialog</code> Example <pre><code>await ui5.errorDialog.clickClose();\n</code></pre> </p>"},{"location":"doc/#ui5footerbar","title":"ui5.footerBar","text":"<p>Kind: static class of <code>ui5</code> </p> <ul> <li>.footerBar<ul> <li>.clickButton(text, [timeout])</li> <li>.clickApply([timeout])</li> <li>.clickSave([timeout])</li> <li>.clickCreate([timeout])</li> <li>.clickCancel([timeout])</li> <li>.clickCheck([timeout])</li> <li>.clickOrder([timeout])</li> <li>.clickPost([timeout])</li> <li>.clickAdd([timeout])</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#footerbarclickbuttontext-timeout","title":"footerBar.clickButton(text, [timeout])","text":"<p>Clicks the button with the given text at the footer bar.</p> <p>Kind: static method of <code>footerBar</code> </p> Param Type Default Description text <code>String</code> The text of the button. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.footerBar.clickButton(\"Ok\");\n</code></pre> </p>"},{"location":"doc/#footerbarclickapplytimeout","title":"footerBar.clickApply([timeout])","text":"<p>Clicks the 'Apply' button at the footer toolbar.</p> <p>Kind: static method of <code>footerBar</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.footerBar.clickApply();\n</code></pre> </p>"},{"location":"doc/#footerbarclicksavetimeout","title":"footerBar.clickSave([timeout])","text":"<p>Clicks the 'Save' button at the footer toolbar.</p> <p>Kind: static method of <code>footerBar</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.footerBar.clickSave();\n</code></pre> </p>"},{"location":"doc/#footerbarclickcreatetimeout","title":"footerBar.clickCreate([timeout])","text":"<p>Clicks the 'Create' button at the footer toolbar.</p> <p>Kind: static method of <code>footerBar</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.footerBar.clickCreate();\n</code></pre> </p>"},{"location":"doc/#footerbarclickcanceltimeout","title":"footerBar.clickCancel([timeout])","text":"<p>Clicks the 'Cancel' button at the footer toolbar.</p> <p>Kind: static method of <code>footerBar</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.footerBar.clickCancel();\n</code></pre> </p>"},{"location":"doc/#footerbarclickchecktimeout","title":"footerBar.clickCheck([timeout])","text":"<p>Clicks the 'Check' button at the footer toolbar.</p> <p>Kind: static method of <code>footerBar</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.footerBar.clickCheck();\n</code></pre> </p>"},{"location":"doc/#footerbarclickordertimeout","title":"footerBar.clickOrder([timeout])","text":"<p>Clicks the 'Order' button at the footer toolbar.</p> <p>Kind: static method of <code>footerBar</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.footerBar.clickOrder();\n</code></pre> </p>"},{"location":"doc/#footerbarclickposttimeout","title":"footerBar.clickPost([timeout])","text":"<p>Clicks the 'Post' button at the footer toolbar.</p> <p>Kind: static method of <code>footerBar</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.footerBar.clickPost();\n</code></pre> </p>"},{"location":"doc/#footerbarclickaddtimeout","title":"footerBar.clickAdd([timeout])","text":"<p>Clicks the 'Add' button at the footer toolbar.</p> <p>Kind: static method of <code>footerBar</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.footerBar.clickAdd();\n</code></pre> </p>"},{"location":"doc/#ui5mockserver","title":"ui5.mockserver","text":"<p>Kind: static class of <code>ui5</code> </p> <ul> <li>.mockserver<ul> <li>.waitForUi5ApplicationLoad()</li> <li>.interactWithMockServer(mockServerPath, fnCallback, oParams)</li> <li>.attachFunctionBefore(method, mockServerPath, fnBeforeCallback, oParams)</li> <li>.attachFunctionAfter(method, mockServerPath, fnAfterCallback, oParams)</li> <li>.addNewRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation)</li> <li>.removeRequest(method, mockServerPath, urlPathRegex)</li> <li>.addOrOverrideRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation)</li> <li>.startMockServer(mockServerPath)</li> <li>.initMockServer(mockServerPath, mockServerOptions)</li> <li>.initApplication(mockServerPath)</li> <li>.stopMockServer(mockServerPath)</li> <li>.loadMockDataFile(filePath, isText) \u21d2 <code>String</code></li> <li>.getEntitySetData(mockServerPath, entitySetName) \u21d2 <code>Array</code></li> <li>.setEntitySetData(mockServerPath, entitySetName, entries)</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#mockserverwaitforui5applicationload","title":"mockserver.waitForUi5ApplicationLoad()","text":"<p>Waits for the UI5 framework to load and makes sure XHR request finished und busy indicators are not visible anymore.</p> <p>Kind: static method of <code>mockserver</code> Example <pre><code>await ui5.mockserver.waitForUi5ApplicationLoad(100);\n</code></pre> </p>"},{"location":"doc/#mockserverinteractwithmockservermockserverpath-fncallback-oparams","title":"mockserver.interactWithMockServer(mockServerPath, fnCallback, oParams)","text":"<p>Execute client script function to enable interaction with mockserver instance [you can write code in ui5 app context]</p> <p>Kind: static method of <code>mockserver</code> </p> Param Type Description mockServerPath <code>String</code> The full path to your mockserver instance fnCallback <code>String</code> | <code>Object</code> The client script function that you can use to interact with your mockserver instance. [Caution] The first and last parameter is reserved (1st param is the mockserver instance and last parameter the promise resolve function - done) oParams <code>String</code> Additional parameters you would like to inject in your client script function <p>Example <pre><code>await ui5.mockserver.interactWithMockServer(\"path/to/project/localService/main/mockserver\", fnCallback, oParams);\n</code></pre> </p>"},{"location":"doc/#mockserverattachfunctionbeforemethod-mockserverpath-fnbeforecallback-oparams","title":"mockserver.attachFunctionBefore(method, mockServerPath, fnBeforeCallback, oParams)","text":"<p>Attaches a callback function in mockserver attachBefore event to be executed</p> <p>Kind: static method of <code>mockserver</code> </p> Param Type Description method <code>String</code> The attachAfter http method [GET or POST]. mockServerPath <code>String</code> The full path to your mockserver file [make sure you implemented getMockServer method so the mockserver instance can be consumed]. fnBeforeCallback <code>String</code> | <code>Object</code> The callback function to be used in the native attachBefore method as described (https://sapui5.hana.ondemand.com/#/api/sap.ui.core.ui5.mockserver%23methods/Summary) oParams <code>Object</code> Additional parameters you would like to inject in your client script function <p>Example <pre><code>await ui5.mockserver.attachFunctionBefore(\"GET\", \"path/to/project/localService/main/mockserver\", fnBeforeCallback, oParams);\n</code></pre> </p>"},{"location":"doc/#mockserverattachfunctionaftermethod-mockserverpath-fnaftercallback-oparams","title":"mockserver.attachFunctionAfter(method, mockServerPath, fnAfterCallback, oParams)","text":"<p>Attaches a callback function in mockserver attachAfter event to be executed</p> <p>Kind: static method of <code>mockserver</code> </p> Param Type Description method <code>String</code> The attachAfter http method [GET or POST]. mockServerPath <code>String</code> The full path to your mockserver file [make sure you implemented getMockServer method so the mockserver instance can be consumed]. fnAfterCallback <code>String</code> | <code>Object</code> The callback function to be used in the native attachAfter method as described (https://sapui5.hana.ondemand.com/#/api/sap.ui.core.ui5.mockserver%23methods/Summary) oParams <code>Object</code> Additional parameters you would like to inject in your client script function <p>Example <pre><code>await ui5.mockserver.attachFunctionAfter(\"GET\", \"path/to/project/localService/main/mockserver\",  fnAfterCallback);\n</code></pre> </p>"},{"location":"doc/#mockserveraddnewrequestmethod-mockserverpath-urlpathregex-responsejsonpath-returncode-istext-responsemessages-responselocation","title":"mockserver.addNewRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation)","text":"<p>Adds new mock request</p> <p>Kind: static method of <code>mockserver</code> </p> Param Type Description method <code>String</code> The http method [GET,POST..]. mockServerPath <code>String</code> The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. urlPathRegex <code>String</code> The url path regex to filter the requests responseJsonPath <code>String</code> The json object or the path to your json file to be used as response [use relative path from the html page started]. returnCode <code>Integer</code> The http response code to simulate for this mock request. isText <code>Boolean</code> If true then content type is text/plain otherwise application/json. responseMessages <code>String</code> Mocks the gw sap-message response messages [Don't forget to stringify your json before: JSON.stringify(msg)] responseLocation <code>String</code> Mocks the location response messages header <p>Example <pre><code>await ui5.mockserver.addNewRequest(\"GET\",\"path/to/project/localService/main/mockserver\", \"*.Headers.*\", \"path/to/project/localService/main/mockdata/test.json\", 200, true, JSON.stringify(msg));\n</code></pre> </p>"},{"location":"doc/#mockserverremoverequestmethod-mockserverpath-urlpathregex","title":"mockserver.removeRequest(method, mockServerPath, urlPathRegex)","text":"<p>Removes request mock [Doesn't work currently - Mockserver bug]</p> <p>Kind: static method of <code>mockserver</code> </p> Param Type Description method <code>String</code> The http method [GET,POST..]. mockServerPath <code>String</code> The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. urlPathRegex <code>String</code> The url path regex to filter the requests <p>Example <pre><code>await ui5.mockserver.removeRequest(\"GET\",\"path/to/project/localService/main/mockserver\", \"*.Headers.*\");\n</code></pre> </p>"},{"location":"doc/#mockserveraddoroverriderequestmethod-mockserverpath-urlpathregex-responsejsonpath-returncode-istext-responsemessages-responselocation","title":"mockserver.addOrOverrideRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation)","text":"<p>Adds new or overrides an existing mock request</p> <p>Kind: static method of <code>mockserver</code> </p> Param Type Description method <code>String</code> The http method [GET,POST..]. mockServerPath <code>String</code> The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. urlPathRegex <code>String</code> The url path regex to filter the requests responseJsonPath <code>String</code> The json object or the path to your json file to be used as response [use relative path from the html page started]. returnCode <code>Integer</code> The http response code to simulate for this mock request. isText <code>Boolean</code> If true then content type is text/plain otherwise application/json. responseMessages <code>String</code> Mocks the gw sap-message response messages [Don't forget to stringify your json before: JSON.stringify(msg)] responseLocation <code>String</code> Mocks the location response messages header <p>Example <pre><code>await ui5.mockserver.addOrOverrideRequest(\"GET\",\"path/to/project/localService/main/mockserver\", \"*.Headers.*\", \"path/to/project/localService/main/mockdata/test.json\", 200, true, JSON.stringify(msg));\n</code></pre> </p>"},{"location":"doc/#mockserverstartmockservermockserverpath","title":"mockserver.startMockServer(mockServerPath)","text":"<p>(Re-)Starts mock server instance</p> <p>Kind: static method of <code>mockserver</code> </p> Param Type Description mockServerPath <code>String</code> The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. <p>Example <pre><code>await ui5.mockserver.startMockServer(\"path/to/project/localService/main/mockserver\");\n</code></pre> </p>"},{"location":"doc/#mockserverinitmockservermockserverpath-mockserveroptions","title":"mockserver.initMockServer(mockServerPath, mockServerOptions)","text":"<p>Initializes the provide mockserver instance on the fly</p> <p>Kind: static method of <code>mockserver</code> </p> Param Type Description mockServerPath <code>String</code> The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. mockServerOptions <code>String</code> The mock server options <p>Example <pre><code>await ui5.mockserver.initMockServer(\"path/to/project/localService/main/mockserver\", mockServerOptions);\n</code></pre> </p>"},{"location":"doc/#mockserverinitapplicationmockserverpath","title":"mockserver.initApplication(mockServerPath)","text":"<p>Initializes the application [Used in the beggining of script, once the mockserver is fully initialized and request mocking is done]</p> <p>Kind: static method of <code>mockserver</code> </p> Param Type Description mockServerPath <code>String</code> The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. <p>Example <pre><code>await ui5.mockserver.initApplication(\"path/to/project/localService/main/mockserver\");\n</code></pre> </p>"},{"location":"doc/#mockserverstopmockservermockserverpath","title":"mockserver.stopMockServer(mockServerPath)","text":"<p>Stops the mockserver instance</p> <p>Kind: static method of <code>mockserver</code> </p> Param Type Description mockServerPath <code>String</code> The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. <p>Example <pre><code>await ui5.mockserver.stopMockServer(\"path/to/project/localService/main/mockserver\");\n</code></pre> </p>"},{"location":"doc/#mockserverloadmockdatafilefilepath-istext-string","title":"mockserver.loadMockDataFile(filePath, isText) \u21d2 <code>String</code>","text":"<p>Loads a mock data file</p> <p>Kind: static method of <code>mockserver</code> Returns: <code>String</code> - The json object  </p> Param Type Description filePath <code>String</code> The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. isText <code>Boolean</code> If true then content type is text/plain otherwise application/json. <p>Example <pre><code>await ui5.mockserver.loadMockDataFile(\"path/to/project/mockData/myData.json\", true);\n</code></pre> </p>"},{"location":"doc/#mockservergetentitysetdatamockserverpath-entitysetname-array","title":"mockserver.getEntitySetData(mockServerPath, entitySetName) \u21d2 <code>Array</code>","text":"<p>Retrieves entity data</p> <p>Kind: static method of <code>mockserver</code> Returns: <code>Array</code> - An array of json objects  </p> Param Type Description mockServerPath <code>String</code> The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. entitySetName <code>String</code> The entity set name <p>Example <pre><code>await ui5.mockserver.getEntitySetData(\"path/to/project/localService/main/mockserver\", \"Headers\");\n</code></pre> </p>"},{"location":"doc/#mockserversetentitysetdatamockserverpath-entitysetname-entries","title":"mockserver.setEntitySetData(mockServerPath, entitySetName, entries)","text":"<p>Override entity data entries</p> <p>Kind: static method of <code>mockserver</code> </p> Param Type Description mockServerPath <code>String</code> The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. entitySetName <code>String</code> The entity name entries <code>String</code> The json object to be used as data to be inserted [use relative path from the html page started]. <p>Example <pre><code>await ui5.mockserver.setEntitySetData(\"path/to/project/localService/main/mockserver\", \"Headers\", entries);\n</code></pre> </p>"},{"location":"doc/#ui5navigation","title":"ui5.navigation","text":"<p>Kind: static class of <code>ui5</code> </p> <ul> <li>.navigation<ul> <li>.navigateToApplication(intent, [preventPopups], [verify], [refresh])</li> <li>.navigateToApplicationAndRetry(intent, [preventPopups], [verify], [retries], [interval])</li> <li>.navigateToSystemAndApplication(system, intent, [closePopups], [verify])</li> <li>.navigateToSystemAndApplicationAndRetry(system, intent, [closePopups], [verify], [retries], [interval])</li> <li>.navigateToApplicationWithQueryParams(intent, queryParams, [preventPopups], [verify])</li> <li>.navigateToApplicationWithQueryParamsAndRetry(intent, queryParams, [preventPopups], [verify], [retries], [interval])</li> <li>.closePopups([timeout])</li> <li>.expectUnsupportedNavigationPopup(navigationTarget)</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#navigationnavigatetoapplicationintent-preventpopups-verify-refresh","title":"navigation.navigateToApplication(intent, [preventPopups], [verify], [refresh])","text":"<p>Navigates to the application via the passed intent. The intent will be added to the baseUrl maintained in the config.</p> <p>Kind: static method of <code>navigation</code> </p> Param Type Default Description intent <code>String</code> The intent of the application. [preventPopups] <code>Boolean</code> <code>false</code> Specifies if random popup appearance should be prevented. [verify] <code>Boolean</code> <code>false</code> Specifies if the url should be asserted after the navigation. [refresh] <code>Boolean</code> <code>false</code> Refresh the page after navigation. <p>Example <pre><code>await ui5.navigation.navigateToApplication(\"PurchaseOrder-manage\");\n</code></pre> </p>"},{"location":"doc/#navigationnavigatetoapplicationandretryintent-preventpopups-verify-retries-interval","title":"navigation.navigateToApplicationAndRetry(intent, [preventPopups], [verify], [retries], [interval])","text":"<p>Navigates to the application via the passed intent, and retries in case it fails.</p> <p>Kind: static method of <code>navigation</code> </p> Param Type Default Description intent <code>String</code> The intent of the app. [preventPopups] <code>Boolean</code> <code>false</code> Specifies if random popup appearance should be prevented. Might not work for specific popups. [verify] <code>Boolean</code> <code>false</code> Specifies if the url should be asserted after the navigation. [retries] <code>Number</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Number</code> <code>5000</code> The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. <p>Example <pre><code>await ui5.navigation.navigateToApplicationAndRetry(\"PurchaseOrder-manage\");\n</code></pre> </p>"},{"location":"doc/#navigationnavigatetosystemandapplicationsystem-intent-closepopups-verify","title":"navigation.navigateToSystemAndApplication(system, intent, [closePopups], [verify])","text":"<p>Navigates within the passed system to the application via the passed intent.</p> <p>Kind: static method of <code>navigation</code> </p> Param Type Default Description system <code>String</code> The system url. intent <code>String</code> The intent of the application. [closePopups] <code>Boolean</code> <code>false</code> Specifies if random popups should be closed after the navigation. [verify] <code>Boolean</code> <code>false</code> Specifies if the url should be asserted after the navigation. <p>Example <pre><code>await ui5.navigation.navigateToSystemAndApplication(\"yourFioriLaunchpad.domain\", \"PurchaseOrder-manage\");\n</code></pre> </p>"},{"location":"doc/#navigationnavigatetosystemandapplicationandretrysystem-intent-closepopups-verify-retries-interval","title":"navigation.navigateToSystemAndApplicationAndRetry(system, intent, [closePopups], [verify], [retries], [interval])","text":"<p>Navigates within the passed system to the application via the passed intent, and retries in case it fails.</p> <p>Kind: static method of <code>navigation</code> </p> Param Type Default Description system <code>String</code> The system url. intent <code>String</code> The intent of the application. [closePopups] <code>Boolean</code> <code>false</code> Specifies if random popups should be closed after the navigation. [verify] <code>Boolean</code> <code>false</code> Specifies if the url should be asserted after the navigation. [retries] <code>Number</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Number</code> <code>5000</code> The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. <p>Example <pre><code>await ui5.navigation.navigateToSystemAndApplicationAndRetry(\"yourFioriLaunchpad.domain\", \"PurchaseOrder-manage\");\n</code></pre> </p>"},{"location":"doc/#navigationnavigatetoapplicationwithqueryparamsintent-queryparams-preventpopups-verify","title":"navigation.navigateToApplicationWithQueryParams(intent, queryParams, [preventPopups], [verify])","text":"<p>Navigates to the application with the passed queryParams via the passed intent.</p> <p>Kind: static method of <code>navigation</code> </p> Param Type Default Description intent <code>String</code> The intent of the app. queryParams <code>String</code> [OPTIONAL] Add url query params. [preventPopups] <code>Boolean</code> <code>false</code> Specifies if random popup appearance should be prevented. [verify] <code>Boolean</code> <code>false</code> Specifies if the url should be asserted after the navigation. <p>Example <pre><code>const intent = \"PurchaseOrder-manage\"\nconst queryParams = \"?sap-language=EN&amp;responderOn=true\";\nawait ui5.navigation.navigateToApplicationWithQueryParams(intent, queryParams);\n</code></pre> </p>"},{"location":"doc/#navigationnavigatetoapplicationwithqueryparamsandretryintent-queryparams-preventpopups-verify-retries-interval","title":"navigation.navigateToApplicationWithQueryParamsAndRetry(intent, queryParams, [preventPopups], [verify], [retries], [interval])","text":"<p>Navigates to the application via the passed intent, and retries in case it fails.</p> <p>Kind: static method of <code>navigation</code> </p> Param Type Default Description intent <code>String</code> The intent of the app. queryParams <code>String</code> [OPTIONAL] Add url query params. [preventPopups] <code>Boolean</code> <code>false</code> Specifies if random popup appearance should be prevented. [verify] <code>Boolean</code> <code>false</code> Specifies if the url should be asserted after the navigation. [retries] <code>Number</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Number</code> <code>5000</code> The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. <p>Example <pre><code>const intent = \"PurchaseOrder-manage\"\nconst queryParams = \"?sap-language=EN&amp;responderOn=true\";\nawait ui5.navigation.navigateToApplicationWithQueryParamsAndRetry(intent, queryParams);\n</code></pre> </p>"},{"location":"doc/#navigationclosepopupstimeout","title":"navigation.closePopups([timeout])","text":"<p>Closes all popups if they occur after navigating to a specific page.</p> <p>Kind: static method of <code>navigation</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait. <p>Example <pre><code>await ui5.navigation.closePopups();\n</code></pre> </p>"},{"location":"doc/#navigationexpectunsupportednavigationpopupnavigationtarget","title":"navigation.expectUnsupportedNavigationPopup(navigationTarget)","text":"<p>Expects navigation to an app that is not supported. This can be the case for Mocked tests when the application does not exist or when the app is not included in a role.</p> <p>Kind: static method of <code>navigation</code> </p> Param Type Description navigationTarget <code>String</code> The selector describing the element. <p>Example <pre><code>await ui5.navigation.expectUnsupportedNavigationPopup(\"#SupplierInvoice-display?FiscalYear=1234&amp;SupplierInvoice=1234567890\");\n</code></pre> </p>"},{"location":"doc/#ui5navigationbar","title":"ui5.navigationBar","text":"<p>Kind: static class of <code>ui5</code> </p> <ul> <li>.navigationBar<ul> <li>.clickBack([timeout])</li> <li>.clickSapLogo([timeout])</li> <li>.clickUserIcon([timeout])</li> <li>.expectPageTitle(compareValue)</li> <li>.expectShellHeader([timeout])</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#navigationbarclickbacktimeout","title":"navigationBar.clickBack([timeout])","text":"<p>Navigates one layer back.</p> <p>Kind: static method of <code>navigationBar</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.navigationBar.clickBack();\n</code></pre> </p>"},{"location":"doc/#navigationbarclicksaplogotimeout","title":"navigationBar.clickSapLogo([timeout])","text":"<p>Clicks at the SAP Logo.</p> <p>Kind: static method of <code>navigationBar</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.navigationBar.clickSapLogo();\n</code></pre> </p>"},{"location":"doc/#navigationbarclickusericontimeout","title":"navigationBar.clickUserIcon([timeout])","text":"<p>Clicks at the Account Icon.</p> <p>Kind: static method of <code>navigationBar</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.navigationBar.clickUserIcon();\n</code></pre> </p>"},{"location":"doc/#navigationbarexpectpagetitlecomparevalue","title":"navigationBar.expectPageTitle(compareValue)","text":"<p>Expects the page title of the current page to be the compare value.</p> <p>Kind: static method of <code>navigationBar</code> </p> Param Type Description compareValue <code>String</code> The compare value. <p>Example <pre><code>await ui5.navigationBar.expectPageTitle(\"Home\");\n</code></pre> </p>"},{"location":"doc/#navigationbarexpectshellheadertimeout","title":"navigationBar.expectShellHeader([timeout])","text":"<p>Expects the shell header to be visible</p> <p>Kind: static method of <code>navigationBar</code> </p> Param Type Default Description [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.navigationBar.expectShellHeader();\n</code></pre> </p>"},{"location":"doc/#ui5qunit","title":"ui5.qunit","text":"<p>Kind: static class of <code>ui5</code> </p>"},{"location":"doc/#qunitexecutetestspath","title":"qunit.executeTests(path)","text":"<p>Executes QUnit &amp; OPA5 tests. Qmate acts like a runner.</p> <p>Kind: static method of <code>qunit</code> </p> Param Type Description path <code>String</code> Relative path to the QUnit/OPA5 html file. <p>Example <pre><code>await ui5.qunit.executeTests(\"path/to/qunit.html\");\n</code></pre> </p>"},{"location":"doc/#ui5session","title":"ui5.session","text":"<p>Kind: static class of <code>ui5</code> </p> <ul> <li>.session<ul> <li>.login(username, [password], [verify], [timeout])</li> <li>.loginFiori(username, [password], [verify])</li> <li>.loginSapCloud(username, [password], [verify])</li> <li>.loginCustom(username, [password], usernameFieldSelector, passwordFieldSelector, logonButtonSelector, [verify])</li> <li>.loginCustomViaConfig(username, [password], [verify])</li> <li>.logout([verify])</li> <li>.switchUser(username, [password], [authenticator], [wait])</li> <li>.expectLogoutText()</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#sessionloginusername-password-verify-timeout","title":"session.login(username, [password], [verify], [timeout])","text":"<p>Login with specific username and password. This function works for both fiori and sap-cloud login.</p> <p>Kind: static method of <code>session</code> </p> Param Type Default Description username <code>String</code> The username. [password] <code>String</code> The password. [verify] <code>Boolean</code> <code>false</code> Specifies if the function will check the shell header after logging in. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.session.login(\"PURCHASER\");\n</code></pre> Example <pre><code>await ui5.session.login(\"JOHN_DOE\", \"abc123!\", true);\n</code></pre> </p>"},{"location":"doc/#sessionloginfioriusername-password-verify","title":"session.loginFiori(username, [password], [verify])","text":"<p>Login with fioriForm and specific username and password.</p> <p>Kind: static method of <code>session</code> </p> Param Type Default Description username <code>String</code> The username. [password] <code>String</code> The password. [verify] <code>Boolean</code> <code>false</code> Specifies if the function will check the shell header after logging in. <p>Example <pre><code>await ui5.session.loginFiori(\"john\", \"abc123!\");\n</code></pre> </p>"},{"location":"doc/#sessionloginsapcloudusername-password-verify","title":"session.loginSapCloud(username, [password], [verify])","text":"<p>Login with sapCloud form and specific username and password.</p> <p>Kind: static method of <code>session</code> </p> Param Type Default Description username <code>String</code> The username. [password] <code>String</code> The password. [verify] <code>Boolean</code> <code>false</code> Specifies if the function will check the shell header after logging in. <p>Example <pre><code>await ui5.session.loginSapCloud(\"john\", \"abc123!\");\n</code></pre> </p>"},{"location":"doc/#sessionlogincustomusername-password-usernamefieldselector-passwordfieldselector-logonbuttonselector-verify","title":"session.loginCustom(username, [password], usernameFieldSelector, passwordFieldSelector, logonButtonSelector, [verify])","text":"<p>Login with custom form and specific username and password.</p> <p>Kind: static method of <code>session</code> </p> Param Type Default Description username <code>String</code> The username. [password] <code>String</code> <code>\"super-duper-sensitive-pw\"</code> The password. usernameFieldSelector <code>String</code> The CSS selector of the username field. passwordFieldSelector <code>String</code> The CSS selector of the password field. logonButtonSelector <code>String</code> The CSS selector of the login button. [verify] <code>Boolean</code> <code>false</code> Specifies if the function will check the shell header after logging in. <p>Example <pre><code>await ui5.session.loginCustom(\"JOHN_DOE\", \"abc123!\", \"#username\", #password, \"#logon\");\n</code></pre> </p>"},{"location":"doc/#sessionlogincustomviaconfigusername-password-verify","title":"session.loginCustomViaConfig(username, [password], [verify])","text":"<p>Login with specific username and password. The selectors will be taken from the config.</p> <p>Kind: static method of <code>session</code> </p> Param Type Default Description username <code>String</code> The username. Can be specified in spec or config. If specified in both credentials will be taken from config. [password] <code>String</code> The password. Can be specified in spec or config. If specified in both credentials will be taken from config. [verify] <code>Boolean</code> <code>false</code> Specifies if the function will check the shell header after logging in. <p>Example <pre><code>// config - SAMPLE 1\n      auth: {\n        formType: 'plain',\n        usernameFieldSelector: \"#USERNAME_BLOCK input\",\n        passwordFieldSelector: \"#PASSWORD_BLOCK input\",\n        logonButtonSelector: \"#LOGIN_LINK\"\n      },\n      // spec\n      await ui5.session.loginCustomViaConfig(\"JOHN_DOE\", \"abc123!\");\n\n\n      // config - SAMPLE 2\n      auth: {\n        formType: \"plain\",\n        username: \"PURCH_EXT\",\n        password: \"super-duper-sensitive-pw\",\n        usernameFieldSelector: \"#USERNAME_BLOCK input\",\n        passwordFieldSelector: \"#PASSWORD_BLOCK input\",\n        logonButtonSelector: \"#LOGIN_LINK\"\n      },\n      // spec\n      await ui5.session.loginCustomViaConfig();\n</code></pre> </p>"},{"location":"doc/#sessionlogoutverify","title":"session.logout([verify])","text":"<p>Logs the user out.</p> <p>Kind: static method of <code>session</code> </p> Param Type Default Description [verify] <code>Boolean</code> <code>\"true\"</code> Specifies if the function will check the logout text after logging out. Set this to false if the system does not show the text after logging out. <p>Example <pre><code>await ui5.session.logout();\n</code></pre> </p>"},{"location":"doc/#sessionswitchuserusername-password-authenticator-wait","title":"session.switchUser(username, [password], [authenticator], [wait])","text":"<p>switches the user according to the passed username and password.</p> <p>Kind: static method of <code>session</code> </p> Param Type Default Description username <code>String</code> The username. [password] <code>String</code> The password. [authenticator] <code>Object</code> The login form type. Set to null to use generic login. [wait] <code>Number</code> <code>10000</code> The waiting time between logout and login (ms). <p>Example <pre><code>await ui5.session.switchUser(\"PURCHASER\");\n</code></pre> Example <pre><code>const authenticator = ui5.authenticators.fioriForm;\nawait ui5.session.switchUser(\"PURCHASER\", \"super-duper-sensitive-pw\", authenticator, 30000);\n</code></pre> </p>"},{"location":"doc/#sessionexpectlogouttext","title":"session.expectLogoutText()","text":"<p>Expects the logout text after logout to be \"You have been logged off. This is essential for chaining scripts, so that no static browser sleep in the spec itself is required anymore.</p> <p>Kind: static method of <code>session</code> Example <pre><code>await ui5.session.expectLogoutText();\n</code></pre> </p>"},{"location":"doc/#ui5table","title":"ui5.table","text":"<p>Kind: static class of <code>ui5</code> </p> <ul> <li>.table<ul> <li>.sortColumnAscending(columnName, tableSelector)</li> <li>.sortColumnDescending(columnName, tableSelector)</li> <li>.clickSettingsButton(tableSelector)</li> <li>.getTotalNumberOfRows(tableSelectorOrId) \u21d2 <code>Number</code></li> <li>.getTotalNumberOfRowsByValues(tableSelectorOrId, values, [index]) \u21d2 <code>Number</code></li> <li>.getSelectorsForRowsByValues(tableSelectorOrId, values)</li> <li>.getSelectorForRowByIndex(tableSelectorOrId, index)</li> <li>.selectRowByIndex(tableSelectorOrId, index)</li> <li>.selectAllRows(tableSelectorOrId)</li> <li>.deselectRowByIndex(tableSelectorOrId)</li> <li>.deselectAllRows(tableSelectorOrId)</li> <li>.selectRowByValues(tableSelectorOrId, values, [index])</li> <li>.openItemByIndex(tableSelectorOrId, index)</li> <li>.openItemByValues(tableSelectorOrId, values, [index])</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#tablesortcolumnascendingcolumnname-tableselector","title":"table.sortColumnAscending(columnName, tableSelector)","text":"<p>Sorts the given column \"Ascending\".</p> <p>Kind: static method of <code>table</code> </p> Param Type Description columnName <code>String</code> The name of the column to sort. tableSelector <code>Ui5Selector</code> The selector describing the table element (in case there are more then one). <p>Example <pre><code>await ui5.table.sortColumnAscending(\"Supplier\");\n</code></pre> Example <pre><code>const glAccountItemsTable = {\n \"elementProperties\": {\n    \"viewName\": \"ui.s2p.mm.supplinvoice.manage.s1.view.S1\",\n    \"metadata\": \"sap.m.Table\",\n    \"id\": \"*idS2P.MM.MSI.TableGLAccountItems\"\n }\n};\nawait ui5.table.sortColumnAscending(\"Amount\", glAccountItemsTable);\n</code></pre> </p>"},{"location":"doc/#tablesortcolumndescendingcolumnname-tableselector","title":"table.sortColumnDescending(columnName, tableSelector)","text":"<p>Sorts the given column \"Descending\".</p> <p>Kind: static method of <code>table</code> </p> Param Type Description columnName <code>String</code> The name of the column to sort. tableSelector <code>Ui5Selector</code> The selector describing the table element (in case there are more then one). <p>Example <pre><code>await ui5.table.sortColumnDescending(\"Supplier\");\n</code></pre> Example <pre><code>const glAccountItemsTable = {\n \"elementProperties\": {\n    \"viewName\": \"ui.s2p.mm.supplinvoice.manage.s1.view.S1\",\n    \"metadata\": \"sap.m.Table\",\n    \"id\": \"*idS2P.MM.MSI.TableGLAccountItems\"\n }\n};\nawait ui5.table.sortColumnDescending(\"Amount\", glAccountItemsTable);\n</code></pre> </p>"},{"location":"doc/#tableclicksettingsbuttontableselector","title":"table.clickSettingsButton(tableSelector)","text":"<p>Opens the user Settings.</p> <p>Kind: static method of <code>table</code> </p> Param Type Description tableSelector <code>Ui5Selector</code> The selector describing the table element (in case there are more then one). <p>Example <pre><code>await ui5.table.clickSettingsButton();\n</code></pre> Example <pre><code>const glAccountItemsTable = {\n \"elementProperties\": {\n    \"viewName\": \"ui.s2p.mm.supplinvoice.manage.s1.view.S1\",\n    \"metadata\": \"sap.m.Table\",\n    \"id\": \"*idS2P.MM.MSI.TableGLAccountItems\"\n }\n};\nawait ui5.table.clickSettingsButton(glAccountItemsTable);\n</code></pre> </p>"},{"location":"doc/#tablegettotalnumberofrowstableselectororid-number","title":"table.getTotalNumberOfRows(tableSelectorOrId) \u21d2 <code>Number</code>","text":"<p>Returns the total number of rows in the table.</p> <p>Kind: static method of <code>table</code> Returns: <code>Number</code> - The total number of rows in the table.  </p> Param Type Description tableSelectorOrId <code>Ui5Selector</code> | <code>String</code> The selector or ID describing the table (sap.m.Table <p>Example <pre><code>const selector = {\n elementProperties: {\n   viewName: \"gs.fin.runstatutoryreports.s1.view.ReportList\",\n   metadata: \"sap.ui.comp.smarttable.SmartTable\",\n  id: \"application-ReportingTask-run-component---ReportList--ReportingTable\"\n }\n};\nconst numberOfRows = await ui5.table.getTotalNumberOfRows(selector);\n</code></pre> </p>"},{"location":"doc/#tablegettotalnumberofrowsbyvaluestableselectororid-values-index-number","title":"table.getTotalNumberOfRowsByValues(tableSelectorOrId, values, [index]) \u21d2 <code>Number</code>","text":"<p>Returns the total number of rows in the table that match the given values.</p> <p>Kind: static method of <code>table</code> Returns: <code>Number</code> - The total number of matching rows in the table.  </p> Param Type Default Description tableSelectorOrId <code>Ui5Selector</code> | <code>String</code> The selector or ID describing the table (sap.m.Table values <code>String</code> | <code>Array.&lt;String&gt;</code> The value(s) to match in the table rows. [index] <code>Number</code> <code>0</code> The index of the matching row to consider. <p>Example <pre><code>const selector = {\n elementProperties: {\n   viewName: \"gs.fin.runstatutoryreports.s1.view.ReportList\",\n   metadata: \"sap.ui.comp.smarttable.SmartTable\",\n   id: \"application-ReportingTask-run-component---ReportList--ReportingTable\"\n }\n};\nconst numberOfRows = await ui5.table.getTotalNumberOfRowsByValues(selector, [\"value1\", \"value2\"]);\nconst numberOfRows = await ui5.table.getTotalNumberOfRowsByValues(selector, \"value\");\n</code></pre> </p>"},{"location":"doc/#tablegetselectorsforrowsbyvaluestableselectororid-values","title":"table.getSelectorsForRowsByValues(tableSelectorOrId, values)","text":"<p>Gets the selectors of rows in the table that contain the given values. If multiple values are provided, it only returns the selectors of rows that contain all of them.</p> <p>Kind: static method of <code>table</code> </p> Param Type Description tableSelectorOrId <code>Ui5Selector</code> | <code>String</code> The selector or ID describing the table (sap.m.Table values <code>String</code> | <code>Array.&lt;String&gt;</code> The value(s) to match in the table rows. <p>Example <pre><code>const id = \"application-ReportingTask-run-component---ReportList--ReportingTable\"\nawait ui5.table.getSelectorsForRowsByValues(id, \"February\");\n</code></pre> Example <pre><code>const selector = {\n elementProperties: {\n   viewName: \"gs.fin.runstatutoryreports.s1.view.ReportList\",\n   metadata: \"sap.ui.comp.smarttable.SmartTable\",\n   id: \"application-ReportingTask-run-component---ReportList--ReportingTable\"\n }\n};\nawait ui5.table.getSelectorsForRowsByValues(selector, [\"January\", \"2022\"]);\n</code></pre> </p>"},{"location":"doc/#tablegetselectorforrowbyindextableselectororid-index","title":"table.getSelectorForRowByIndex(tableSelectorOrId, index)","text":"<p>Gets the selector of a row in the table by its index.</p> <p>Kind: static method of <code>table</code> </p> Param Type Description tableSelectorOrId <code>Ui5Selector</code> | <code>String</code> The selector or ID describing the table (sap.m.Table index <code>Number</code> The index of the item to open. <p>Example <pre><code>const selector = {\n elementProperties: {\n   viewName: \"gs.fin.runstatutoryreports.s1.view.ReportList\",\n   metadata: \"sap.ui.comp.smarttable.SmartTable\",\n   id: \"application-ReportingTask-run-component---ReportList--ReportingTable\"\n }\n};\nconst rowSelector = await ui5.table.getSelectorForRowByIndex(selector, 0);\n</code></pre> Example <pre><code>id = \"application-ReportingTask-run-component---ReportList--ReportingTable\"\nconst rowSelector = await ui5.table.getSelectorForRowByIndex(id, 0);\n</code></pre> </p>"},{"location":"doc/#tableselectrowbyindextableselectororid-index","title":"table.selectRowByIndex(tableSelectorOrId, index)","text":"<p>Selects a row in the table by its index.</p> <p>Kind: static method of <code>table</code> </p> Param Type Description tableSelectorOrId <code>Ui5Selector</code> | <code>String</code> The selector or ID describing the table (sap.m.Table index <code>Number</code> The index of the row to select. <p>Example <pre><code>await ui5.table.selectRowByIndex(\"application-ReportingTask-run-component---ReportList--ReportingTable\", 0);\n</code></pre> Example <pre><code>const selector = {\n elementProperties: {\n   viewName: \"gs.fin.runstatutoryreports.s1.view.ReportList\",\n   metadata: \"sap.ui.comp.smarttable.SmartTable\",\n   id: \"application-ReportingTask-run-component---ReportList--ReportingTable\"\n }\n};\nawait ui5.table.selectRowByIndex(selector, 0);\n</code></pre> </p>"},{"location":"doc/#tableselectallrowstableselectororid","title":"table.selectAllRows(tableSelectorOrId)","text":"<p>Selects all rows in the table.</p> <p>Kind: static method of <code>table</code> </p> Param Type Description tableSelectorOrId <code>Ui5Selector</code> | <code>String</code> The selector or ID describing the table (sap.m.Table <p>Example <pre><code>await ui5.table.selectAllRows(\"application-ReportingTask-run-component---ReportList--ReportingTable\");\nawait ui5.table.selectAllRows(selector);\n</code></pre> </p>"},{"location":"doc/#tabledeselectrowbyindextableselectororid","title":"table.deselectRowByIndex(tableSelectorOrId)","text":"<p>Deselects a row in the table by its index.</p> <p>Kind: static method of <code>table</code> </p> Param Type Description tableSelectorOrId <code>Ui5Selector</code> | <code>String</code> The selector or ID describing the table (sap.m.Table <p>Example <pre><code>const selector = {\n elementProperties: {\n   viewName: \"gs.fin.runstatutoryreports.s1.view.ReportList\",\n   metadata: \"sap.ui.comp.smarttable.SmartTable\",\n  id: \"application-ReportingTask-run-component---ReportList--ReportingTable\"\n }\n};\nawait ui5.table.deselectRowByIndex(selector, 0);\n</code></pre> Example <pre><code>const id = \"application-ReportingTask-run-component---ReportList--ReportingTable\";\nawait ui5.table.deselectRowByIndex(id, 0);\n</code></pre> </p>"},{"location":"doc/#tabledeselectallrowstableselectororid","title":"table.deselectAllRows(tableSelectorOrId)","text":"<p>Deselects all rows in the table.</p> <p>Kind: static method of <code>table</code> </p> Param Type Description tableSelectorOrId <code>Ui5Selector</code> | <code>String</code> The selector or ID describing the table (sap.m.Table <p>Example <pre><code>await ui5.table.deselectAllRows(\"application-ReportingTask-run-component---ReportList--ReportingTable\");\n</code></pre> Example <pre><code>const selector = {\n elementProperties: {\n   viewName: \"gs.fin.runstatutoryreports.s1.view.ReportList\",\n   metadata: \"sap.ui.comp.smarttable.SmartTable\",\n   id: \"application-ReportingTask-run-component---ReportList--ReportingTable\"\n }\n};\nawait ui5.table.deselectAllRows(selector);\n</code></pre> </p>"},{"location":"doc/#tableselectrowbyvaluestableselectororid-values-index","title":"table.selectRowByValues(tableSelectorOrId, values, [index])","text":"<p>Selects a row in the table by matching value(s). If multiple rows match, selects the one at the given global index (across all pages).</p> <p>Kind: static method of <code>table</code> </p> Param Type Default Description tableSelectorOrId <code>Ui5Selector</code> | <code>String</code> The selector or ID describing the table. values <code>String</code> | <code>Array.&lt;String&gt;</code> The value(s) to match in the table rows. [index] <code>Number</code> <code>0</code> The global index of the matching row to select (across all pages). <p>Example <pre><code>const selector = {\nelementProperties: {\n viewName: \"gs.fin.runstatutoryreports.s1.view.ReportList\",\n metadata: \"sap.ui.comp.smarttable.SmartTable\",\n id: \"application-ReportingTask-run-component---ReportList--ReportingTable\"\n}\n};\nawait ui5.table.selectRowByValues(selector, [\"value1\", \"value2\"]);\n</code></pre> Example <pre><code>const id = \"application-ReportingTask-run-component---ReportList--ReportingTable\";\nawait ui5.table.selectRowByValues(id, \"value\", 1);\n</code></pre> </p>"},{"location":"doc/#tableopenitembyindextableselectororid-index","title":"table.openItemByIndex(tableSelectorOrId, index)","text":"<p>Opens the item in the table by its index.</p> <p>Kind: static method of <code>table</code> </p> Param Type Description tableSelectorOrId <code>Ui5Selector</code> | <code>String</code> The selector or ID describing the table (sap.m.Table index <code>Number</code> The index of the item to open. <p>Example <pre><code>const selector = {\n elementProperties: {\n  viewName: \"gs.fin.runstatutoryreports.s1.view.ReportList\",\n  metadata: \"sap.ui.comp.smarttable.SmartTable\",\n  id: \"application-ReportingTask-run-component---ReportList--ReportingTable\"\n }\n};\nawait ui5.table.openItemByIndex(selector, 0);\n</code></pre> Example <pre><code>const id = \"application-ReportingTask-run-component---ReportList--ReportingTable\";\nawait ui5.table.openItemByIndex(id, 0);\n</code></pre> </p>"},{"location":"doc/#tableopenitembyvaluestableselectororid-values-index","title":"table.openItemByValues(tableSelectorOrId, values, [index])","text":"<p>Opens the item in the table containing the given values. If multiple items match, it opens the index-th item.</p> <p>Kind: static method of <code>table</code> </p> Param Type Default Description tableSelectorOrId <code>Ui5Selector</code> | <code>String</code> The selector or ID describing the table (sap.m.Table values <code>String</code> | <code>Array.&lt;String&gt;</code> The value(s) to match in the table rows. [index] <code>Number</code> <code>0</code> The index of the matching row to consider. <p>Example <pre><code>const selector = {\n elementProperties: {\n   viewName: \"gs.fin.runstatutoryreports.s1.view.ReportList\",\n   metadata: \"sap.ui.comp.smarttable.SmartTable\",\n   id: \"application-ReportingTask-run-component---ReportList--ReportingTable\"\n }\n};\nawait ui5.table.openItemByValues(selector, [\"value1\", \"value2\"]);\n</code></pre> Example <pre><code>const id = \"application-ReportingTask-run-component---ReportList--ReportingTable\";\nawait ui5.table.openItemByValues(id, \"value\");\n</code></pre> </p>"},{"location":"doc/#ui5userinteraction","title":"ui5.userInteraction","text":"<p>Kind: static class of <code>ui5</code> </p> <ul> <li>.userInteraction<ul> <li>.click(selector, [index], [timeout])</li> <li>.clickAndRetry(selector, [index], [timeout], [retries], [interval])</li> <li>.doubleClick(selector, [index], [timeout])</li> <li>.rightClick(selector, [index], [timeout])</li> <li>.clickTab(selector, [index], [timeout])</li> <li>.clickListItem(selector, [index], [timeout])</li> <li>.check(selector, [index], [timeout])</li> <li>.uncheck(selector, [index], [timeout])</li> <li>.fill(selector, value, [index], [timeout])</li> <li>.fillAndRetry(selector, value, [index], [timeout], [retries], [interval])</li> <li>.clear(selector, [index], [timeout])</li> <li>.clearAndRetry(selector, [index], [timeout], [retries], [interval])</li> <li>.clearAndFill(selector, value, [index], [timeout])</li> <li>.clearAndFillAndRetry(selector, value, [index], [timeout], [retries], [interval], [verify])</li> <li>.clearSmartFieldInput(selector, [index], [timeout])</li> <li>.clearAndFillSmartFieldInput(selector, value, [index], [timeout])</li> <li>.clearAndFillSmartFieldInputAndRetry(selector, value, [index], [timeout], [retries], [interval])</li> <li>.selectBox(selector, value, [index])</li> <li>.selectComboBox(selector, value, [index])</li> <li>.selectMultiComboBox(selector, values, [index])</li> <li>.clickSelectArrow(selector, [index])</li> <li>.clickSelectArrowAndRetry(selector, [index], [retries], [interval])</li> <li>.selectFromTab(selector, value, [index], [timeout])</li> <li>.mouseOverElement(selector, [index], [timeout])</li> <li>.scrollToElement(selector, [index], [alignment], [timeout])</li> <li>.selectAll([selector], [index], [timeout])</li> <li>.openF4Help(selector, [index], [timeout], useF4Key)</li> <li>.searchFor(selector, [index], [timeout], useEnter)</li> <li>.resetSearch(selector, [index], [timeout])</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#userinteractionclickselector-index-timeout","title":"userInteraction.click(selector, [index], [timeout])","text":"<p>Clicks on the element with the given selector.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.userInteraction.click(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractionclickandretryselector-index-timeout-retries-interval","title":"userInteraction.clickAndRetry(selector, [index], [timeout], [retries], [interval])","text":"<p>Clicks on the element with the given selector and retries the action in case of a failure.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [retries] <code>Number</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Number</code> <code>5000</code> The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. <p>Example <pre><code>await ui5.userInteraction.clickAndRetry(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractiondoubleclickselector-index-timeout","title":"userInteraction.doubleClick(selector, [index], [timeout])","text":"<p>Double Clicks on the passed element.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.userInteraction.doubleClick(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractionrightclickselector-index-timeout","title":"userInteraction.rightClick(selector, [index], [timeout])","text":"<p>Right Clicks on the passed element.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const elem = await nonUi5.element.getById(\"button01\");\nawait ui5.userInteraction.rightClick(elem);\n</code></pre> </p>"},{"location":"doc/#userinteractionclicktabselector-index-timeout","title":"userInteraction.clickTab(selector, [index], [timeout])","text":"<p>Clicks on the tab with the given selector and checks if the tab got selected successfully. The function retries the click for maximal 3 times if the selection of the tab (blue underline) was not successful.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.userInteraction.clickTab(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractionclicklistitemselector-index-timeout","title":"userInteraction.clickListItem(selector, [index], [timeout])","text":"<p>Clicks or opens the list item with the given selector (e.g. ColumnListItem, StandardListItem). In some cases the default click function is not working correctly (clicks an element within the list item). Therefore we recommend to use this function to open a specific list item.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.userInteraction.clickListItem(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractioncheckselector-index-timeout","title":"userInteraction.check(selector, [index], [timeout])","text":"<p>Checks the checkbox with the given selector.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.userInteraction.check(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractionuncheckselector-index-timeout","title":"userInteraction.uncheck(selector, [index], [timeout])","text":"<p>Unchecks the checkbox with the given selector.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.userInteraction.uncheck(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractionfillselector-value-index-timeout","title":"userInteraction.fill(selector, value, [index], [timeout])","text":"<p>Fills the input field with the given selector.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. value <code>String</code> | <code>Number</code> The value to enter. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.userInteraction.fill(selector, \"My Value\");\n</code></pre> </p>"},{"location":"doc/#userinteractionfillandretryselector-value-index-timeout-retries-interval","title":"userInteraction.fillAndRetry(selector, value, [index], [timeout], [retries], [interval])","text":"<p>Fills the input field with the given selector and retries the action in case of a failure.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. value <code>String</code> | <code>Number</code> The value to enter. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [retries] <code>Number</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Number</code> <code>5000</code> The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. <p>Example <pre><code>await ui5.userInteraction.fillAndRetry(selector, \"My Value\");\n</code></pre> </p>"},{"location":"doc/#userinteractionclearselector-index-timeout","title":"userInteraction.clear(selector, [index], [timeout])","text":"<p>Clears the input with the given selector.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.userInteraction.clear(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractionclearandretryselector-index-timeout-retries-interval","title":"userInteraction.clearAndRetry(selector, [index], [timeout], [retries], [interval])","text":"<p>Clears the input with the given selector and retries the action in case of a failure</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [retries] <code>Number</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Number</code> <code>5000</code> The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. <p>Example <pre><code>await ui5.userInteraction.clearAndRetry(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractionclearandfillselector-value-index-timeout","title":"userInteraction.clearAndFill(selector, value, [index], [timeout])","text":"<p>Clears the input field with the given selector and fills the given value.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. value <code>String</code> | <code>Number</code> The value to enter. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.userInteraction.clearAndFill(selector, \"My Value\");\n</code></pre> </p>"},{"location":"doc/#userinteractionclearandfillandretryselector-value-index-timeout-retries-interval-verify","title":"userInteraction.clearAndFillAndRetry(selector, value, [index], [timeout], [retries], [interval], [verify])","text":"<p>Clears the input field with the given selector and fills the given value. Retries the action in case of a failure.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. value <code>String</code> The value to enter. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [retries] <code>Number</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Number</code> <code>5000</code> The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. [verify] <code>Boolean</code> <code>true</code> Specifies if the filled value should be verified. <p>Example <pre><code>await ui5.userInteraction.clearAndFillAndRetry(selector, \"My Value\");\n</code></pre> </p>"},{"location":"doc/#userinteractionclearsmartfieldinputselector-index-timeout","title":"userInteraction.clearSmartFieldInput(selector, [index], [timeout])","text":"<p>Clears the smart filed with the given selector.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.userInteraction.clearSmartFieldInput(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractionclearandfillsmartfieldinputselector-value-index-timeout","title":"userInteraction.clearAndFillSmartFieldInput(selector, value, [index], [timeout])","text":"<p>Clears the smart filed with the given selector and fills the given value.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. value <code>String</code> The value to enter. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.userInteraction.clearAndFillSmartFieldInput(selector, \"My Value\");\n</code></pre> </p>"},{"location":"doc/#userinteractionclearandfillsmartfieldinputandretryselector-value-index-timeout-retries-interval","title":"userInteraction.clearAndFillSmartFieldInputAndRetry(selector, value, [index], [timeout], [retries], [interval])","text":"<p>Clears the smart filed with the given selector and fills the given value and retries the action in case of a failure.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. value <code>String</code> The value to enter. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [retries] <code>Number</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Number</code> <code>5000</code> The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. <p>Example <pre><code>await ui5.userInteraction.clearAndFillSmartFieldInputAndRetry(selector, \"My Value\");\n</code></pre> </p>"},{"location":"doc/#userinteractionselectboxselector-value-index","title":"userInteraction.selectBox(selector, value, [index])","text":"<p>Selects the passed value of the Select box. Please note that the function will only work for the default select Box. In special cases, please use the clickSelectArrow function.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. value <code>String</code> The value to select. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). <p>Example <pre><code>await ui5.userInteraction.selectBox(selector, \"Germany\");\n</code></pre> </p>"},{"location":"doc/#userinteractionselectcomboboxselector-value-index","title":"userInteraction.selectComboBox(selector, value, [index])","text":"<p>Selects the passed value from the ComboBox with the given selector. Please note that the function will only work for the default ComboBox. In special cases you need to use the 'clickSelectArrow' function.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. value <code>String</code> The value to select. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). <p>Example <pre><code>await ui5.userInteraction.selectComboBox(selector, \"Germany\");\n</code></pre> </p>"},{"location":"doc/#userinteractionselectmulticomboboxselector-values-index","title":"userInteraction.selectMultiComboBox(selector, values, [index])","text":"<p>Selects the passed values of the MultiComboBox with the given selector. Please note that the function will only work for the default MultiComboBox. In special cases, please use the clickSelectArrow function.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. values <code>Array</code> The values to select. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). <p>Example <pre><code>await ui5.userInteraction.selectMultiComboBox(selector, [\"Option 1\", \"Option 2\"]);\n</code></pre> </p>"},{"location":"doc/#userinteractionclickselectarrowselector-index","title":"userInteraction.clickSelectArrow(selector, [index])","text":"<p>Clicks the arrow icon at the passed selector (select box).</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). <p>Example <pre><code>await ui5.userInteraction.clickSelectArrow(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractionclickselectarrowandretryselector-index-retries-interval","title":"userInteraction.clickSelectArrowAndRetry(selector, [index], [retries], [interval])","text":"<p>Clicks the arrow icon at the passed selector (select box), and retries in case it fails.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [retries] <code>Number</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Number</code> <code>5000</code> The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. <p>Example <pre><code>await ui5.userInteraction.clickSelectArrowAndRetry(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractionselectfromtabselector-value-index-timeout","title":"userInteraction.selectFromTab(selector, value, [index], [timeout])","text":"<p>Selects the passed value on the tab with the given selector and checks if the tab got selected successfully. The function retries the click for maximal 3 times if the selection of the tab (blue underline) was not successful.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. value <code>String</code> The value to select. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.userInteraction.selectFromTab(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractionmouseoverelementselector-index-timeout","title":"userInteraction.mouseOverElement(selector, [index], [timeout])","text":"<p>Moves the cursor/focus to the element with the given selector.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.userInteraction.mouseOverElement(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractionscrolltoelementselector-index-alignment-timeout","title":"userInteraction.scrollToElement(selector, [index], [alignment], [timeout])","text":"<p>Scrolls the element with the given selector into view.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [alignment] <code>String</code> | <code>Object</code> <code>\"center\"</code> The alignment option for scrolling.   Can be one of: \"start\", \"center\", \"end\", \"nearest\", or an object with properties:   - block: Vertical alignment (\"start\", \"center\", \"end\", \"nearest\").   - inline: Horizontal alignment (\"start\", \"center\", \"end\", \"nearest\"). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>// Scroll to element with center alignment.\nawait nonUi5.userInteraction.scrollToElement(selector, 0, \"center\");\n</code></pre> Example <pre><code>// Scroll to element with custom alignment.\nconst alignment = {\n  block: \"start\",\n  inline: \"center\"\n};\nawait nonUi5.userInteraction.scrollToElement(selector, 0, alignment);\n</code></pre> </p>"},{"location":"doc/#userinteractionselectallselector-index-timeout","title":"userInteraction.selectAll([selector], [index], [timeout])","text":"<p>Performs \"select all\" (ctrl + a) at the element with the given selector.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description [selector] <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector, in case there are more than one elements visible at the same time. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.userInteraction.selectAll(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractionopenf4helpselector-index-timeout-usef4key","title":"userInteraction.openF4Help(selector, [index], [timeout], useF4Key)","text":"<p>Opens the F4-help of the element with the given selector.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). useF4Key <code>Boolean</code> Specifies if the help is opened by pressing the F4-key or via the button. The default value is true (triggered by pressing the F4-key). Set \"useF4Key\" to false, to trigger the search by clicking the button. <p>Example <pre><code>await ui5.userInteraction.openF4Help(selector, 0, 30000, false);\n</code></pre> </p>"},{"location":"doc/#userinteractionsearchforselector-index-timeout-useenter","title":"userInteraction.searchFor(selector, [index], [timeout], useEnter)","text":"<p>Searches for the passed value and executes the search. In case that the search is already filled, it will reset the field first.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). useEnter <code>Boolean</code> Specifies if the search is triggered by pressing the Enter-key or via the search button. The default value is true (triggered by pressing the Enter-key). Set \"useEnter\" to false, to trigger the search by clicking the search button. <p>Example <pre><code>await ui5.userInteraction.searchFor(selector, \"My Value\", 0, 30000, false);\n</code></pre> </p>"},{"location":"doc/#userinteractionresetsearchselector-index-timeout","title":"userInteraction.resetSearch(selector, [index], [timeout])","text":"<p>Resets the search field.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description selector <code>Object</code> The selector describing the element. [index] <code>Number</code> <code>0</code> The index of the selector (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await ui5.userInteraction.resetSearch(selector);\n</code></pre> </p>"},{"location":"doc/#nonui5","title":"nonUi5","text":"<p>Global namespace for non UI5 modules.</p> <p>Kind: global constant  </p> <ul> <li>nonUi5<ul> <li>.assertion<ul> <li>.expectAttributeToBe(elementOrSelector, compareValue, [attribute])</li> <li>.expectAttributeToContain(elementOrSelector, compareValue, [attribute])</li> <li>.expectValueToBe(elementOrSelector, compareValue)</li> <li>.expectCssPropertyValueToBe(elementOrSelector, cssProperty, compareValue)</li> <li>.expectTextToBe(elementOrSelector, compareValue)</li> <li>.expectToBeVisible(elementOrSelector)</li> <li>.expectToBeNotVisible(elementOrSelector, [timeout])</li> </ul> </li> <li>.element<ul> <li>.waitForAll(selector, [timeout])</li> <li>.waitToBePresent(selector, [timeout])</li> <li>.waitToBeVisible(selector, [timeout])</li> <li>.waitToBeClickable(selector, [timeout])</li> <li>.getAllDisplayed(selector, [timeout]) \u21d2 <code>Array.&lt;Object&gt;</code></li> <li>.getAll(selector, [timeout])</li> <li>.getByCss(selector, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code></li> <li>.getByCssContainingText(selector, [text], [index], [timeout], [includeHidden], [strict]) \u21d2 <code>Object</code></li> <li>.getById(id, [timeout], [includeHidden]) \u21d2 <code>Object</code></li> <li>.getByClass(elemClass, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code></li> <li>.getByName(name, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code></li> <li>.getByXPath(xpath, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code></li> <li>.getByChild(elementSelector, childSelector, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code></li> <li>.getByParent(elementSelector, parentSelector, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code></li> <li>.isVisible(element, [strict]) \u21d2 <code>Boolean</code></li> <li>.isPresent(elem) \u21d2 <code>Boolean</code></li> <li>.isEnabled(elem) \u21d2 <code>Boolean</code></li> <li>.isPresentByCss(css, [index], [timeout]) \u21d2 <code>boolean</code></li> <li>.isPresentByXPath(xpath, [index], [timeout]) \u21d2 <code>boolean</code></li> <li>.isSelected(elem) \u21d2 <code>boolean</code></li> <li>.getAttributeValue(elem, [attribute]) \u21d2 <code>String</code></li> <li>.getValue(elem) \u21d2 <code>String</code></li> <li>.getCssPropertyValue(elementOrSelector, cssProperty) \u21d2 <code>String</code></li> <li>.setInnerHTML(elem) \u21d2 <code>String</code></li> <li>.highlight(elem, [duration], [color])</li> </ul> </li> <li>.navigation<ul> <li>.navigateToApplication(relativeReference, [refresh])</li> </ul> </li> <li>.session<ul> <li>.loginSapNetWeaver(username, password, [clickContinue], [iframeCssSelector])</li> </ul> </li> <li>.userInteraction<ul> <li>.click(elementOrSelector, [timeout])</li> <li>.clickAndRetry(elementOrSelector, [timeout], [retries], [interval])</li> <li>.doubleClick(elementOrSelector, [timeout])</li> <li>.rightClick(elementOrSelector, [timeout])</li> <li>.check(elementOrSelector)</li> <li>.uncheck(elementOrSelector)</li> <li>.fill(elementOrSelector, value)</li> <li>.fillAndRetry(elementOrSelector, value, [retries], [interval])</li> <li>.clear(elementOrSelector)</li> <li>.clearAndRetry(elementOrSelector, [retries], [interval])</li> <li>.clearAndFill(elementOrSelector, value)</li> <li>.clearAndFillAndRetry(elementOrSelector, value, [retries], [interval], [verify])</li> <li>.mouseOverElement(elementOrSelector, [xOffset], [yOffset])</li> <li>.scrollToElement(elem, [alignment])</li> <li>.dragAndDrop(elementOrSelector, targetElem)</li> <li>.moveCursorAndClick(elementOrSelector)</li> <li>.clickElementInSvg(elementOrSelector, innerSelector)</li> </ul> </li> </ul> </li> </ul> <p></p>"},{"location":"doc/#nonui5assertion","title":"nonUi5.assertion","text":"<p>Kind: static class of <code>nonUi5</code> </p> <ul> <li>.assertion<ul> <li>.expectAttributeToBe(elementOrSelector, compareValue, [attribute])</li> <li>.expectAttributeToContain(elementOrSelector, compareValue, [attribute])</li> <li>.expectValueToBe(elementOrSelector, compareValue)</li> <li>.expectCssPropertyValueToBe(elementOrSelector, cssProperty, compareValue)</li> <li>.expectTextToBe(elementOrSelector, compareValue)</li> <li>.expectToBeVisible(elementOrSelector)</li> <li>.expectToBeNotVisible(elementOrSelector, [timeout])</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#assertionexpectattributetobeelementorselector-comparevalue-attribute","title":"assertion.expectAttributeToBe(elementOrSelector, compareValue, [attribute])","text":"<p>Expects the attributes value of the passed element to be the compare value.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. compareValue <code>String</code> The compare value. [attribute] <code>String</code> The attribute to compare. If not passed, it will compare the inner HTML content of the element. <p>Example <pre><code>const element = await nonUi5.element.getById(\"button01\");\nawait nonUi5.assertion.expectAttributeToBe(element, \"Save\");\n</code></pre> Example <pre><code>const element = await nonUi5.element.getById(\"button01\");\nawait nonUi5.assertion.expectAttributeToBe(element, \"Save\", \"title\");\n</code></pre> </p>"},{"location":"doc/#assertionexpectattributetocontainelementorselector-comparevalue-attribute","title":"assertion.expectAttributeToContain(elementOrSelector, compareValue, [attribute])","text":"<p>Expects the attributes value of the passed element to contain the compare value.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. compareValue <code>String</code> The compare value. [attribute] <code>String</code> The attribute to compare. If not passed, it will compare the inner HTML content of the element. <p>Example <pre><code>const element = await nonUi5.element.getById(\"button01\");\nawait nonUi5.assertion.expectAttributeToContain(element, \"Save\", \"title\");\n</code></pre> </p>"},{"location":"doc/#assertionexpectvaluetobeelementorselector-comparevalue","title":"assertion.expectValueToBe(elementOrSelector, compareValue)","text":"<p>Expects the attributes value of the passed element to be the compare value.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. compareValue <code>String</code> The compare value. <p>Example <pre><code>const element = await nonUi5.element.getById(\"button01\");\nawait nonUi5.assertion.expectValueToBe(element, \"Save\");\n</code></pre> </p>"},{"location":"doc/#assertionexpectcsspropertyvaluetobeelementorselector-cssproperty-comparevalue","title":"assertion.expectCssPropertyValueToBe(elementOrSelector, cssProperty, compareValue)","text":"<p>Expects the CSS property value of the passed element to be the compare value.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. cssProperty <code>String</code> The CSS property of the element to compare with. compareValue <code>String</code> The compare value. <p>Example <pre><code>const element = await nonUi5.element.getById(\"button01\");\nawait nonUi5.assertion.expectCssPropertyValueToBe(element, \"color\", \"rgb(255, 0, 0)\");\n</code></pre> </p>"},{"location":"doc/#assertionexpecttexttobeelementorselector-comparevalue","title":"assertion.expectTextToBe(elementOrSelector, compareValue)","text":"<p>Expects the text of the passed element to be the compare value.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. compareValue <code>String</code> The compare value. <p>Example <pre><code>const element = await nonUi5.element.getById(\"button01\");\nawait nonUi5.assertion.expectTextToBe(element, \"Save\");\n</code></pre> </p>"},{"location":"doc/#assertionexpecttobevisibleelementorselector","title":"assertion.expectToBeVisible(elementOrSelector)","text":"<p>Expects that the element is visible to the user.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. <p>Example <pre><code>const element = await nonUi5.element.getById(\"button01\");\nawait nonUi5.assertion.expectToBeVisible(elem);\n</code></pre> </p>"},{"location":"doc/#assertionexpecttobenotvisibleelementorselector-timeout","title":"assertion.expectToBeNotVisible(elementOrSelector, [timeout])","text":"<p>Expects that the element is not visible to the user.</p> <p>Kind: static method of <code>assertion</code> </p> Param Type Default Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). Recommendation is to lower the timeout since the element is not expected to show up. <p>Example <pre><code>const element = await nonUi5.element.getById(\"button01\");\nawait nonUi5.assertion.expectToBeNotVisible(element, 5000);\n</code></pre> </p>"},{"location":"doc/#nonui5element","title":"nonUi5.element","text":"<p>Kind: static class of <code>nonUi5</code> </p> <ul> <li>.element<ul> <li>.waitForAll(selector, [timeout])</li> <li>.waitToBePresent(selector, [timeout])</li> <li>.waitToBeVisible(selector, [timeout])</li> <li>.waitToBeClickable(selector, [timeout])</li> <li>.getAllDisplayed(selector, [timeout]) \u21d2 <code>Array.&lt;Object&gt;</code></li> <li>.getAll(selector, [timeout])</li> <li>.getByCss(selector, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code></li> <li>.getByCssContainingText(selector, [text], [index], [timeout], [includeHidden], [strict]) \u21d2 <code>Object</code></li> <li>.getById(id, [timeout], [includeHidden]) \u21d2 <code>Object</code></li> <li>.getByClass(elemClass, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code></li> <li>.getByName(name, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code></li> <li>.getByXPath(xpath, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code></li> <li>.getByChild(elementSelector, childSelector, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code></li> <li>.getByParent(elementSelector, parentSelector, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code></li> <li>.isVisible(element, [strict]) \u21d2 <code>Boolean</code></li> <li>.isPresent(elem) \u21d2 <code>Boolean</code></li> <li>.isEnabled(elem) \u21d2 <code>Boolean</code></li> <li>.isPresentByCss(css, [index], [timeout]) \u21d2 <code>boolean</code></li> <li>.isPresentByXPath(xpath, [index], [timeout]) \u21d2 <code>boolean</code></li> <li>.isSelected(elem) \u21d2 <code>boolean</code></li> <li>.getAttributeValue(elem, [attribute]) \u21d2 <code>String</code></li> <li>.getValue(elem) \u21d2 <code>String</code></li> <li>.getCssPropertyValue(elementOrSelector, cssProperty) \u21d2 <code>String</code></li> <li>.setInnerHTML(elem) \u21d2 <code>String</code></li> <li>.highlight(elem, [duration], [color])</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#elementwaitforallselector-timeout_1","title":"element.waitForAll(selector, [timeout])","text":"<p>Waits until all elements with the given selector are rendered. Will fail if no element is found.</p> <p>Kind: static method of <code>element</code> </p> Param Type Default Description selector <code>Object</code> The CSS selector describing the element. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await nonUi5.element.waitForAll(\".inputField\");\n</code></pre> </p>"},{"location":"doc/#elementwaittobepresentselector-timeout","title":"element.waitToBePresent(selector, [timeout])","text":"<p>Waits until the element with the given selector is present.</p> <p>Kind: static method of <code>element</code> </p> Param Type Default Description selector <code>Object</code> The CSS selector describing the element. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await nonUi5.element.waitToBePresent(\".input01\");\n</code></pre> Example <pre><code>await nonUi5.element.waitToBePresent(\"#button12\");\n</code></pre> Example <pre><code>await nonUi5.element.waitToBePresent(\"p:first-child\");\n</code></pre> </p>"},{"location":"doc/#elementwaittobevisibleselector-timeout","title":"element.waitToBeVisible(selector, [timeout])","text":"<p>Waits until the element with the given selector is visible.</p> <p>Kind: static method of <code>element</code> </p> Param Type Default Description selector <code>Object</code> The CSS selector describing the element. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await nonUi5.element.waitToBeVisible(\".input01\");\n</code></pre> Example <pre><code>await nonUi5.element.waitToBeVisible(\"#button12\");\n</code></pre> Example <pre><code>await nonUi5.element.waitToBeVisible(\"p:first-child\");\n</code></pre> </p>"},{"location":"doc/#elementwaittobeclickableselector-timeout","title":"element.waitToBeClickable(selector, [timeout])","text":"<p>Waits until the element with the given selector is clickable.</p> <p>Kind: static method of <code>element</code> </p> Param Type Default Description selector <code>Object</code> The CSS selector describing the element. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await nonUi5.element.waitToBeClickable(\".input01\");\n</code></pre> Example <pre><code>await nonUi5.element.waitToBeClickable(\"#button12\");\n</code></pre> Example <pre><code>await nonUi5.element.waitToBeClickable(\"p:first-child\");\n</code></pre> </p>"},{"location":"doc/#elementgetalldisplayedselector-timeout-arrayobject_1","title":"element.getAllDisplayed(selector, [timeout]) \u21d2 <code>Array.&lt;Object&gt;</code>","text":"<p>Gets all visible elements with the passed selector.</p> <p>Kind: static method of <code>element</code> Returns: <code>Array.&lt;Object&gt;</code> - The array of elements.  </p> Param Type Default Description selector <code>Object</code> The CSS selector describing the element. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await nonUi5.element.getAllDisplayed(\".inputField\");\n</code></pre> </p>"},{"location":"doc/#elementgetallselector-timeout","title":"element.getAll(selector, [timeout])","text":"<p>Returns all elements found by the given selector despite visible or not.</p> <p>Kind: static method of <code>element</code> </p> Param Type Default Description selector <code>Object</code> The CSS selector describing the element. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const hiddenElements = await nonUi5.element.getAll(\".sapUiInvisibleText\");\nconst isPresent = await nonUi5.element.isPresent(hiddenElements[0]);\nawait common.assertion.expectTrue(isPresent);\n</code></pre> </p>"},{"location":"doc/#elementgetbycssselector-index-timeout-includehidden-object","title":"element.getByCss(selector, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code>","text":"<p>Gets the element with the given CSS selector.</p> <p>Kind: static method of <code>element</code> Returns: <code>Object</code> - The found element.  </p> Param Type Default Description selector <code>Object</code> The CSS selector describing the element. [index] <code>Number</code> <code>0</code> The index of the element (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [includeHidden] <code>Boolean</code> <code>false</code> Specifies if hidden elements are also considered. By default it checks only for visible ones. <p>Example <pre><code>const elem = await nonUi5.element.getByCss(\".button01\");\n</code></pre> </p>"},{"location":"doc/#elementgetbycsscontainingtextselector-text-index-timeout-includehidden-strict-object","title":"element.getByCssContainingText(selector, [text], [index], [timeout], [includeHidden], [strict]) \u21d2 <code>Object</code>","text":"<p>Gets the element with the given CSS selector containing the given text value.</p> <p>Kind: static method of <code>element</code> Returns: <code>Object</code> - The found element.  </p> Param Type Default Description selector <code>Object</code> The CSS selector describing the element. [text] <code>String</code> <code>\"\"</code> The containing text value of the element. [index] <code>Number</code> <code>0</code> The index of the element (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [includeHidden] <code>Boolean</code> <code>false</code> Specifies if hidden elements are also considered. By default it checks only for visible ones. [strict] <code>Boolean</code> <code>false</code> Specifies if the values match should be exact <p>Example <pre><code>const elem = await nonUi5.element.getByCssContainingText(\".input01\", \"Jack Jackson\");\n</code></pre> </p>"},{"location":"doc/#elementgetbyidid-timeout-includehidden-object","title":"element.getById(id, [timeout], [includeHidden]) \u21d2 <code>Object</code>","text":"<p>Gets the element with the given ID.</p> <p>Kind: static method of <code>element</code> Returns: <code>Object</code> - The found element.  </p> Param Type Default Description id <code>String</code> The id of the element. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [includeHidden] <code>Boolean</code> <code>false</code> Specifies if the function will check for the elements visibility. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"button01\");\n</code></pre> </p>"},{"location":"doc/#elementgetbyclasselemclass-index-timeout-includehidden-object","title":"element.getByClass(elemClass, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code>","text":"<p>Gets the element with the given class.</p> <p>Kind: static method of <code>element</code> Returns: <code>Object</code> - The found element.  </p> Param Type Default Description elemClass <code>String</code> The class describing the element [index] <code>Number</code> <code>0</code> The index of the element (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [includeHidden] <code>Boolean</code> <code>false</code> Specifies if hidden elements are also considered. By default it checks only for visible ones. <p>Example <pre><code>const elem = await nonUi5.element.getByClass(\"button01\");\nconst elem = await nonUi5.element.getByClass(\"sapMIBar sapMTB sapMTBNewFlex sapContrastPlus\");\n</code></pre> </p>"},{"location":"doc/#elementgetbynamename-index-timeout-includehidden-object","title":"element.getByName(name, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code>","text":"<p>Gets the element with the given name.</p> <p>Kind: static method of <code>element</code> Returns: <code>Object</code> - The found element.  </p> Param Type Default Description name <code>String</code> The name attribute of the element. [index] <code>Number</code> <code>0</code> The index of the element (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [includeHidden] <code>Boolean</code> <code>false</code> Specifies if hidden elements are also considered. By default it checks only for visible ones. <p>Example <pre><code>const elem = await nonUi5.element.getByName(\".button01\");\n</code></pre> </p>"},{"location":"doc/#elementgetbyxpathxpath-index-timeout-includehidden-object","title":"element.getByXPath(xpath, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code>","text":"<p>Gets the element with the given XPath.</p> <p>Kind: static method of <code>element</code> Returns: <code>Object</code> - The found element.  </p> Param Type Default Description xpath <code>String</code> The XPath describing the element. [index] <code>Number</code> <code>0</code> The index of the element (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [includeHidden] <code>Boolean</code> <code>false</code> Specifies if hidden elements are also considered. By default it checks only for visible ones. <p>Example <pre><code>const elem = await nonUi5.element.getByXPath(\"//ul/li/a\");\n</code></pre> </p>"},{"location":"doc/#elementgetbychildelementselector-childselector-index-timeout-includehidden-object","title":"element.getByChild(elementSelector, childSelector, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code>","text":"<p>Gets an element by its selector and child selector. Can be used when multiple elements have the same properties.</p> <p>Kind: static method of <code>element</code> Returns: <code>Object</code> - The found element.  </p> Param Type Default Description elementSelector <code>String</code> The CSS selector describing the element. childSelector <code>String</code> The CSS selector describing the child element. [index] <code>Number</code> <code>0</code> The index of the element (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [includeHidden] <code>Boolean</code> <code>false</code> Specifies if hidden elements are also considered. By default it checks only for visible ones. <p>Example <pre><code>const elem = await nonUi5.element.getByChild(\".form01\", \".input01\");\n</code></pre> </p>"},{"location":"doc/#elementgetbyparentelementselector-parentselector-index-timeout-includehidden-object","title":"element.getByParent(elementSelector, parentSelector, [index], [timeout], [includeHidden]) \u21d2 <code>Object</code>","text":"<p>Gets an element by its selector and parent selector. Can be used when multiple elements have the same properties.</p> <p>Kind: static method of <code>element</code> Returns: <code>Object</code> - The found element.  </p> Param Type Default Description elementSelector <code>String</code> The CSS selector describing the element. parentSelector <code>String</code> The CSS selector describing the parent element. [index] <code>Number</code> <code>0</code> The index of the element (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [includeHidden] <code>Boolean</code> <code>false</code> Specifies if hidden elements are also considered. By default it checks only for visible ones. <p>Example <pre><code>const elem = await nonUi5.element.getByParent(\".form01\", \".input01\");\n</code></pre> </p>"},{"location":"doc/#elementisvisibleelement-strict-boolean","title":"element.isVisible(element, [strict]) \u21d2 <code>Boolean</code>","text":"<p>Returns a boolean if the element is visible to the user.</p> <p>Kind: static method of <code>element</code> Returns: <code>Boolean</code> - Returns true or false.  </p> Param Type Default Description element <code>Object</code> The element. [strict] <code>Boolean</code> <code>true</code> If strict mode is enabled it will only return \"true\" if the element is visible on the page and within the viewport. If disabled, it will be sufficient if the element is visible on the page but not inside the current viewport. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"button01\");\nawait nonUi5.element.isVisible(elem);\n</code></pre> </p>"},{"location":"doc/#elementispresentelem-boolean","title":"element.isPresent(elem) \u21d2 <code>Boolean</code>","text":"<p>Returns a boolean if the element is present at the DOM or not. It might be hidden.</p> <p>Kind: static method of <code>element</code> Returns: <code>Boolean</code> - Returns true or false.  </p> Param Type Description elem <code>Object</code> The element. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"button01\");\nawait nonUi5.element.isPresent(elem);\n</code></pre> </p>"},{"location":"doc/#elementisenabledelem-boolean","title":"element.isEnabled(elem) \u21d2 <code>Boolean</code>","text":"<p>Returns a boolean if the element is enabled or not.</p> <p>Kind: static method of <code>element</code> Returns: <code>Boolean</code> - Returns true or false.  </p> Param Type Description elem <code>Element</code> The element. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"button01\");\nawait nonUi5.element.isEnabled(elem);\n</code></pre> </p>"},{"location":"doc/#elementispresentbycsscss-index-timeout-boolean","title":"element.isPresentByCss(css, [index], [timeout]) \u21d2 <code>boolean</code>","text":"<p>Returns a boolean if the element is present at the DOM or not.</p> <p>Kind: static method of <code>element</code> Returns: <code>boolean</code> - Returns true or false.  </p> Param Type Default Description css <code>String</code> The CSS selector describing the element. [index] <code>Number</code> <code>0</code> The index of the element (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await nonUi5.element.isPresentByCss(\".button01\");\n</code></pre> </p>"},{"location":"doc/#elementispresentbyxpathxpath-index-timeout-boolean","title":"element.isPresentByXPath(xpath, [index], [timeout]) \u21d2 <code>boolean</code>","text":"<p>Returns a boolean if the element is present at the DOM or not.</p> <p>Kind: static method of <code>element</code> </p> Param Type Default Description xpath <code>String</code> The XPath describing the element. [index] <code>Number</code> <code>0</code> The index of the element (in case there are more than one elements visible at the same time). [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await nonUi5.element.isPresentByXPath(\".//*[text()='Create']\");\n</code></pre> </p>"},{"location":"doc/#elementisselectedelem-boolean","title":"element.isSelected(elem) \u21d2 <code>boolean</code>","text":"<p>Returns a boolean if the element (e.g. checkbox) is selected.</p> <p>Kind: static method of <code>element</code> </p> Param Type Description elem <code>Object</code> The element. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"elem01\");\nconst isSelected = await nonUi5.element.isSelected(elem);\n</code></pre> </p>"},{"location":"doc/#elementgetattributevalueelem-attribute-string","title":"element.getAttributeValue(elem, [attribute]) \u21d2 <code>String</code>","text":"<p>Returns the attributes value of the passed element.</p> <p>Kind: static method of <code>element</code> Returns: <code>String</code> - The attributes value of the element.  </p> Param Type Description elem <code>Object</code> The element. [attribute] <code>String</code> The attribute of the element. Leave empty to return the inner HTML value of the element. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"elem01\");\nconst text = await nonUi5.element.getAttributeValue(elem, \"text\");\n</code></pre> Example <pre><code>const elem = await nonUi5.element.getById(\"elem02\");\nconst innerHTML = await nonUi5.element.getAttributeValue(elem);\n</code></pre> </p>"},{"location":"doc/#elementgetvalueelem-string","title":"element.getValue(elem) \u21d2 <code>String</code>","text":"<p>Returns the value of the passed element.</p> <p>Kind: static method of <code>element</code> Returns: <code>String</code> - The value of the element.  </p> Param Type Description elem <code>Object</code> The element. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"elem02\");\nconst innerHTML = await nonUi5.element.getValue(elem);\n</code></pre> </p>"},{"location":"doc/#elementgetcsspropertyvalueelementorselector-cssproperty-string","title":"element.getCssPropertyValue(elementOrSelector, cssProperty) \u21d2 <code>String</code>","text":"<p>Returns the value of the passed CSS property of the element.</p> <p>Kind: static method of <code>element</code> Returns: <code>String</code> - The value of the CSS property.  </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. cssProperty <code>String</code> The CSS property of the element to get value. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"elem01\");\nconst color = await nonUi5.element.getCssPropertyValue(elem, \"color\");\n</code></pre> </p>"},{"location":"doc/#elementsetinnerhtmlelem-string","title":"element.setInnerHTML(elem) \u21d2 <code>String</code>","text":"<p>Sets the innerHTML value of the given element. CAUTION: Only use this if filling the value in the normal way is not working and if it is unavoidable. Keep in mind, that a user is not able to perform such actions.</p> <p>Kind: static method of <code>element</code> Returns: <code>String</code> - The value to set.  </p> Param Type Description elem <code>Object</code> The element. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"text-editor\");\nawait nonUi5.element.setInnerHTML(elem, \"Hello World!\");\n</code></pre> </p>"},{"location":"doc/#elementhighlightelem-duration-color","title":"element.highlight(elem, [duration], [color])","text":"<p>Highlights the passed element.</p> <p>Kind: static method of <code>element</code> </p> Param Type Default Description elem <code>Object</code> The element. [duration] <code>Integer</code> <code>2000</code> The duration of the highlighting (ms). [color] <code>String</code> <code>\"red\"</code> The color of the highlighting (CSS value). <p>Example <pre><code>const elem = await nonUi5.element.getById(\"text01\");\nawait nonUi5.element.highlight(elem);\n</code></pre> Example <pre><code>const elem = await nonUi5.element.getById(\"text01\");\nawait nonUi5.element.highlight(elem, 3000, \"green\");\n</code></pre> </p>"},{"location":"doc/#nonui5navigation","title":"nonUi5.navigation","text":"<p>Kind: static class of <code>nonUi5</code> </p>"},{"location":"doc/#navigationnavigatetoapplicationrelativereference-refresh","title":"navigation.navigateToApplication(relativeReference, [refresh])","text":"<p>Navigates to the application via the passed relative reference. The path will be added to the baseUrl maintained in the config.</p> <p>Kind: static method of <code>navigation</code> </p> Param Type Default Description relativeReference <code>String</code> Relative reference of an application (path, query and fragment) [refresh] <code>Boolean</code> <code>true</code> Refresh the page after navigation. <p>Example <pre><code>await nonUi5.navigation.navigateToApplication(\"categories\");\n</code></pre> </p>"},{"location":"doc/#nonui5session","title":"nonUi5.session","text":"<p>Kind: static class of <code>nonUi5</code> </p>"},{"location":"doc/#sessionloginsapnetweaverusername-password-clickcontinue-iframecssselector","title":"session.loginSapNetWeaver(username, password, [clickContinue], [iframeCssSelector])","text":"<p>Login for SAP NetWebGUI form and specific username and password.</p> <p>Kind: static method of <code>session</code> </p> Param Type Default Description username <code>String</code> The username. password <code>String</code> The password. [clickContinue] <code>Boolean</code> <code>true</code> Specifies if the function will press continue if applicable. [iframeCssSelector] <code>String</code> <code>\"iframe\"</code> The specific iframe selector the login form is contained. <p>Example <pre><code>await nonUi5.session.loginSapNetWeaver(\"john\", \"abc123!\");\n</code></pre> </p>"},{"location":"doc/#nonui5userinteraction","title":"nonUi5.userInteraction","text":"<p>Kind: static class of <code>nonUi5</code> </p> <ul> <li>.userInteraction<ul> <li>.click(elementOrSelector, [timeout])</li> <li>.clickAndRetry(elementOrSelector, [timeout], [retries], [interval])</li> <li>.doubleClick(elementOrSelector, [timeout])</li> <li>.rightClick(elementOrSelector, [timeout])</li> <li>.check(elementOrSelector)</li> <li>.uncheck(elementOrSelector)</li> <li>.fill(elementOrSelector, value)</li> <li>.fillAndRetry(elementOrSelector, value, [retries], [interval])</li> <li>.clear(elementOrSelector)</li> <li>.clearAndRetry(elementOrSelector, [retries], [interval])</li> <li>.clearAndFill(elementOrSelector, value)</li> <li>.clearAndFillAndRetry(elementOrSelector, value, [retries], [interval], [verify])</li> <li>.mouseOverElement(elementOrSelector, [xOffset], [yOffset])</li> <li>.scrollToElement(elem, [alignment])</li> <li>.dragAndDrop(elementOrSelector, targetElem)</li> <li>.moveCursorAndClick(elementOrSelector)</li> <li>.clickElementInSvg(elementOrSelector, innerSelector)</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#userinteractionclickelementorselector-timeout","title":"userInteraction.click(elementOrSelector, [timeout])","text":"<p>Clicks on the passed element.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const elem = await nonUi5.element.getById(\"button01\");\nawait nonUi5.userInteraction.click(elem);\n</code></pre> </p>"},{"location":"doc/#userinteractionclickandretryelementorselector-timeout-retries-interval","title":"userInteraction.clickAndRetry(elementOrSelector, [timeout], [retries], [interval])","text":"<p>Clicks on the passed element, retries in case it fails.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). [retries] <code>Number</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Number</code> <code>5000</code> The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"button01\");\nawait nonUi5.userInteraction.clickAndRetry(elem);\n</code></pre> </p>"},{"location":"doc/#userinteractiondoubleclickelementorselector-timeout","title":"userInteraction.doubleClick(elementOrSelector, [timeout])","text":"<p>Double Clicks on the passed element.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const elem = await nonUi5.element.getById(\"button01\");\nawait nonUi5.userInteraction.doubleClick(elem);\n</code></pre> </p>"},{"location":"doc/#userinteractionrightclickelementorselector-timeout","title":"userInteraction.rightClick(elementOrSelector, [timeout])","text":"<p>Right Clicks on the passed element.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. [timeout] <code>Number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>const elem = await nonUi5.element.getById(\"button01\");\nawait nonUi5.userInteraction.rightClick(elem);\n</code></pre> </p>"},{"location":"doc/#userinteractioncheckelementorselector","title":"userInteraction.check(elementOrSelector)","text":"<p>Checks the given checkbox.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. <p>Example <pre><code>await nonUi5.userInteraction.check(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractionuncheckelementorselector","title":"userInteraction.uncheck(elementOrSelector)","text":"<p>Unchecks the given checkbox.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. <p>Example <pre><code>await nonUi5.userInteraction.uncheck(selector);\n</code></pre> </p>"},{"location":"doc/#userinteractionfillelementorselector-value","title":"userInteraction.fill(elementOrSelector, value)","text":"<p>Fills the given value into the passed input.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. value <code>String</code> | <code>Number</code> The value to enter. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"input01\");\nawait nonUi5.userInteraction.fill(elem, \"Service 01\");\n</code></pre> </p>"},{"location":"doc/#userinteractionfillandretryelementorselector-value-retries-interval","title":"userInteraction.fillAndRetry(elementOrSelector, value, [retries], [interval])","text":"<p>Fills the given value into the passed input, retries in case of a failure.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. value <code>String</code> | <code>Number</code> The value to enter. [retries] <code>Number</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Number</code> <code>5000</code> The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"input01\");\nawait nonUi5.userInteraction.fillAndRetry(elem, \"Service 01\");\n</code></pre> </p>"},{"location":"doc/#userinteractionclearelementorselector","title":"userInteraction.clear(elementOrSelector)","text":"<p>Clears the passed input element.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"input01\");\nawait nonUi5.userInteraction.clear(elem);\n</code></pre> </p>"},{"location":"doc/#userinteractionclearandretryelementorselector-retries-interval","title":"userInteraction.clearAndRetry(elementOrSelector, [retries], [interval])","text":"<p>Clears the passed input element, retries in case of a failure.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. [retries] <code>Number</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Number</code> <code>5000</code> The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"input01\", 10000);\nawait nonUi5.userInteraction.clearAndRetry(elem);\n</code></pre> </p>"},{"location":"doc/#userinteractionclearandfillelementorselector-value","title":"userInteraction.clearAndFill(elementOrSelector, value)","text":"<p>Clears and fills the passed input element.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. value <code>String</code> | <code>Number</code> The value to enter in. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"input01\");\nawait nonUi5.userInteraction.clearAndFill(elem, \"Service 01\");\n</code></pre> </p>"},{"location":"doc/#userinteractionclearandfillandretryelementorselector-value-retries-interval-verify","title":"userInteraction.clearAndFillAndRetry(elementOrSelector, value, [retries], [interval], [verify])","text":"<p>Clears and fills the passed input, retries in case it fails.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. value <code>String</code> | <code>Number</code> The value to enter in. [retries] <code>Number</code> <code>3</code> The number of retries, can be set in config for all functions under params stepsRetries. [interval] <code>Number</code> <code>5000</code> The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. [verify] <code>Boolean</code> <code>true</code> Specifies if the filled value should be verified. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"input01\");\nawait nonUi5.userInteraction.clearAndFillAndRetry(elem, \"Service 01\");\n</code></pre> </p>"},{"location":"doc/#userinteractionmouseoverelementelementorselector-xoffset-yoffset","title":"userInteraction.mouseOverElement(elementOrSelector, [xOffset], [yOffset])","text":"<p>Moves the cursor/focus to the passed element.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. [xOffset] <code>Number</code> X offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element. [yOffset] <code>Number</code> Y offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"dropdown42\");\nawait nonUi5.userInteraction.mouseOverElement(elem);\n</code></pre> </p>"},{"location":"doc/#userinteractionscrolltoelementelem-alignment","title":"userInteraction.scrollToElement(elem, [alignment])","text":"<p>Scrolls an element into view.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description elem <code>Element</code> The target element to scroll to. [alignment] <code>String</code> | <code>Object</code> <code>\"center\"</code> The alignment option for scrolling.   Can be one of: \"start\", \"center\", \"end\", \"nearest\", or an object with properties:   - block: Vertical alignment (\"start\", \"center\", \"end\", \"nearest\").   - inline: Horizontal alignment (\"start\", \"center\", \"end\", \"nearest\"). <p>Example <pre><code>// Scroll to element with center alignment.\nconst elem = await nonUi5.element.getById(\"footer01\");\nawait nonUi5.userInteraction.scrollToElement(elem, \"center\");\n</code></pre> Example <pre><code>// Scroll to element with custom alignment.\nconst elem = await nonUi5.element.getById(\"footer01\");\nconst alignment = {\n  block: \"start\",\n  inline: \"center\"\n};\nawait nonUi5.userInteraction.scrollToElement(elem, alignment);\n</code></pre> </p>"},{"location":"doc/#userinteractiondraganddropelementorselector-targetelem","title":"userInteraction.dragAndDrop(elementOrSelector, targetElem)","text":"<p>Drags and drops the given element to the given target element.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. targetElem <code>Object</code> The target element to drop the element. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"drag01\");\n</code></pre> Example <pre><code>const targetElem = await nonUi5.element.getById(\"drop02\");\nawait nonUi5.userInteraction.dragAndDrop(elem, targetElem);\n</code></pre> </p>"},{"location":"doc/#userinteractionmovecursorandclickelementorselector","title":"userInteraction.moveCursorAndClick(elementOrSelector)","text":"<p>Moves the cursor to the target element and clicks on it. Can be used for charts.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element or CSS selector describing the element. <p>Example <pre><code>const elem = await nonUi5.element.getById(\"chartPartToClick\");\nawait nonUi5.userInteraction.moveCursorAndClick(elem);\n</code></pre> </p>"},{"location":"doc/#userinteractionclickelementinsvgelementorselector-innerselector","title":"userInteraction.clickElementInSvg(elementOrSelector, innerSelector)","text":"<p>Clicks on an inner element within a SVG element.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Description elementOrSelector <code>Object</code> | <code>string</code> The SVG element or CSS selector describing the element. innerSelector <code>String</code> The CSS selector describing the inner element to be clicked. <p>Example <pre><code>const svgElem = await nonUi5.element.getByCss(\"svg\");\nconst innerSelector = \"circle:nth-child(6)\";\nawait nonUi5.userInteraction.clickElementInSvg(svgElem, innerSelector);\n</code></pre> </p>"},{"location":"doc/#service","title":"service","text":"<p>Global namespace for service modules.</p> <p>Kind: global constant  </p> <ul> <li>service<ul> <li>.odata<ul> <li>.init(url, username, password, [loggingEnabled], [params], [authType], [headers]) \u21d2 <code>Object</code></li> <li>.get(srv, entitySet, keys, [raw], [headers], [queryParams]) \u21d2 <code>Promise</code></li> <li>.getEntitySet(srv, entitySet, [filterString], [selectionFields], [queryParams]) \u21d2 <code>Promise</code></li> <li>.post(srv, entitySet, payload, [raw], [headers], [queryParams]) \u21d2 <code>Promise</code></li> <li>.merge(srv, entitySet, payload, [headers]) \u21d2 <code>Promise</code></li> <li>.delete(srv, entitySet, options, [headers]) \u21d2 <code>Promise</code></li> <li>.callFunctionImport(srv, functionImportName, options) \u21d2 <code>Promise</code></li> <li>.isFeatureToggleActivated(srv, featureName) \u21d2 <code>Promise</code></li> <li>.getOutputManagementPdfStream(outputConf, url, username, password)</li> <li>.readPdfFromDirectUrl(url, [username], [password], [isSaml])</li> </ul> </li> <li>.rest<ul> <li>.init([customConfig]) \u21d2 <code>Object</code></li> <li>.get(uri, [config]) \u21d2 <code>Object</code></li> <li>.post(uri, payload, [config]) \u21d2 <code>Object</code></li> <li>.delete(uri, [config]) \u21d2 <code>Object</code></li> <li>.patch(uri, payload, [config]) \u21d2 <code>Object</code></li> <li>.put(uri, payload, [config]) \u21d2 <code>Object</code></li> </ul> </li> </ul> </li> </ul> <p></p>"},{"location":"doc/#serviceodata","title":"service.odata","text":"<p>Kind: static class of <code>service</code> </p> <ul> <li>.odata<ul> <li>.init(url, username, password, [loggingEnabled], [params], [authType], [headers]) \u21d2 <code>Object</code></li> <li>.get(srv, entitySet, keys, [raw], [headers], [queryParams]) \u21d2 <code>Promise</code></li> <li>.getEntitySet(srv, entitySet, [filterString], [selectionFields], [queryParams]) \u21d2 <code>Promise</code></li> <li>.post(srv, entitySet, payload, [raw], [headers], [queryParams]) \u21d2 <code>Promise</code></li> <li>.merge(srv, entitySet, payload, [headers]) \u21d2 <code>Promise</code></li> <li>.delete(srv, entitySet, options, [headers]) \u21d2 <code>Promise</code></li> <li>.callFunctionImport(srv, functionImportName, options) \u21d2 <code>Promise</code></li> <li>.isFeatureToggleActivated(srv, featureName) \u21d2 <code>Promise</code></li> <li>.getOutputManagementPdfStream(outputConf, url, username, password)</li> <li>.readPdfFromDirectUrl(url, [username], [password], [isSaml])</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#odatainiturl-username-password-loggingenabled-params-authtype-headers-object","title":"odata.init(url, username, password, [loggingEnabled], [params], [authType], [headers]) \u21d2 <code>Object</code>","text":"<p>Initializes the OData Service. XCSRF-Token will be automatically fetched and stored in the service instance. Cookies will also automatically assembled and stored in the service instance.</p> <p>Kind: static method of <code>odata</code> Returns: <code>Object</code> - The initialized service object.  </p> Param Type Default Description url <code>String</code> The base url of the service. username <code>String</code> The username to authenticate the service. password <code>String</code> The password of the username. [loggingEnabled] <code>Boolean</code> <code>false</code> The boolean param to control whether user wants to see logs during build run. [params] <code>Object</code> <code>{}</code> JSON object with key-value pairs of parameter names and corresponding values. By default we send {  \"client\": \"715\",  \"documentation\": [\"heading\", \"quickinfo\"],  \"language\": \"EN\" } These can be overridden by sending params as JSON object with additional params as shown in example. [authType] <code>String</code> authentication type, in case you want to override the default SAML authentication. Set this to \"basic\", to use basic authentication for communication users for whom SAML login doesn't work. Or \"none\" for no authentication. [headers] <code>Object</code> JSON object with key-value pairs of optional headers. <p>Example <pre><code>const url = \"&lt;urlToSystem&gt;/sap/opu/odata/sap/API_PURCHASEORDER_PROCESS_SRV/\";\nconst params = {\n \"saml2\": \"disabled\",\n \"language\": \"de\"\n}\nconst srv = await service.odata.init(url, user, password, false, params);\n</code></pre> Example <pre><code>const base64Credentials = Buffer.from(`${user}:${password}`).toString(\"base64\");\nconst authHeaders = {\n  \"Authorization\": `Basic ${base64Credentials}`,\n  \"DwC-Tenant\": tenant\n};\n\nconst srv = await service.odata.init(url, user, password, true, params, \"headers\", authHeaders);\n</code></pre> </p>"},{"location":"doc/#odatagetsrv-entityset-keys-raw-headers-queryparams-promise","title":"odata.get(srv, entitySet, keys, [raw], [headers], [queryParams]) \u21d2 <code>Promise</code>","text":"<p>Sends a GET request to retrieve data from the specified OData entity set.</p> <p>Kind: static method of <code>odata</code> Returns: <code>Promise</code> - A Promise that resolves to the response data.  </p> Param Type Default Description srv <code>Object</code> An instance of the service. entitySet <code>String</code> The entity set from which data is to be retrieved. keys <code>Object</code> The required keys for the GET request. [raw] <code>Boolean</code> <code>false</code> Specifies whether the response should include all header contents. [headers] <code>Object</code> Optional headers to be included in the request. [queryParams] <code>Object</code> JSON object of key value pairs of custom query parameters. <p>Example <pre><code>const url = \"&lt;baseUrl&gt;/sap/opu/odata/sap/API_PURCHASEORDER_PROCESS_SRV/\";\nconst srv = await service.odata.init(url, user, password);\nconst keys = {\n  PurchaseOrder: \"4100000000\"\n};\nconst queryParams = {\n \"$top\" : 5,\n \"$skip\" : 10,\n};\nconst headers = {\n  'X-Custom-Header': 'foobar'\n}\nconst res = await service.odata.get(srv, \"A_PurchaseOrder\", keys, false, headers, queryParams);\n</code></pre> </p>"},{"location":"doc/#odatagetentitysetsrv-entityset-filterstring-selectionfields-queryparams-promise","title":"odata.getEntitySet(srv, entitySet, [filterString], [selectionFields], [queryParams]) \u21d2 <code>Promise</code>","text":"<p>GET's the EntitySet collection.</p> <p>Kind: static method of <code>odata</code> Returns: <code>Promise</code> - A Promise that resolves to the response data.  </p> Param Type Description srv <code>Object</code> Instance of the service entitySet <code>String</code> The entitySet you want to GET from. [filterString] <code>String</code> The filters to be applied on get query [selectionFields] <code>String</code> comma separated list of fields to be selected [queryParams] <code>Object</code> JSON object of key value pairs of custom query parameters. <p>Example <pre><code>const url = \"&lt;baseUrl&gt;/sap/opu/odata/sap/API_PURCHASEORDER_PROCESS_SRV/\";\nsrv = await service.odata.init(url, user, password);\n\nlet filterString = \"Status eq '01'\";\nlet res = await service.odata.getEntitySet(srv, \"A_PurchaseOrder\", filterString);\n\nlet select = \"CentralPurchaseContract,PurchasingProcessingStatus\" ;\nlet res = await service.odata.getEntitySet(srv, \"A_PurchaseOrder\", filterString, select);\n\nlet queryParams = {\n \"$top\" : 5,\n \"$skip\" : 10,\n};\nlet res = await service.odata.getEntitySet(srv, \"A_PurchaseOrder\", filterString, select, queryParams);\n</code></pre> </p>"},{"location":"doc/#odatapostsrv-entityset-payload-raw-headers-queryparams-promise","title":"odata.post(srv, entitySet, payload, [raw], [headers], [queryParams]) \u21d2 <code>Promise</code>","text":"<p>Sends a POST request to retrieve data from the specified OData entity set for the given payload.</p> <p>Kind: static method of <code>odata</code> Returns: <code>Promise</code> - A Promise that resolves to the response data.  </p> Param Type Default Description srv <code>Object</code> Instance of the service entitySet <code>String</code> The entitySet you want to POST against. payload <code>Object</code> The payload of the POST request. [raw] <code>Boolean</code> <code>false</code> Specifies whether the response should include all header contents. [headers] <code>Object</code> Optional headers to be included in the request. [queryParams] <code>Object</code> JSON object of key value pairs of custom query parameters. <p>Example <pre><code>const payload = {\n \"PurchaseOrder\": \"4500007108\",\n \"DraftUUID\": \"00000000-0000-0000-0000-000000000000\",\n \"IsActiveEntity\": \"true\"\n};\nconst res = await service.odata.post(srv, \"A_PurchaseOrder\", payload);\n</code></pre> </p>"},{"location":"doc/#odatamergesrv-entityset-payload-headers-promise","title":"odata.merge(srv, entitySet, payload, [headers]) \u21d2 <code>Promise</code>","text":"<p>@description Sends a MERGE request to merge data from the specified OData entity set for the given payload.</p> <p>Kind: static method of <code>odata</code> Returns: <code>Promise</code> - A Promise that resolves to the response data.  </p> Param Type Description srv <code>Object</code> Instance of the service entitySet <code>String</code> The entitySet you want to MERGE in. payload <code>Object</code> The payload of the MERGE request. [headers] <code>Object</code> Optional headers to be included in the request. <p>Example <pre><code>const res = await service.odata.merge(srv, \"A_PurchaseOrderScheduleLine\", {\n \"PurchasingDocument\": \"4500007108\",\n \"PurchasingDocumentItem\": \"10\",\n \"ScheduleLine\": \"1\",\n \"ScheduleLineDeliveryDate\": new Date()\n};\n</code></pre> </p>"},{"location":"doc/#odatadeletesrv-entityset-options-headers-promise","title":"odata.delete(srv, entitySet, options, [headers]) \u21d2 <code>Promise</code>","text":"<p>Sends a DELETE request to the specified OData entity set.</p> <p>Kind: static method of <code>odata</code> Returns: <code>Promise</code> - A Promise that resolves to the response data.  </p> Param Type Description srv <code>Object</code> Instance of the service. entitySet <code>String</code> The entitySet you want to DELETE. options <code>Object</code> The options for the DELETE request. [headers] <code>Object</code> Optional headers to be included in the request. <p>Example <pre><code>const options = {\n \"PurchaseOrder\": \"\",\n \"DraftUUID\": draftUUID,\n \"IsActiveEntity\": false\n};\nconst res = await service.odata.delete(srv, \"C_PurchaseOrderTP\", options);\n</code></pre> </p>"},{"location":"doc/#odatacallfunctionimportsrv-functionimportname-options-promise","title":"odata.callFunctionImport(srv, functionImportName, options) \u21d2 <code>Promise</code>","text":"<p>Sends a function import request to the OData service instance.</p> <p>Kind: static method of <code>odata</code> Returns: <code>Promise</code> - A Promise that resolves to the response data.  </p> Param Type Description srv <code>Object</code> Instance of the service. functionImportName <code>String</code> Name of Function Import. options <code>Object</code> Parameters for function import. <p>Example <pre><code>const options = {\n CentralRequestForQuotation : \"7500000026\",\n Supplier : \"100006\"\n};\nconst res = await service.odata.callFunctionImport(srv, \"Cancel\", options);\n</code></pre> </p>"},{"location":"doc/#odataisfeaturetoggleactivatedsrv-featurename-promise","title":"odata.isFeatureToggleActivated(srv, featureName) \u21d2 <code>Promise</code>","text":"<p>Checks if a feature toggle is switched on or off.</p> <p>Kind: static method of <code>odata</code> Returns: <code>Promise</code> - A Promise that resolves to a bool value.  </p> Param Type Description srv <code>Object</code> Instance of the service featureName <code>String</code> The name of the feature you want know the status of. <p>Example <pre><code>const url = browser.params.systemUrl + \"/sap/opu/odata/SAP/CA_FM_FEATURE_TOGGLE_STATUS_SRV/\";\nconst srv = await service.odata.init(url, user, password);\nlet isFeatureActive = await service.odata.isFeatureToggleActivated(srv, \"MM_PUR_PO_BATCHES_IN_MANAGE_PO\");\n</code></pre> </p>"},{"location":"doc/#odatagetoutputmanagementpdfstreamoutputconf-url-username-password","title":"odata.getOutputManagementPdfStream(outputConf, url, username, password)","text":"<p>returns a stream of output management pdf file.</p> <p>Kind: static method of <code>odata</code> </p> Param Type Description outputConf <code>Object</code> Configuration for the output management pdf. url <code>String</code> system url username <code>String</code> username for login password <code>String</code> password for login <p>Example <pre><code>const outputConf =\n ApplObjectType: \"REQUEST_FOR_QUOTATION\",\n ApplObjectId: \"7000002653\",\n ItemId: \"1\"\n};\nconst pdfStream = await service.odata.getOutputManagementPdfStream(outputConf, url, user, password);\n</code></pre> </p>"},{"location":"doc/#odatareadpdffromdirecturlurl-username-password-issaml","title":"odata.readPdfFromDirectUrl(url, [username], [password], [isSaml])","text":"<p>returns a stream of pdf file which is part of attachment.</p> <p>Kind: static method of <code>odata</code> </p> Param Type Default Description url <code>String</code> system url [username] <code>String</code> username for login [password] <code>String</code> password for login [isSaml] <code>Boolean</code> <code>false</code> use SAML login if true <p>Example <pre><code>const url = \"https://domain.com/getPdfFile\";\nconst pdfStream = await service.odata.readPdfFromDirectUrl(url, \"username\", \"Password\");\n</code></pre> </p>"},{"location":"doc/#servicerest","title":"service.rest","text":"<p>Kind: static class of <code>service</code> </p> <ul> <li>.rest<ul> <li>.init([customConfig]) \u21d2 <code>Object</code></li> <li>.get(uri, [config]) \u21d2 <code>Object</code></li> <li>.post(uri, payload, [config]) \u21d2 <code>Object</code></li> <li>.delete(uri, [config]) \u21d2 <code>Object</code></li> <li>.patch(uri, payload, [config]) \u21d2 <code>Object</code></li> <li>.put(uri, payload, [config]) \u21d2 <code>Object</code></li> </ul> </li> </ul> <p></p>"},{"location":"doc/#restinitcustomconfig-object","title":"rest.init([customConfig]) \u21d2 <code>Object</code>","text":"<p>Returns an axios instance for custom axios handling.</p> <p>Kind: static method of <code>rest</code> Returns: <code>Object</code> - The axios instance.  </p> Param Type Default Description [customConfig] <code>Object</code> <code>{}</code> Custom config for axios. If not specified axios defaults will be taken. <p>Example <pre><code>const customConfig = {\n      baseURL: 'https://some-domain.com/api/',\n      timeout: 1000,\n      headers: {\n        'X-Custom-Header': 'foobar'\n      }\nconst axios = service.rest.init(customConfig);\n</code></pre> </p>"},{"location":"doc/#restgeturi-config-object","title":"rest.get(uri, [config]) \u21d2 <code>Object</code>","text":"<p>makes a GET request.</p> <p>Kind: static method of <code>rest</code> Returns: <code>Object</code> - The response of the GET request.  </p> Param Type Description uri <code>String</code> The uri to the data source you want to GET. [config] <code>Object</code> The config options for the request. <p>Example <pre><code>const uri = https://api.predic8.de/shop/products/\";\nlet res = await service.rest.get(uri);\ncommon.assertion.expectEqual(res.data.title, \"qmate-service\");\n</code></pre> </p>"},{"location":"doc/#restposturi-payload-config-object","title":"rest.post(uri, payload, [config]) \u21d2 <code>Object</code>","text":"<p>makes a POST request.</p> <p>Kind: static method of <code>rest</code> Returns: <code>Object</code> - The response of the POST request.  </p> Param Type Description uri <code>String</code> The uri to the data source you want to POST against. payload <code>Object</code> The data you want to POST against your entity set. [config] <code>Object</code> The config options for the request. <p>Example <pre><code>const payload = {\n          id: 99,\n          title: \"qmate-service\",\n          author: \"marvin\"\n        };\n        const config = {\n          headers: {\n            \"X-CSRF-TOKEN\": \"&lt;CSRF TOKEN&gt;\",\n            \"Cookie\": \"&lt;COOKIE&gt;\",\n            \"Content-Type\": \"application/json\"\n          }\n        };\n        let res = await service.rest.post(`${browser.config.baseUrl}/posts/99`, payload, config);\n</code></pre> </p>"},{"location":"doc/#restdeleteuri-config-object","title":"rest.delete(uri, [config]) \u21d2 <code>Object</code>","text":"<p>makes a DELETE request.</p> <p>Kind: static method of <code>rest</code> Returns: <code>Object</code> - The response of the DELETE request.  </p> Param Type Description uri <code>String</code> The uri to the data source you want to DELETE. [config] <code>Object</code> The config options for the request. <p>Example <pre><code>const config = {\n          auth: {\n            \"username\": \"&lt;username&gt;\",\n            \"password\": \"&lt;password&gt;\"\n          }\n        };\n        let res = await service.rest.delete(`${browser.config.baseUrl}/posts/99`, config);\n</code></pre> </p>"},{"location":"doc/#restpatchuri-payload-config-object","title":"rest.patch(uri, payload, [config]) \u21d2 <code>Object</code>","text":"<p>makes a PATCH request.</p> <p>Kind: static method of <code>rest</code> Returns: <code>Object</code> - The response of the PATCH request.  </p> Param Type Description uri <code>String</code> The uri to the data source you want to PATCH. payload <code>Object</code> The data to be used for updating the entity. [config] <code>Object</code> The config options for the request. <p>Example <pre><code>const config = {\n          auth: {\n            \"username\": \"&lt;username&gt;\",\n            \"password\": \"&lt;password&gt;\"\n          }\n        };\n        const payload = {\n          \"title\": \"patched-qmate-service\",\n          \"author\": \"qmate-tester\"\n        },\n        let res = await service.rest.patch(`${browser.config.baseUrl}/posts/99`, payload, config);\n</code></pre> </p>"},{"location":"doc/#restputuri-payload-config-object","title":"rest.put(uri, payload, [config]) \u21d2 <code>Object</code>","text":"<p>makes a PUT request.</p> <p>Kind: static method of <code>rest</code> Returns: <code>Object</code> - The response of the PUT request.  </p> Param Type Description uri <code>String</code> The uri to the data source you want to PUT. payload <code>Object</code> The data to be used for updating the entity. [config] <code>Object</code> The config options for the request. <p>Example <pre><code>const config = {\n          auth: {\n            \"username\": \"&lt;username&gt;\",\n            \"password\": \"&lt;password&gt;\"\n          }\n        }\n        const payload = {\n          \"id\": 99,\n          \"title\": \"put-qmate-service\",\n          \"author\": \"qmate-tester\"\n        },\n        let res = await service.rest.put(`${browser.config.baseUrl}/posts/99`, payload, config);\n</code></pre> </p>"},{"location":"doc/#mobile","title":"mobile","text":"<p>Global namespace for mobile modules.</p> <p>Kind: global constant  </p> <ul> <li>mobile<ul> <li>.android<ul> <li>.pressKeyByName(keyName) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.pressKeyByCode(keyCode) \u21d2 <code>Promise.&lt;void&gt;</code></li> </ul> </li> <li>.device<ul> <li>.isAppInstalled(appPackageOrBundleId) \u21d2 <code>boolean</code></li> <li>.installApp(appPath) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.switchToContext([targetContext], [timeout]) \u21d2 <code>Promise.&lt;boolean&gt;</code></li> <li>.getTargetContextIfAvailable([targetContext], [timeout]) \u21d2 <code>Promise.&lt;(string|null)&gt;</code></li> <li>.closeApplication() \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.queryAppState(appPackageOrBundleId) \u21d2 <code>Promise.&lt;number&gt;</code></li> <li>.launchApp(appPackageOrBundleId) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.switchToLandscapeOrientation() \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.switchToPortraitOrientation() \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.getCurrentOrientation() \u21d2 <code>Promise.&lt;Orientation&gt;</code></li> <li>.hideKeyboard(strategy, key, keyCode, [timeout]) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.isKeyboardVisible() \u21d2 <code>Promise.&lt;boolean&gt;</code></li> <li>.isPlatformSupported() \u21d2 <code>Promise.&lt;boolean&gt;</code></li> </ul> </li> <li>.element<ul> <li>.isVisible(element, [strict]) \u21d2 <code>boolean</code></li> <li>.isPresent(element) \u21d2 <code>boolean</code></li> <li>.waitToBePresent(selector, [timeout]) \u21d2 <code>boolean</code></li> <li>.waitToBeVisible(selector, [timeout]) \u21d2 <code>boolean</code></li> <li>.waitToBeClickable(selector, [timeout]) \u21d2 <code>boolean</code></li> <li>.isSelected(elementOrSelector) \u21d2 <code>boolean</code></li> <li>.waitToBeEnabled(selector, [timeout]) \u21d2 <code>boolean</code></li> </ul> </li> <li>.gestures<ul> <li>.swipe(startX, startY, endX, endY, [duration]) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.tap(coordX, coordY) \u21d2 <code>Promise.&lt;void&gt;</code></li> </ul> </li> <li>.ios</li> <li>.userInteraction<ul> <li>.tap(elementOrSelector, [timeout])</li> <li>.check(elementOrSelector, [timeout])</li> <li>.uncheck(elementOrSelector, [timeout])</li> <li>.doubleTap(elementOrSelector, [timeout]) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.fill(elementOrSelector, value, [timeout]) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.clearAndFill(elementOrSelector, value, [timeout]) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.clear(elementOrSelector, [timeout]) \u21d2 <code>Promise.&lt;void&gt;</code></li> </ul> </li> </ul> </li> </ul> <p></p>"},{"location":"doc/#mobileandroid","title":"mobile.android","text":"<p>Kind: static class of <code>mobile</code> </p> <ul> <li>.android<ul> <li>.pressKeyByName(keyName) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.pressKeyByCode(keyCode) \u21d2 <code>Promise.&lt;void&gt;</code></li> </ul> </li> </ul> <p></p>"},{"location":"doc/#androidpresskeybynamekeyname-promisevoid","title":"android.pressKeyByName(keyName) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Simulate pressing a hardware key on the android device (e.g., back button, home button, etc.),</p> <p>Kind: static method of <code>android</code> </p> Param Type Description keyName <code>string</code> The name of the key (e.g., \"back\", \"home\", \"volumeUp\", etc.) <p>Example <pre><code>await mobile.android.pressKeyByName(\"back\");\nawait mobile.android.pressKeyByName(\"home\");\n</code></pre> </p>"},{"location":"doc/#androidpresskeybycodekeycode-promisevoid","title":"android.pressKeyByCode(keyCode) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Simulate pressing a hardware key on the android device (e.g., back button, home button, etc.),</p> <p>Kind: static method of <code>android</code> See: https://developer.android.com/reference/android/view/KeyEvent  </p> Param Type Description keyCode <code>string</code> The code of the key (e.g., 4 (back), 3 (home) , etc.) <p>Example <pre><code>await mobile.android.pressKeyByCode(4);\n</code></pre> </p>"},{"location":"doc/#mobiledevice","title":"mobile.device","text":"<p>Kind: static class of <code>mobile</code> </p> <ul> <li>.device<ul> <li>.isAppInstalled(appPackageOrBundleId) \u21d2 <code>boolean</code></li> <li>.installApp(appPath) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.switchToContext([targetContext], [timeout]) \u21d2 <code>Promise.&lt;boolean&gt;</code></li> <li>.getTargetContextIfAvailable([targetContext], [timeout]) \u21d2 <code>Promise.&lt;(string|null)&gt;</code></li> <li>.closeApplication() \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.queryAppState(appPackageOrBundleId) \u21d2 <code>Promise.&lt;number&gt;</code></li> <li>.launchApp(appPackageOrBundleId) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.switchToLandscapeOrientation() \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.switchToPortraitOrientation() \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.getCurrentOrientation() \u21d2 <code>Promise.&lt;Orientation&gt;</code></li> <li>.hideKeyboard(strategy, key, keyCode, [timeout]) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.isKeyboardVisible() \u21d2 <code>Promise.&lt;boolean&gt;</code></li> <li>.isPlatformSupported() \u21d2 <code>Promise.&lt;boolean&gt;</code></li> </ul> </li> </ul> <p></p>"},{"location":"doc/#deviceisappinstalledapppackageorbundleid-boolean","title":"device.isAppInstalled(appPackageOrBundleId) \u21d2 <code>boolean</code>","text":"<p>Check if the application identified by its Package name/Bundle ID is installed on the device.</p> <p>Kind: static method of <code>device</code> Returns: <code>boolean</code> - - Returns <code>true</code> if specified app package/bundled installed in the device, or <code>false</code>.  </p> Param Type Description appPackageOrBundleId <code>string</code> Android package Name, or iOS bundle Id. <p>Example <pre><code>await mobile.device.isAppInstalled(\"com.google.android.apps.maps\");\nawait mobile.device.isAppInstalled(\"com.apple.AppStore\")\n</code></pre> </p>"},{"location":"doc/#deviceinstallappapppath-promisevoid","title":"device.installApp(appPath) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Install the appropriate app based on the platform the test is being executed on.</p> <p>Kind: static method of <code>device</code> </p> Param Type Description appPath <code>string</code> Path of the app(.apk, .ipa) <p>Example <pre><code>await mobile.device.installApp(\"/path/to/your/app.apk\");\nawait mobile.device.installApp(\"/path/to/your/app.ipa\");\n</code></pre> </p>"},{"location":"doc/#deviceswitchtocontexttargetcontext-timeout-promiseboolean","title":"device.switchToContext([targetContext], [timeout]) \u21d2 <code>Promise.&lt;boolean&gt;</code>","text":"<p>Switch to the specified( WEBVIEW | NATIVE_APP ) context if available.</p> <p>Kind: static method of <code>device</code> Returns: <code>Promise.&lt;boolean&gt;</code> - Returns <code>true</code> if the context is successfully switched, otherwise <code>false</code>.  </p> Param Type Default Description [targetContext] <code>string</code> <code>\"'WEBVIEW'\"</code> The name of the target context. [timeout] <code>number</code> <code>5000</code> Maximum time to wait for the web context to appear, milliseconds. <p>Example <pre><code>await mobile.device.switchToContext();\nawait mobile.device.switchToContext(\"NATIVE_APP\", 1000);\n</code></pre> </p>"},{"location":"doc/#devicegettargetcontextifavailabletargetcontext-timeout-promisestringnull","title":"device.getTargetContextIfAvailable([targetContext], [timeout]) \u21d2 <code>Promise.&lt;(string|null)&gt;</code>","text":"<p>Returns the specified target context if available within a given timeout.</p> <p>This method retrieves the list of available contexts and determines if a context that matches the <code>targetContext</code> string is present. If the target context is found, it returns the context name; otherwise, it returns <code>null</code>.</p> <p>Kind: static method of <code>device</code> Returns: <code>Promise.&lt;(string|null)&gt;</code> - The name of the target context if found, or <code>null</code> if   the context is not available within the timeout.  </p> Param Type Default Description [targetContext] <code>string</code> <code>\"'WEBVIEW'\"</code> The name of the target context to check for.   Common examples are <code>WEBVIEW</code> or <code>NATIVE_APP</code>. [timeout] <code>number</code> <code>5000</code> The maximum time, in milliseconds, to wait for the target   context to become available. <p>Example <pre><code>const context = await getTargetContextIfAvailable(\"WEBVIEW\", 10000);\nconst context = await getTargetContextIfAvailable(\"NATIVE_APP\", 10000);\n</code></pre> </p>"},{"location":"doc/#devicecloseapplication-promisevoid","title":"device.closeApplication() \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Close the currently active mobile application.</p> <p>Kind: static method of <code>device</code> Example <pre><code>await mobile.device.closeApplication();\n</code></pre> </p>"},{"location":"doc/#devicequeryappstateapppackageorbundleid-promisenumber","title":"device.queryAppState(appPackageOrBundleId) \u21d2 <code>Promise.&lt;number&gt;</code>","text":"<p>Queries the state of the application (e.g., running, background, not installed) on the mobile device(Android or iOS).</p> <p>Kind: static method of <code>device</code> Returns: <code>Promise.&lt;number&gt;</code> - - The app state:  0 - Not running,  1 - Not installed,  2 - Running in the background (not suspended),  3 - Running in the background (suspended),  4 - Running in the foreground.  </p> Param Type Description appPackageOrBundleId <code>string</code> Package name (Android) or bundle ID (iOS) of the application. <p>Example <pre><code>await mobile.device.queryAppState(\"com.google.android.apps.maps\");\nawait mobile.device.queryAppState(\"com.apple.AppStore\");\n</code></pre> </p>"},{"location":"doc/#devicelaunchappapppackageorbundleid-promisevoid","title":"device.launchApp(appPackageOrBundleId) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Launches the app for both iOS and Android with a parameterized app identifier.</p> <p>Kind: static method of <code>device</code> Returns: <code>Promise.&lt;void&gt;</code> - Resolves when the app is successfully launched.  </p> Param Type Description appPackageOrBundleId <code>string</code> The Android package name or iOS bundle ID of the application. <p>Example <pre><code>await mobile.device.launchApp(\"com.google.android.apps.maps\");\nawait mobile.device.launchApp(\"com.apple.AppStore\");\n</code></pre> </p>"},{"location":"doc/#deviceswitchtolandscapeorientation-promisevoid","title":"device.switchToLandscapeOrientation() \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Switches the device orientation to landscape mode.</p> <p>Kind: static method of <code>device</code> Returns: <code>Promise.&lt;void&gt;</code> - Resolves when the orientation is successfully switched. Example <pre><code>await mobile.device.switchToLandscapeOrientation();\n</code></pre> </p>"},{"location":"doc/#deviceswitchtoportraitorientation-promisevoid","title":"device.switchToPortraitOrientation() \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Switches the device orientation to portrait mode.</p> <p>Kind: static method of <code>device</code> Returns: <code>Promise.&lt;void&gt;</code> - Resolves when the orientation is successfully switched. Example <pre><code>await mobile.device.switchToPortraitOrientation();\n</code></pre> </p>"},{"location":"doc/#devicegetcurrentorientation-promiseorientation","title":"device.getCurrentOrientation() \u21d2 <code>Promise.&lt;Orientation&gt;</code>","text":"<p>Returns the device current orientation (PORTRAIT or LANDSCAPE)</p> <p>Kind: static method of <code>device</code> Returns: <code>Promise.&lt;Orientation&gt;</code> - The current device orientation. Example <pre><code>await mobile.device.getCurrentOrientation();\n</code></pre> </p>"},{"location":"doc/#devicehidekeyboardstrategy-key-keycode-timeout-promisevoid","title":"device.hideKeyboard(strategy, key, keyCode, [timeout]) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Hides the keyboard on both Android and iOS using specific strategies with timeout.</p> <p>Kind: static method of <code>device</code> </p> Param Type Default Description strategy <code>string</code> Strategy to use for hiding the keyboard ('pressKey', 'tapOutside', 'swipeDown'). key <code>string</code> Key to press if using the 'pressKey' strategy (e.g., 'Done', 'Enter'). keyCode <code>number</code> Key code for Android (optional). [timeout] <code>number</code> <code>5000</code> Timeout in milliseconds for retrying to hide the keyboard. <p>Example <pre><code>await mobile.device.hideKeyboard();\nawait mobile.device.hideKeyboard('tapOutside');\nawait mobile.device.hideKeyboard('swipeDown');\n//Android only, Sends a specific key code, like 66 for \"Enter.\"\nawait mobile.device.hideKeyboard('pressKey', undefined, 66);\nawait mobile.device.hideKeyboard('pressKey', 'Done');\n</code></pre> </p>"},{"location":"doc/#deviceiskeyboardvisible-promiseboolean","title":"device.isKeyboardVisible() \u21d2 <code>Promise.&lt;boolean&gt;</code>","text":"<p>Checks if the keyboard is visible or not on the mobile device.</p> <p>Kind: static method of <code>device</code> Returns: <code>Promise.&lt;boolean&gt;</code> - Returns <code>true</code> if the keyboard is visible on the mobile view. Example <pre><code>await mobile.device.isKeyboardVisible();\n</code></pre> </p>"},{"location":"doc/#deviceisplatformsupported-promiseboolean","title":"device.isPlatformSupported() \u21d2 <code>Promise.&lt;boolean&gt;</code>","text":"<p>Determine if the current platform is supported, if the current device platform is either <code>Android</code> or <code>iOS</code>.</p> <p>Kind: static method of <code>device</code> Returns: <code>Promise.&lt;boolean&gt;</code> - If neither Android nor iOS is detected (e.g., Windows, Linux, or web), the condition evaluates to false Example <pre><code>await mobile.device.isPlatformSupported();\n</code></pre> </p>"},{"location":"doc/#mobileelement","title":"mobile.element","text":"<p>Kind: static class of <code>mobile</code> </p> <ul> <li>.element<ul> <li>.isVisible(element, [strict]) \u21d2 <code>boolean</code></li> <li>.isPresent(element) \u21d2 <code>boolean</code></li> <li>.waitToBePresent(selector, [timeout]) \u21d2 <code>boolean</code></li> <li>.waitToBeVisible(selector, [timeout]) \u21d2 <code>boolean</code></li> <li>.waitToBeClickable(selector, [timeout]) \u21d2 <code>boolean</code></li> <li>.isSelected(elementOrSelector) \u21d2 <code>boolean</code></li> <li>.waitToBeEnabled(selector, [timeout]) \u21d2 <code>boolean</code></li> </ul> </li> </ul> <p></p>"},{"location":"doc/#elementisvisibleelement-strict-boolean_1","title":"element.isVisible(element, [strict]) \u21d2 <code>boolean</code>","text":"<p>Returns a boolean if the mobile element is visible to the user.</p> <p>Kind: static method of <code>element</code> Returns: <code>boolean</code> - Returns true or false.  </p> Param Type Default Description element <code>Element</code> The Mobile Ui element. [strict] <code>boolean</code> <code>true</code> If strict mode is enabled it will only return \"true\" if the element is visible on the mobile view and within the viewport. If \"false\", it will be sufficient if the element is visible on the view but not inside the current viewport. <p>Example <pre><code>await mobile.element.isVisible(elem);\n</code></pre> </p>"},{"location":"doc/#elementispresentelement-boolean","title":"element.isPresent(element) \u21d2 <code>boolean</code>","text":"<p>Returns a boolean if the element is present at the DOM or not. It might be hidden.</p> <p>Kind: static method of <code>element</code> Returns: <code>boolean</code> - Returns true or false.  </p> Param Type Description element <code>Element</code> The element. <p>Example <pre><code>await mobile.element.isPresent(elem);\n</code></pre> </p>"},{"location":"doc/#elementwaittobepresentselector-timeout-boolean","title":"element.waitToBePresent(selector, [timeout]) \u21d2 <code>boolean</code>","text":"<p>Waits until the element with the given selector is present.</p> <p>Kind: static method of <code>element</code> Returns: <code>boolean</code> - Returns true or false.  </p> Param Type Default Description selector <code>Object</code> The CSS selector describing the element. [timeout] <code>number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await mobile.element.waitToBePresent(\".input01\");\nawait mobile.element.waitToBePresent(\"#button12\");\nawait mobile.element.waitToBePresent(\"p:first-child\");\n</code></pre> </p>"},{"location":"doc/#elementwaittobevisibleselector-timeout-boolean","title":"element.waitToBeVisible(selector, [timeout]) \u21d2 <code>boolean</code>","text":"<p>Waits until the element with the given selector is visible.</p> <p>Kind: static method of <code>element</code> Returns: <code>boolean</code> - Returns true or false.  </p> Param Type Default Description selector <code>Object</code> The CSS selector describing the element. [timeout] <code>number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await mobile.element.waitToBeVisible(\".input01\");\nawait mobile.element.waitToBeVisible(\"#button12\");\nawait mobile.element.waitToBeVisible(\"p:first-child\");\n</code></pre> </p>"},{"location":"doc/#elementwaittobeclickableselector-timeout-boolean","title":"element.waitToBeClickable(selector, [timeout]) \u21d2 <code>boolean</code>","text":"<p>Waits until the element with the given selector is clickable.</p> <p>Kind: static method of <code>element</code> Returns: <code>boolean</code> - Returns true or false.  </p> Param Type Default Description selector <code>Object</code> The CSS selector describing the element. [timeout] <code>number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await mobile.element.waitToBeClickable(\".input01\");\nawait mobile.element.waitToBeClickable(\"#button12\");\nawait mobile.element.waitToBeClickable(\"p:first-child\");\n</code></pre> </p>"},{"location":"doc/#elementisselectedelementorselector-boolean","title":"element.isSelected(elementOrSelector) \u21d2 <code>boolean</code>","text":"<p>Returns a boolean if the element (e.g. checkbox) is selected.</p> <p>Kind: static method of <code>element</code> Returns: <code>boolean</code> - Returns true or false.  </p> Param Type Description elementOrSelector <code>Element</code> | <code>string</code> The element. <p>Example <pre><code>const isSelected = await mobile.element.isSelected(elem);\n</code></pre> </p>"},{"location":"doc/#elementwaittobeenabledselector-timeout-boolean","title":"element.waitToBeEnabled(selector, [timeout]) \u21d2 <code>boolean</code>","text":"<p>Waits until the element with the given selector is present.</p> <p>Kind: static method of <code>element</code> Returns: <code>boolean</code> - Returns true or false.  </p> Param Type Default Description selector <code>Object</code> The CSS selector describing the element. [timeout] <code>number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await mobile.element.waitToBeEnabled(\".input01\");\nawait mobile.element.waitToBeEnabled(\"#button12\");\nawait mobile.element.waitToBeEnabled(\"p:first-child\");\n</code></pre> </p>"},{"location":"doc/#mobilegestures","title":"mobile.gestures","text":"<p>Kind: static class of <code>mobile</code> </p> <ul> <li>.gestures<ul> <li>.swipe(startX, startY, endX, endY, [duration]) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.tap(coordX, coordY) \u21d2 <code>Promise.&lt;void&gt;</code></li> </ul> </li> </ul> <p></p>"},{"location":"doc/#gesturesswipestartx-starty-endx-endy-duration-promisevoid","title":"gestures.swipe(startX, startY, endX, endY, [duration]) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Swipe from one point to another on the screen, Ensure that the provided coordinates are within the bounds of the screen to avoid unexpected behavior.</p> <p>Kind: static method of <code>gestures</code> </p> Param Type Default Description startX <code>number</code> The starting X coordinate of the swipe startY <code>number</code> The starting Y coordinate of the swipe endX <code>number</code> The ending X coordinate of the swipe endY <code>number</code> The ending Y coordinate of the swipe [duration] <code>number</code> <code>1000</code> The duration of the swipe in milliseconds (optional, default is 1000ms) <p>Example <pre><code>// Swipes from left to right across the screen horizontally (useful for image carousels or galleries).\nawait mobile.gestures.swipe(100, 800, 800, 800);\n// Swipes from bottom to top vertically to scroll down a list.\nawait mobile.gestures.swipe(300, 1000, 300, 400);\n// Swipes from the top down to refresh content on a mobile app (common for pull-to-refresh).\nawait mobile.gestures.swipe(400, 200, 400, 800);\n</code></pre> </p>"},{"location":"doc/#gesturestapcoordx-coordy-promisevoid","title":"gestures.tap(coordX, coordY) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Executes a tap at the given screen coordinates, Ensure that the provided coordinates are within the bounds of the screen to avoid unexpected behavior.</p> <p>Kind: static method of <code>gestures</code> </p> Param Type Description coordX <code>number</code> The horizontal screen coordinate for the tap. coordY <code>number</code> The vertical screen coordinate for the tap. <p>Example <pre><code>await mobile.gestures.tap(100, 800);\n</code></pre> </p>"},{"location":"doc/#mobileios","title":"mobile.ios","text":"<p>Kind: static class of <code>mobile</code> </p>"},{"location":"doc/#mobileuserinteraction","title":"mobile.userInteraction","text":"<p>Kind: static class of <code>mobile</code> </p> <ul> <li>.userInteraction<ul> <li>.tap(elementOrSelector, [timeout])</li> <li>.check(elementOrSelector, [timeout])</li> <li>.uncheck(elementOrSelector, [timeout])</li> <li>.doubleTap(elementOrSelector, [timeout]) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.fill(elementOrSelector, value, [timeout]) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.clearAndFill(elementOrSelector, value, [timeout]) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.clear(elementOrSelector, [timeout]) \u21d2 <code>Promise.&lt;void&gt;</code></li> </ul> </li> </ul> <p></p>"},{"location":"doc/#userinteractiontapelementorselector-timeout","title":"userInteraction.tap(elementOrSelector, [timeout])","text":"<p>Tap's on the mobile element.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description elementOrSelector <code>Element</code> | <code>string</code> The element (e.g., accessibility ID, XPath) selectors describing the element. [timeout] <code>Number</code> <code>30000</code> The timeout to wait(ms) <p>Example <pre><code>await mobile.userInteraction.tap(elem);\nawait mobile.userInteraction.tap(elem, 20000);\n</code></pre> </p>"},{"location":"doc/#userinteractioncheckelementorselector-timeout","title":"userInteraction.check(elementOrSelector, [timeout])","text":"<p>Checks the given checkbox.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description elementOrSelector <code>Element</code> | <code>string</code> The element (e.g., accessibility ID, XPath) selectors describing the element. [timeout] <code>number</code> <code>30000</code> The timeout to wait(ms) <p>Example <pre><code>await mobile.userInteraction.check(element);\nawait mobile.userInteraction.check(element, 20000);\n</code></pre> </p>"},{"location":"doc/#userinteractionuncheckelementorselector-timeout","title":"userInteraction.uncheck(elementOrSelector, [timeout])","text":"<p>Unchecks the given checkbox.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description elementOrSelector <code>Element</code> | <code>string</code> The element (e.g., accessibility ID, XPath) selectors describing the element. [timeout] <code>number</code> <code>30000</code> The timeout to wait(ms) <p>Example <pre><code>await mobile.userInteraction.uncheck(elementOrSelector);\nawait mobile.userInteraction.uncheck(elementOrSelector, 20000);\n</code></pre> </p>"},{"location":"doc/#userinteractiondoubletapelementorselector-timeout-promisevoid","title":"userInteraction.doubleTap(elementOrSelector, [timeout]) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Double Tap's on the mobile element.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description elementOrSelector <code>Element</code> | <code>string</code> The element (e.g., accessibility ID, XPath) selectors describing the element. [timeout] <code>number</code> <code>30000</code> The timeout to wait(ms) <p>Example <pre><code>await mobile.userInteraction.doubleTap(elem);\nawait mobile.userInteraction.doubleTap(elem, 2000);\n</code></pre> </p>"},{"location":"doc/#userinteractionfillelementorselector-value-timeout-promisevoid","title":"userInteraction.fill(elementOrSelector, value, [timeout]) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Enter a string value into a mobile input field.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description elementOrSelector <code>Element</code> | <code>string</code> The element (e.g., accessibility ID, XPath) selectors describing the element. value <code>string</code> The string value to be entered. [timeout] <code>number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await mobile.userInteraction.fill(element);\nawait mobile.userInteraction.fill(element, 2000);\n</code></pre> </p>"},{"location":"doc/#userinteractionclearandfillelementorselector-value-timeout-promisevoid","title":"userInteraction.clearAndFill(elementOrSelector, value, [timeout]) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Enter a string into the mobile input field; it will clear the box before submission.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description elementOrSelector <code>Element</code> | <code>string</code> The element (e.g., accessibility ID, XPath) selectors describing the element. value <code>string</code> The string value to be entered. [timeout] <code>number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await mobile.userInteraction.clearAndFill(element);\nawait mobile.userInteraction.clearAndFill(element, 2000);\n</code></pre> </p>"},{"location":"doc/#userinteractionclearelementorselector-timeout-promisevoid","title":"userInteraction.clear(elementOrSelector, [timeout]) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Clear a string value into a mobile input field.</p> <p>Kind: static method of <code>userInteraction</code> </p> Param Type Default Description elementOrSelector <code>Element</code> | <code>string</code> The element (e.g., accessibility ID, XPath) selectors describing the element. [timeout] <code>number</code> <code>30000</code> The timeout to wait (ms). <p>Example <pre><code>await mobile.userInteraction.clear(element);\nawait mobile.userInteraction.clear(element, 2000);\n</code></pre> </p>"},{"location":"doc/#flp","title":"flp","text":"<p>Global namespace for Fiori Launchpad (FLP) modules.</p> <p>Kind: global constant  </p> <ul> <li>flp<ul> <li>.userLocks<ul> <li>.getNumberOfLockEntries(user, password, [technicalUserId]) \u21d2 <code>Promise.&lt;Number&gt;</code></li> <li>.deleteExistingLockEntries(user, password, [technicalUserId])</li> </ul> </li> <li>.userSettings<ul> <li>.setLanguageFromUserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.setDateFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.setTimeFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.setTimeZoneFromUserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.setNumberFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.setS4UserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.getLanguageFromUserSettings(user, password) \u21d2 <code>Promise.&lt;String&gt;</code></li> <li>.getDateFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;String&gt;</code></li> <li>.getTimeFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;String&gt;</code></li> <li>.getTimeZoneFromUserSettings(user, password) \u21d2 <code>Promise.&lt;String&gt;</code></li> <li>.getNumberFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;String&gt;</code></li> </ul> </li> </ul> </li> </ul> <p></p>"},{"location":"doc/#flpuserlocks","title":"flp.userLocks","text":"<p>Kind: static class of <code>flp</code> </p> <ul> <li>.userLocks<ul> <li>.getNumberOfLockEntries(user, password, [technicalUserId]) \u21d2 <code>Promise.&lt;Number&gt;</code></li> <li>.deleteExistingLockEntries(user, password, [technicalUserId])</li> </ul> </li> </ul> <p></p>"},{"location":"doc/#userlocksgetnumberoflockentriesuser-password-technicaluserid-promisenumber","title":"userLocks.getNumberOfLockEntries(user, password, [technicalUserId]) \u21d2 <code>Promise.&lt;Number&gt;</code>","text":"<p>Gets the number of lock entries for the given user.</p> <p>Kind: static method of <code>userLocks</code> Returns: <code>Promise.&lt;Number&gt;</code> - The number of lock entries.  </p> Param Type Description user <code>String</code> The user name. password <code>String</code> The password. [technicalUserId] <code>String</code> The technical user ID. <p>Example <pre><code>const lockCount = await flp.userLocks.getNumberOfLockEntries(\"user\", \"password\");\n</code></pre> </p>"},{"location":"doc/#userlocksdeleteexistinglockentriesuser-password-technicaluserid","title":"userLocks.deleteExistingLockEntries(user, password, [technicalUserId])","text":"<p>Deletes the existing lock entries for the given user.</p> <p>Kind: static method of <code>userLocks</code> </p> Param Type Description user <code>String</code> The user name. password <code>String</code> The password. [technicalUserId] <code>String</code> The technical user ID. <p>Example <pre><code>await flp.userLocks.deleteExistingLockEntries(\"user\", \"password\");\n</code></pre> </p>"},{"location":"doc/#flpusersettings","title":"flp.userSettings","text":"<p>Kind: static class of <code>flp</code> </p> <ul> <li>.userSettings<ul> <li>.setLanguageFromUserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.setDateFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.setTimeFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.setTimeZoneFromUserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.setNumberFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.setS4UserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code></li> <li>.getLanguageFromUserSettings(user, password) \u21d2 <code>Promise.&lt;String&gt;</code></li> <li>.getDateFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;String&gt;</code></li> <li>.getTimeFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;String&gt;</code></li> <li>.getTimeZoneFromUserSettings(user, password) \u21d2 <code>Promise.&lt;String&gt;</code></li> <li>.getNumberFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;String&gt;</code></li> </ul> </li> </ul> <p></p>"},{"location":"doc/#usersettingssetlanguagefromusersettingsuser-password-promisevoid","title":"userSettings.setLanguageFromUserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Sets the environment variable 'USER_SETTINGS_LANG_KEY' language from user settings.</p> <p>Kind: static method of <code>userSettings</code> Returns: <code>Promise.&lt;void&gt;</code> - A promise that resolves when the language has been set.  </p> Param Type Description user <code>String</code> The username for authentication. password <code>String</code> The password for authentication. <p>Example <pre><code>await flp.userSettings.setLanguageFromUserSettings(\"user\", \"password\");\n</code></pre> </p>"},{"location":"doc/#usersettingssetdateformatfromusersettingsuser-password-promisevoid","title":"userSettings.setDateFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Sets the environment variable 'USER_SETTINGS_DATE_FORMAT' date format from user settings.</p> <p>Kind: static method of <code>userSettings</code> Returns: <code>Promise.&lt;void&gt;</code> - A promise that resolves when the date format has been set.  </p> Param Type Description user <code>String</code> The username for authentication. password <code>String</code> The password for authentication. <p>Example <pre><code>await flp.userSettings.setDateFormatFromUserSettings(\"user\", \"password\");\n</code></pre> </p>"},{"location":"doc/#usersettingssettimeformatfromusersettingsuser-password-promisevoid","title":"userSettings.setTimeFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Sets the environment variable 'USER_SETTINGS_DATE_FORMAT' time format from user settings.</p> <p>Kind: static method of <code>userSettings</code> Returns: <code>Promise.&lt;void&gt;</code> - A promise that resolves when the time format has been set.  </p> Param Type Description user <code>String</code> The username for authentication. password <code>String</code> The password for authentication. <p>Example <pre><code>await flp.userSettings.setTimeFormatFromUserSettings(\"user\", \"password\");\n</code></pre> </p>"},{"location":"doc/#usersettingssettimezonefromusersettingsuser-password-promisevoid","title":"userSettings.setTimeZoneFromUserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Sets the environment variable 'USER_SETTINGS_TIME_ZONE' time zone from user settings.</p> <p>Kind: static method of <code>userSettings</code> Returns: <code>Promise.&lt;void&gt;</code> - A promise that resolves when the time zone has been set.  </p> Param Type Description user <code>String</code> The username for authentication. password <code>String</code> The password for authentication. <p>Example <pre><code>await flp.userSettings.setTimeZoneFromUserSettings(\"user\", \"password\");\n</code></pre> </p>"},{"location":"doc/#usersettingssetnumberformatfromusersettingsuser-password-promisevoid","title":"userSettings.setNumberFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Sets the environment variable 'USER_SETTINGS_NUMBER_FORMAT' number format from user settings.</p> <p>Kind: static method of <code>userSettings</code> Returns: <code>Promise.&lt;void&gt;</code> - A promise that resolves when the number format has been set.  </p> Param Type Description user <code>String</code> The username for authentication. password <code>String</code> The password for authentication. <p>Example <pre><code>await flp.userSettings.setNumberFormatFromUserSettings(\"user\", \"password\");\n</code></pre> </p>"},{"location":"doc/#usersettingssets4usersettingsuser-password-promisevoid","title":"userSettings.setS4UserSettings(user, password) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Sets the user settings for S4.</p> <p>Kind: static method of <code>userSettings</code> Returns: <code>Promise.&lt;void&gt;</code> - A promise that resolves when the user settings have been set.  </p> Param Type Description user <code>String</code> The username for authentication. password <code>String</code> The password for authentication. <p>Example <pre><code>await flp.userSettings.setS4UserSettings(\"user\", \"password\");\n</code></pre> </p>"},{"location":"doc/#usersettingsgetlanguagefromusersettingsuser-password-promisestring","title":"userSettings.getLanguageFromUserSettings(user, password) \u21d2 <code>Promise.&lt;String&gt;</code>","text":"<p>Gets the language from user settings.</p> <p>Kind: static method of <code>userSettings</code> Returns: <code>Promise.&lt;String&gt;</code> - The language from user settings.  </p> Param Type Description user <code>String</code> The username for authentication. password <code>String</code> The password for authentication. <p>Example <pre><code>const language = await flp.userSettings.getLanguageFromUserSettings(\"user\", \"password\");\n</code></pre> </p>"},{"location":"doc/#usersettingsgetdateformatfromusersettingsuser-password-promisestring","title":"userSettings.getDateFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;String&gt;</code>","text":"<p>Gets the date format from user settings.</p> <p>Kind: static method of <code>userSettings</code> Returns: <code>Promise.&lt;String&gt;</code> - The date format from user settings.  </p> Param Type Description user <code>String</code> The username for authentication. password <code>String</code> The password for authentication. <p>Example <pre><code>const dateFormat = await flp.userSettings.getDateFormatFromUserSettings(\"user\", \"password\");\n</code></pre> </p>"},{"location":"doc/#usersettingsgettimeformatfromusersettingsuser-password-promisestring","title":"userSettings.getTimeFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;String&gt;</code>","text":"<p>Gets the time format from user settings.</p> <p>Kind: static method of <code>userSettings</code> Returns: <code>Promise.&lt;String&gt;</code> - The time format from user settings.  </p> Param Type Description user <code>String</code> The username for authentication. password <code>String</code> The password for authentication. <p>Example <pre><code>const timeFormat = await flp.userSettings.getTimeFormatFromUserSettings(\"user\", \"password\");\n</code></pre> </p>"},{"location":"doc/#usersettingsgettimezonefromusersettingsuser-password-promisestring","title":"userSettings.getTimeZoneFromUserSettings(user, password) \u21d2 <code>Promise.&lt;String&gt;</code>","text":"<p>Gets the time zone from user settings.</p> <p>Kind: static method of <code>userSettings</code> Returns: <code>Promise.&lt;String&gt;</code> - The time zone from user settings.  </p> Param Type Description user <code>String</code> The username for authentication. password <code>String</code> The password for authentication. <p>Example <pre><code>const timeZone = await flp.userSettings.getTimeZoneFromUserSettings(\"user\", \"password\");\n</code></pre> </p>"},{"location":"doc/#usersettingsgetnumberformatfromusersettingsuser-password-promisestring","title":"userSettings.getNumberFormatFromUserSettings(user, password) \u21d2 <code>Promise.&lt;String&gt;</code>","text":"<p>Gets the number format from user settings.</p> <p>Kind: static method of <code>userSettings</code> Returns: <code>Promise.&lt;String&gt;</code> - The number format from user settings.  </p> Param Type Description user <code>String</code> The username for authentication. password <code>String</code> The password for authentication. <p>Example <pre><code>const numberFormat = await flp.userSettings.getNumberFormatFromUserSettings(\"user\", \"password\");\n</code></pre></p>"},{"location":"sections/contact/","title":"Contact","text":"<p>In case of questions or issues, please feel free to reach out to us or open an issue on our GitHub Page.</p>"},{"location":"sections/contact/#qmate-main-contact","title":"Qmate Main Contact","text":""},{"location":"sections/contact/#benjamin-warth","title":"Benjamin Warth","text":"<p> WDF - Germany   benjamin.warth@sap.com</p>"},{"location":"sections/contact/#maintainers-contributors","title":"Maintainers &amp; Contributors","text":""},{"location":"sections/contact/#uladzislau-dauhashei","title":"Uladzislau Dauhashei","text":"<p> WDF - Germany u.dauhashei@sap.com</p>"},{"location":"sections/contact/#tomas-hartmann","title":"Tomas Hartmann","text":"<p> WDF - Germany tomas.hartmann@sap.com</p>"},{"location":"sections/contact/#herald-antony","title":"Herald Antony","text":"<p> BLR - India herald.maria.antony@sap.com</p>"},{"location":"sections/contact/#varun-hegde","title":"Varun Hegde","text":"<p> BLR - India varun.hegde@sap.com</p>"},{"location":"sections/contact/#moritz-knaut","title":"Moritz Knaut","text":"<p> Remote - Germany moritz.knaut@sap.com</p>"},{"location":"sections/contact/#marvin-gruinger","title":"Marvin Gr\u00fc\u00dfinger","text":"<p> ROT - Germany marvin.gruessinger@sap.com</p>"},{"location":"sections/bestPractices/authentication/","title":"Best Practices - Authentication","text":"<p>For the standard Fiori and Cloud login Pages, we provide some configuration parameters and reuse methods to enable you an easy way of system authentication.</p> <p>There are different approaches to log into the system:</p> <ul> <li>Login via Reuse Methods (recommended)</li> <li>Login via Configuration File</li> <li>Login via Environment Variables</li> </ul> <p>Which way to choose depends on your needs and preferences. If you are testing a scenario which goes through various systems (especially non UI5 systems) it is not recommended/possible to use a global authentication via the configuration file. If there is only one login during the script execution, it is up to you, to do the authentication via the configuration file. </p> <p>Info</p> <p>For consistency reasons we recommend to use the login via reuse methods if possible.</p>"},{"location":"sections/bestPractices/authentication/#login-via-reuse-methods","title":"Login via Reuse Methods","text":"<p>The other way of system authentication, is to use the specific reuse method.  This is commonly recommended, especially if you are switching between multiple users or systems during the test execution.  With this approach, you handle the login within a step of your script/s.  The benefit of this approach is, to have more control over the login as an actual step inside your test process.  With that, you are able to use the login/logout multiple times during the test execution if you need to switch users or systems during runtime.</p> <p>You can use one of the following methods:</p> Generic LoginFiori LoginSAP Cloud LoginCustom Login <p>There is a generic login function which can be used for both types of forms (fiori &amp; sap-cloud) to authenticate. This function will automatically determine the right login form and call the proper function.</p> <pre><code>it(\"Step 01: login generic\", async function () {\n  await ui5.session.login(\"JOHNDOE\", \"abc123\");\n});\n</code></pre> <p>Use this configuration for the Fiori Login Screen. Define the step (on top of your script) and pass at least a valid user to the method. </p> <pre><code>it(\"Step 01: login fiori\", async function () {\n  await ui5.session.loginFiori(\"JOHNDOE\", \"abc123\");\n});\n</code></pre> <p>Use this configuration for the SAP Cloud Login Screen. Define the step (on top of your script) and pass at least a valid user to the method. </p> <pre><code>it(\"Step 01: login sap cloud\", async function () {\n  await ui5.session.loginSapCloud(\"JOHNDOE\", \"abc123\");\n});\n</code></pre> <p>If you want to define your own custom form, you can use the following method. </p> <p>Define the step (on top of your script) and pass the <code>username</code>, <code>password</code>, <code>usernameFieldSelector</code>, <code>passwordFieldSelector</code>  and <code>logonButtonSelector</code>. Therefore, you need to define the CSS selectors of the corresponding elements.</p> <pre><code>it(\"Step 01: login Custom\", async function () {\n  const username = \"JOHNDOE\";\n  const password = \"Greetings1!\";\n  const usernameSelector = \"#USERNAME_BLOCK input\";\n  const passwordSelector = \"#PASSWORD_BLOCK input\";\n  const loginButtonSelector = \"#LOGIN_LINK\";\n  await ui5.session.loginCustom(username, password, usernameSelector, passwordSelector, loginButtonSelector);\n});\n</code></pre> <p>Best Practices</p> <ul> <li> <p>For a better maintainability and reusability of your specs, we highly recommend to decouple you user data inside the data file assigned to your spec.</p> <pre><code>{\n  session: {\n    username: \"JOHN_DOE\",\n    password: \"abc123#\"\n  },\n  // further test data ...\n}\n</code></pre> </li> <li> <p>To store your credential securely, you can refer to our main documentation under section Handling Private Data.</p> </li> </ul> <p>Tip</p> <p>You can disable the login centrally without touching your specs by setting the <code>formType</code> to <code>\"skip\"</code> inside your configuration file.</p>"},{"location":"sections/bestPractices/authentication/#login-via-configuration-file","title":"Login via Configuration File","text":"<p>Inside the conf.js file You can specify how the script will automatically log into the system. This will only be executed once before the first script gets executed. Hence, we recommend to use this only if you are not switching between multiple users or systems during the test execution.</p> <p>There are multiple options, based on the login screen to set the <code>formType</code> of the Configuration.</p> Fiori LoginSAP Cloud LoginOthersCustom LoginSkip Login <p>Use this configuration for the Fiori Login Screen. You only need to specify the <code>username</code> and <code>password</code>.</p> <pre><code>auth: {\n  formType: \"fiori-form\",\n  username: \"JOHNDOE\",\n  password: \"Greetings1!\"\n},\n</code></pre> <p>Use this configuration for the SAP Cloud Login Screen. You only need to specify the <code>username</code> and <code>password</code>.</p> <pre><code>auth: {\n  formType: \"sapcloud-form\",\n  username: \"JOHNDOE\",\n  password: \"Greetings1!\"\n},\n</code></pre> <p>The following options for <code>formType</code> are also available. You need to specify the <code>username</code> and <code>password</code> for this configuration.</p> <ul> <li><code>XSA-form</code></li> <li><code>POT-form</code></li> <li><code>MIA-form</code></li> <li><code>UI5-Form</code></li> </ul> <p>If you want to define your own custom form, you can use the following configuration. Additionally to the <code>username</code> and <code>password</code>, you need to specify the <code>usernameFieldSelector</code>, <code>passwordFieldSelector</code> and <code>logonButtonSelector</code>. Therefore set the CSS selectors of the corresponding elements.</p> <pre><code>auth: {\n  formType: \"custom-form\",\n  username: \"JOHNDOE\",\n  password: \"Greetings1!\",\n  usernameFieldSelector: \"#USERNAME_BLOCK input\",\n  passwordFieldSelector: \"#PASSWORD_BLOCK input\",\n  logonButtonSelector: \"#LOGIN_LINK\"\n},\n</code></pre> <p>Use this configuration to skip the login and logout inside the specs. <pre><code>auth: {\n  formType: \"skip\"\n},\n</code></pre></p>"},{"location":"sections/bestPractices/authentication/#login-via-environment-variables","title":"Login via Environment Variables","text":""},{"location":"sections/bestPractices/authentication/#overwriting-credentials","title":"Overwriting Credentials","text":"<p>Qmate offers a convenient feature to centrally override session credentials using environment variables. This functionality is especially beneficial in environments like the STEP platform or other execution environments, where dynamic overwriting of specified users is required, eliminating the need for manual intervention in existing scripts.</p> <p>The following environment variables are recognized as username and password, with priority across all different login reuse functions if set:</p> <ul> <li><code>QMATE_SESSION_USERNAME</code></li> <li><code>QMATE_SESSION_PASSWORD</code></li> </ul> <p>Please Note</p> <p>The username and password provided to the login functions will be ignored if the corresponding variables are set.</p>"},{"location":"sections/bestPractices/authentication/#default-password-fallback","title":"Default Password Fallback","text":"<p>Another environment variable can be set to act as a default password or fallback in case no password is provided to the reuse function. Unlike the variables mentioned above, this will only be considered if no password is provided and will not overwrite any existing value.</p> <ul> <li><code>QMATE_DEFAULT_PASSWORD</code></li> </ul>"},{"location":"sections/bestPractices/authentication/#logout","title":"Logout","text":"<p>To logout from a S/4 system, please use the following method. <pre><code>it(\"Step XX: logout\", async function () {\n  await ui5.session.logout();\n});\n</code></pre></p> <p>Info</p> <p>Please note, if <code>formType</code> is set to <code>\"skip\"</code>, the logout will be skipped as well.</p>"},{"location":"sections/bestPractices/authentication/#finding-the-right-login-form","title":"Finding the right login form","text":"<p>Please use the screenshots to find the proper login form.</p> Fiori Login ScreenSAP Cloud Login Screen <p></p> <p></p>"},{"location":"sections/bestPractices/dataHandling/","title":"Best Practices - Data Handling","text":"<p>Related Topics: Data Handling | Advanced Data Handling</p> <ul> <li> <p>Always decouple the data from the spec. The maintenance of data will become very handy also more transparent. </p> </li> <li> <p>Store your data files inside the data folder.</p> </li> <li> <p>Create a separate .json file for every script. Unless specifically needed by the test scenario to use data from multiple files, it is recommended to keep things simple, and use only one import prefix (that maps to a JSON file) per script.</p> </li> <li> <p>Name the file exactly like the script which the data belongs to.</p> </li> <li> <p>Structure your data according to the related section of the UI.</p> </li> <li> <p>To pass data between different specs, use the references.json file and group the specs inside the config.</p> </li> <li> <p>Use meaningful key names for import and export parameters, and use meaningful names for data folders, subfolders, and JSON files.   config.js<pre><code>params: {\n\n  import: {                         \n    purchaseOrder: \"./data/purchaseOrder.json\",\n    ordersFolder: \"./data/orders\"\n  },\n  export: {\n    supplierInvoice: \"./data/export/supplierInvoice.json\"\n  }\n\n},\n</code></pre></p> </li> <li> <p>Structure your data.   data.json<pre><code>{\n  \"session\": {\n    \"username\": \"JOHNDOE\",\n    \"password\": \"abc123!!\"\n  },\n  \"userData\": {\n    \"firstName\": \"John\",\n    \"lastName\":  \"Doe\",\n    \"address\": {\n      \"street\":   \"Main Road\",\n      \"number\":   \"42\",\n      \"zipCode\":  \"01234\",\n      \"city\":     \"Metropolis\"\n    }\n  }\n}\n</code></pre></p> </li> <li> <p>You can check if data has been imported correctly by using assertions before accessing it.    <pre><code>const data = browser.config.params.import.yourPrefixSpecName;\n// make an assertion to ensure data was loaded\nawait common.assertion.expectDefined(data);\nawait common.assertion.expectDefined(data.email);\n</code></pre></p> </li> </ul> <p>(Only for data export)</p> <ul> <li>Each script should write to different export files, unless the test scenario needs to do otherwise. If different scripts write to same export file, make sure to merge and not overwrite the export data.</li> </ul>"},{"location":"sections/bestPractices/selectors/","title":"Best Practices - Selectors","text":"<p>Related Topics: Selectors</p> <ul> <li> <p>Try to avoid text dependencies in selectors. Texts are more likely to change on the UI and if you want to enable your specs for LAT (Language Acceptance Tests) it will break your test. </p> <p>avoid</p> UI5non UI5 <pre><code>const selector = {\n    \"elementProperties\": {\n        \"viewName\": \"sap.suite.ui.generic.template.ObjectPage.view.Details\",\n        \"metadata\": \"sap.m.Button\",\n        \"text\": \"Create\"\n    }\n};\n</code></pre> <pre><code>const saveButton = await nonUi5.element.getElementByCss(\"BUTTON[text='Save']\");\n</code></pre> </li> <li> <p>Avoid xPath in non_ui5 selectors: xPath is a complex construct which includes multiple nodes. Due to the intransparent dependencies of other elements it may brake your test in case of any change of the corresponding elements. </p> <p>avoid</p> <pre><code>const elem1 = await nonUi5.element.getElementByXPath(\".//*[@role='toolbar']/span[3]/span[2]/input\");\n</code></pre> </li> <li> <p>Avoid screen size specific and style dependent attributes of elements.  </p> <p>avoid</p> <pre><code>[@style='width:100%;']\n</code></pre> </li> <li> <p>Refrain from building manual xPaths at all costs. Indexes can change very easy if the path changes etc. </p> <p>avoid</p> <pre><code>const SupplierPartyId = childrenArray[5].getElementsByTagName(\"SPAN\")[1].innerText;\n</code></pre> </li> <li> <p>Always check for a stable IDs or for other unique properties/attributes. Even if Qmate Suite doesn't offer it to you.</p> </li> </ul>"},{"location":"sections/features/advancedDataHandling/","title":"Advanced Data Handling","text":"<p>Data can be imported from JSON files and used in the tests. Data obtained during the test run can also be saved or exported to JSON files.</p>"},{"location":"sections/features/advancedDataHandling/#importing-data","title":"Importing Data","text":""},{"location":"sections/features/advancedDataHandling/#test-configuration-for-import","title":"Test configuration for import","text":"<p>Data to be imported may be in a specific JSON file, or in a directory, and sub-directories under that directory. In the config file, under <code>params</code> add <code>import</code>, and within it specify the import data. config.js<pre><code>params: {\n\n  import: {                         \n    myFolder1: \"./data/my/folder/data/&lt;systemName&gt;\",\n    myFolder2: \"data/another/folder/data/anotherFolder\",\n    myFolder3: \"C:/Users/C1234567/data/testFolder\",\n    yourPrefixSpecName: \"./data/my/folder/data/&lt;systemName&gt;/data.json\",\n    uiUser: \"./data/my/folder/data/&lt;systemName&gt;/webUser.json\",\n  }\n\n},\n</code></pre></p> <p>Info</p> <p>The folders or JSON files are specified as key-value pair. In this sample, <code>yourPrefixSpecName</code> is the key which points to a JSON file <code>./data/my/folder/data/&lt;systemName&gt;/data.json</code>. Similarly, the key <code>myFolder2</code> points to a folder <code>data/another/folder/data/anotherFolder</code>.</p> <p>Tip</p> <p>File paths may be relative or absolute. If relative, they are resolved relative to the config file directory.</p>"},{"location":"sections/features/advancedDataHandling/#data-import-from-json-file","title":"Data import from JSON file","text":"<p>Data from a JSON file will be added under the specified key. Data from <code>./data/my/folder/data/&lt;systemName&gt;/data.json</code> will be available in <code>browser.config.params.import.yourPrefixSpecName</code>. </p> <p>Similarly data from <code>./data/my/folder/data/&lt;systemName&gt;/webUser.json</code> will be available in <code>browser.config.params.import.uiUser</code>.</p> config.js<pre><code>params: {\n\n  import: {               \n    yourPrefixSpecName: \"./data/my/folder/data/&lt;systemName&gt;/data.json\",          \n    uiUser: \"./data/my/folder/data/&lt;systemName&gt;/webUser.json\",\n  }\n\n},\n</code></pre> <p>Let's assume the file ./data/my/folder/data//data.json has the following data: data.json<pre><code>{\n  \"name\": \"Joe Doe\",\n  \"email\": \"joe.doe@example.com\",\n  \"telephone\": \"333-000-111-222\",\n  \"amount\": 4.79,\n  \"website\": \"http://www.userdataexport.test\"\n}\n</code></pre> Since <code>yourPrefixSpecName</code> is the key, to access the <code>email</code> value in the test spec, we use <code>browser.config.params.import.yourPrefixSpecName.email</code>. <pre><code>// load entire data from \"./data/my/folder/data/&lt;systemName&gt;/data.json\"\nconst userData = browser.config.params.import.yourPrefixSpecName;\n\n// make an assertion to ensure data was loaded\nawait common.assertion.expectDefined(userData);\nawait common.assertion.expectDefined(userData.email);\n\n// enter data to input field\nawait ui5.userInteraction.fill(emailSelector, userData.email);\n\n// define and enter specific data value\nconst email = browser.config.params.import.yourPrefixSpecName.email;\nawait ui5.userInteraction.fill(emailSelector, email);\n</code></pre>"},{"location":"sections/features/advancedDataHandling/#data-import-from-folders-and-subfolders","title":"Data import from folders and subfolders","text":"<p>config.js<pre><code>params: {\n\n  import: {                         \n    myFolder1: \"./data/my/folder/data/&lt;systemName&gt;\",\n    myFolder2: \"./data/another/folder/data/anotherFolder\",\n  }\n\n},\n</code></pre> Let us assume that the folders have the following files: <pre><code>./data/my/folder/data/&lt;systemName&gt;/data.json\n./data/my/folder/data/&lt;systemName&gt;/purchaseRequisition.json\n./data/another/folder/data/anotherFolder/purchaseRequisition_HI.json\n./data/another/folder/data/anotherFolder/purchaseOrders/ServicePurchaseOrder.json\n./data/another/folder/data/anotherFolder/purchaseOrders/LimitPurchaseOrder.json\n./data/another/folder/data/anotherFolder/my-po-set/Limit-Purchase-Order.json\n./data/another/folder/data/anotherFolder/my-po-set/ServicePurchaseOrder.2Items.json\n</code></pre></p> <ul> <li> <p>Data in ./data/my/folder/data//data.json can be accessed using the folder key <code>myFolder1</code>, and the file name prefix, which is <code>data</code> in this case.   <pre><code>const myData = browser.config.params.import.myFolder1.data;\n</code></pre> <li> <p>Data in ./data/my/folder/data//purchaseRequisition.json can be accessed using the folder key <code>myFolder1</code>, and the file name prefix <code>purchaseRequisition</code>.   <pre><code>const prData = browser.config.params.import.myFolder1.purchaseRequisition;\n</code></pre> <li> <p>Similarly data in data/another/folder/data/anotherFolder can be accessed using the folder key <code>myFolder2</code>, subfolder name and file prefix as keys.   data/another/folder/data/anotherFolder/purchaseRequisition_HI.json<pre><code>const prDataHI = browser.config.params.import.myFolder2.purchaseRequisition_HI;\n</code></pre> data/another/folder/data/anotherFolder/purchaseOrders/ServicePurchaseOrder.json<pre><code>const servicePO = browser.config.params.import.myFolder2.purchaseOrders.ServicePurchaseOrder;\n</code></pre> data/another/folder/data/anotherFolder/purchaseOrders/LimitPurchaseOrder.json<pre><code>const limitPO = browser.config.params.import.myFolder2.purchaseOrders.LimitPurchaseOrder;\n</code></pre></p> </li> <p>Tip</p> <p>It is recommended that the subfolder names and JSON file names used to import data do not have special characters. </p> <p>If there are special characters in the file name or subfolder name, then the dot notation can't be used. In that case, you can use the following syntax: data/another/folder/data/anotherFolder/my-po-set/Limit-Purchase-Order.json<pre><code>const limitPO = browser.config.params.import.myFolder2[\"my-po-set\"][\"Limit-Purchase-Order\"];\n</code></pre> data/another/folder/data/anotherFolder/my-po-set/ServicePurchaseOrder.2Items.json<pre><code>const servicePO = browser.config.params.import.myFolder2[\"my-po-set\"][\"ServicePurchaseOrder.2Items\"];\n</code></pre></p> <p>Warning</p> <p>Qmate will not fail if import files and folders are missing, not readable, or have an invalid JSON. In such cases, warnings are logged on the console, and the data corresponding to those files and folders will remain undefined.</p>"},{"location":"sections/features/advancedDataHandling/#exporting-data","title":"Exporting Data","text":""},{"location":"sections/features/advancedDataHandling/#test-configuration-for-export","title":"Test configuration for export","text":"<p>Data can be exported persistently to one or more files. In the sample configuration file under <code>params</code>, add <code>export</code> with a list of file names as shown below.  config.js<pre><code>params: {\n\n  export: {          \n    exportData: \"./data/my/folder/path/in/exportFile.json\",\n    exportMoreData: \"./data/my/folder/path/in/moreDataFile.json\",\n    exportArrayData: \"./data/my/folder/path/in/arrayDataFile.json\"\n  }\n\n},\n</code></pre></p>"},{"location":"sections/features/advancedDataHandling/#exporting-data-to-json-file","title":"Exporting data to JSON file","text":"<p>The data in <code>browser.config.params.export</code> is written to output files at the end of the test run. The export file is created or overwritten if already present. Any intermediate folders are also created if necessary. <pre><code>it(\"Step 01: export data to 'exportData' file\", async function () {\n  // exportData: \"./data/my/folder/path/in/exportFile.json\",\n  browser.config.params.export.exportData = { \n    name: \"joe\", \n    description: \"exported into exportFile.json\" \n  };\n});\n\nit(\"Step 02: export data to 'exportMoreData' file\", async function () {\n  // exportMoreData: \"./data/my/folder/path/in/moreDataFile.json\",\n  browser.config.params.export.exportMoreData = { \n    name: \"jack\", \n    description: \"exported into moreDataFile.json\" \n  };\n});\n\nit(\"Step 03: export array data to 'exportArrayData' file\", async function () {\n  // exportArrayData: \"./data/my/folder/path/in/arrayDataFile.json\",\n  browser.config.params.export.exportArrayData = [\n    {\n      itemNo: \"1\",\n      description: \"exported into arrayDataFile.json\",\n      type: \"material\"\n    },\n    {\n      itemNo: \"2\",\n      description: \"Service item\",\n      type: \"service\"\n    }\n  ];\n  await common.assertion.expectEqual(Array.isArray(browser.config.params.export.exportArrayData), true);\n\n  // file \"./data/my/folder/path/in/arrayDataFile.json\" will have the array data\n  // check manually after test run is complete\n});\n</code></pre> At the end of the test run, the file ./data/my/folder/path/in/exportFile.json will look like:  <pre><code>{ \n  name: \"joe\",\n  description: \"exported into exportFile.json\"\n}\n</code></pre></p> <p>File ./data/my/folder/path/in/moreDataFile.json will look like:  <pre><code>{ \n  name: \"jack\", \n  description: \"exported into moreDataFile.json\" \n}\n</code></pre></p> <p>File ./data/my/folder/path/in/moreDataFile.json will look like:  <pre><code>[\n  {\n    itemNo: \"1\",\n    description: \"exported into arrayDataFile.json\",\n    type: \"material\"\n  },\n  {\n    itemNo: \"2\",\n    description: \"Service item\",\n    type: \"service\"\n  }\n]\n</code></pre></p> <p>Warning</p> <p>If you are adding export data to the same export key, make sure you don't overwrite previous data.</p> <pre><code>// browser.config.params.export.exportData has data assigned to it from previous steps\nbrowser.config.params.export.exportData[\"name\"] = \"joe\";\n\n// or if browser.config.params.export.exportData is an Array\nif(Array.isArray(browser.config.params.export.exportData)) {\n    // add an element to an array\n    browser.config.params.export.exportData.push({name: \"Joe\"});\n}\n</code></pre> <p>Info</p> <p>If there is no data assigned to an export key, then the export file corresponding to that key will be empty. Doing any of the following things will create an empty JSON file.</p> <pre><code>// \"./data/my/folder/path/in/exportFile.json\" will be a blank file at end of test run\nbrowser.config.params.export.exportData = null;\n// or\nbrowser.config.params.export.exportData = {};\n// or\nbrowser.config.params.export.exportData = [];\n</code></pre>"},{"location":"sections/features/advancedDataHandling/#parallel-test-runs-and-exporting-data","title":"Parallel test runs and exporting data","text":"<p>If tests are running in parallel, there will be multiple browser instances and each test run will have it's own browser instance. If these parallel instances write to the same export file, then the export data from parallel test instances is merged together and written out to the file.</p> <p>Warning</p> <p>This module does not fail if export files are not writable or if the export folder is inaccessible. In such cases, warnings are logged on the console, and export data will not get written out.</p>"},{"location":"sections/features/config/","title":"Config","text":""},{"location":"sections/features/config/#important-webdriverio-parameters","title":"Important WebdriverIO Parameters","text":"<p>WebdriverIO Parameters</p> <p>For more information about how to setup your config please see the official documentation from WebdriverIO.</p>"},{"location":"sections/features/config/#baseurl","title":"baseUrl","text":"<p>The <code>baseUrl</code> defines the entry point of your script. Here you can define in which system or application your script/s is/are being executed. <pre><code>baseUrl: \"https://www.sap.com\"\n</code></pre></p>"},{"location":"sections/features/config/#specs","title":"specs","text":"<p>Inside the <code>specs</code> array you specify the scripts to execute.  <pre><code>specs: [\n  path.resolve(__dirname, \"path/to/specs/yourSpec1.spec.js\"),\n  path.resolve(__dirname, \"path/to/specs/yourSpec2.spec.js\"),\n  path.resolve(__dirname, \"path/to/specs/yourSpec3.spec.js\")\n],\n</code></pre></p> <p>Warning</p> <p>These specs are being executed sequentially in different instances. Therefore, data (e.g. via references.json) can not be passed between the specs.</p> <p>To pass data between the specs (run them in a shared instance), you have to group them as shown below: <pre><code>specs: [\n  // grouped\n  [\n    path.resolve(__dirname, \"path/to/specs/yourSpec1.spec.js\"),\n    path.resolve(__dirname, \"path/to/specs/yourSpec2.spec.js\")\n  ],\n  // ungrouped\n  path.resolve(__dirname, \"path/to/specs/yourSpec3.spec.js\")\n],\n</code></pre></p>"},{"location":"sections/features/config/#maxinstances","title":"maxInstances","text":"<p>The number of parallel instances running at the same time. <pre><code>maxInstances: 0\n</code></pre></p>"},{"location":"sections/features/config/#bail-mocha-bail","title":"bail &amp; mocha bail","text":"<p>In qmate there are two different types of parameters to specify how your test executions should behave in case of a failure. Please make sure to set both parameters with the values according to the table below. </p> wdio bailmocha bail <p>Possible values are: <code>0</code>, <code>1</code> <pre><code>bail: 1\n</code></pre></p> <p>Possible values: <code>true</code>, <code>false</code> <pre><code>mochaOpts: {\n  bail: true\n}\n</code></pre></p> <p>Please find the below table for a detailed overview of all possible options:</p> name mocha bail wdio bail result break all <code>true</code> <code>1</code> break whole test execution after failure break further <code>false</code> <code>1</code> continue with failed spec, break further spec execution after failure break current <code>true</code> <code>0</code> break failed spec, continue further spec execution ignore <code>false</code> <code>0</code> don't break test execution at all <p>Warning</p> <p>Grouped specs or describes within the same file will behave the same as the failed spec.</p>"},{"location":"sections/features/config/#specfileretries","title":"specFileRetries\u200b","text":"<p>The number of times to retry an entire specfile when it fails as a whole. <pre><code>specFileRetries\u200b: 3\n</code></pre></p>"},{"location":"sections/features/config/#loglevel","title":"logLevel","text":"<p>The level of logging verbosity.</p> <p>Possible values are: <code>trace</code> | <code>debug</code> | <code>info</code> | <code>warn</code> | <code>error</code> | <code>silent</code> <pre><code>logLevel: \"warn\"\n</code></pre></p>"},{"location":"sections/features/config/#qmate-service-specific-parameters","title":"Qmate Service specific parameters","text":"<p>The <code>params</code> object inside your config defines soe specific Qmate relevant parameters. <pre><code>params: {\n  // [..]\n}\n</code></pre></p> <p>Warning</p> <p>The following parameters are being defined inside the <code>params</code> object above.</p>"},{"location":"sections/features/config/#auth","title":"auth","text":"<p>Specifies the way, Qmate will login to the system. See section Authentication for possible options and more details. <pre><code>params: {\n  auth: {\n      formType: \"plain\"\n  }\n}\n</code></pre></p>"},{"location":"sections/features/config/#systemurl","title":"systemUrl","text":"<p>Defines your system url used for OData/REST API calls. <pre><code>params: {\n  systemUrl: \"https://www.sap.com\"\n}\n</code></pre></p>"},{"location":"sections/features/config/#logui5version","title":"logUI5Version","text":"<p>Specifies the log level of the UI5 version and timestamp of the system in use. Possible values are:</p> alwaystruefalse <p>Logs the UI5 version after each system login. <pre><code>params: {\n  logUI5Version: \"always\"\n}\n</code></pre></p> <p>Logs the UI5 version per execution. <pre><code>params: {\n  logUI5Version: true\n}\n</code></pre></p> <p>Does not log the UI5 version at all. <pre><code>params: {\n  logUI5Version: false\n}\n</code></pre></p> console output<pre><code>UI5 Version:  1.96.1\nUI5 Timestamp:  25/11/2021\n</code></pre>"},{"location":"sections/features/config/#qmatecustomtimeout","title":"qmateCustomTimeout","text":"<p>Overwrites the default timeout of 30 seconds in the functions from the Qmate Reuse API with the given value. Unit is milliseconds. <pre><code>params: {\n  qmateCustomTimeout: 40000\n}\n</code></pre></p>"},{"location":"sections/features/config/#stepsleeptime","title":"stepSleepTime","text":"<p>Static sleep time after each step. Unit is milliseconds. Can be used to manually slow down the test execution. Set to <code>0</code> to disable. <pre><code>params: {\n  stepSleepTime: 5000\n}\n</code></pre></p>"},{"location":"sections/features/config/#loadpropertytimeout","title":"loadPropertyTimeout","text":"<p>Overwrites the default loadPropertyTimeout of 10 seconds in the functions from the Qmate Reuse API with the given value. Unit is milliseconds. <pre><code>params: {\n  qmateCustomTimeout: 20000\n}\n</code></pre></p>"},{"location":"sections/features/dataHandling/","title":"Data Handling","text":"<p>Related Topics: Best Practices - Data Handling | Advanced Data Handling</p>"},{"location":"sections/features/dataHandling/#data-types","title":"Data Types","text":"<p>There are basically two different types of data being used within your test execution.</p>"},{"location":"sections/features/dataHandling/#input-data","title":"Input Data","text":"<p>Input data is the data defined by the scenario to perform all types of user inputs within the test execution. It is recommended to create one JSON file for each spec or test. A common pattern is to name the data file exactly like the spec file. E.g. <code>createSupplierInvoice.json</code> contains all and exclusively the required data for the test <code>createSupplierInvoice.spec.js</code>. With that, the relationship between the data and the test itself is clear and the data is easily maintainable. Your data file could look like: data/createSupplierInvoice.json<pre><code>{\n  \"session\": {\n    \"username\": \"&lt;username\",\n    \"password\": \"&lt;password&gt;\"\n  },\n  \"generalInformation\": {\n    \"companyCode\": \"1010\",\n    \"postingDate\": \"today\",\n  }\n}\n</code></pre> As you can see above, the data is separated into different sections like <code>session</code> and <code>generalInformation</code>. To keep transparency, it is recommended to follow that approach and define your data according to the related section of the UI. </p>"},{"location":"sections/features/dataHandling/#reference-data","title":"Reference Data","text":"<p>For some cases - especially for scenario testing - it is required to pass dynamically created data between different specs. For example, your first script is creating a document number you might require inside the process of the second script. Therefore this data needs to be shared during the runtime between multiple scripts. To do so, you can create a <code>reference.json</code> file within your data folder which will then be imported in all related scripts. data/references.json<pre><code>{\n  \"purchaseOrderNumber\": null,\n  \"supplierInvoiceNumber\": null\n}\n</code></pre></p> <p>Info</p> <p>Here, the initial values are not set (set to <code>null</code>), since they will be stored during the runtime of your test execution. </p>"},{"location":"sections/features/dataHandling/#data-import","title":"Data Import","text":"<p>With the following approach, it is possible to dynamically define (different) data and data paths independently from the actual location of the specs or data files. Thus, it is the recommended way to handle your test data.</p>"},{"location":"sections/features/dataHandling/#define-data-paths","title":"Define data paths","text":"<p>Commonly, your data is stored inside the data folder of your test suite. Therefore the path pointing to the data file(s) is defined in the configuration file like: config.js<pre><code>params: {\n  import: {\n    data: \"./data/\"\n  }\n},\n</code></pre></p> <p>Tip</p> <p>For some special cases, you might require to defined multiple and more advanced data paths. Please find further information under Advanced Data Handling.</p>"},{"location":"sections/features/dataHandling/#load-data","title":"Load data","text":"<p>To import data inside your spec, add the following code at the top of your test / describe block: specs/createSupplierInvoice.spec<pre><code>const data = browser.config.params.import.data[\"createSupplierInvoice\"];\nconst references = browser.config.params.import.data[\"references\"];\n</code></pre></p> <p>Tip</p> <p>Alternatively, you can load the data with the following reuse method: <pre><code>const data = util.data.getData(\"createSupplierInvoice\");\n</code></pre> This function only works for data located in the folder defined as <code>data</code> in the config.</p>"},{"location":"sections/features/dataHandling/#store-data","title":"Store data","text":"<p>To store any value inside the imported file and make it available for other specs within the same group, use the following code inside a step (it block): specs/createPurchaseOrder.spec<pre><code>references.documentNumber = \"4500012345\";\n</code></pre></p> <p>Warning</p> <p>To be able to share data between different scripts, the specs need to be grouped together inside the configuration file. Please find more information under Configuration - Specs. Please consider, that the data is only stored during the runtime of the test execution. To store data persistently, please see chapter Advanced Data Handling.</p>"},{"location":"sections/features/dataHandling/#read-data","title":"Read data","text":"<p>To read data from the input data or reference file, use the following code inside a step (it block):</p> Input DataReference Data specs/createSupplierInvoice.spec<pre><code>const companyCode = data.generalInformation.companyCode;\n</code></pre> specs/createSupplierInvoice.spec<pre><code>const purchaseOrderNumber = references.purchaseOrderNumber;\n</code></pre>"},{"location":"sections/features/selectors/","title":"Selectors","text":"<p>To perform any action on an element (e.g. clicking a button), you need to specify the element at which the action is being executed. This differs from the web technology you are using. Read the following instructions, depending on the UI technology of the application to be tested. </p> <p>Info</p> <p>Selectors are typically created using our Qmate Suite, but it is important to note that this tool is currently only available for internal use at SAP. For further information as internal, please refer to our official Qmate documentation.</p>"},{"location":"sections/features/selectors/#ui5","title":"UI5","text":""},{"location":"sections/features/selectors/#supported-selector-properties","title":"Supported Selector Properties","text":"<p>The supported properties for any UI5 based application are the following: <pre><code>const selector = {\n    \"elementProperties\": { ... },\n    \"ancestorProperties\": { ... },\n    \"parentProperties\": { ... },\n    \"siblingProperties\": { ... },\n    \"prevSiblingProperties\": { ... },\n    \"nextSiblingProperties\": { ... },\n    \"childProperties\": { ... },\n    \"descendantProperties\": { ... }\n};\n</code></pre></p> <p>The selector consists of one mandatory selector called elementProperties, representing the target element where the action should be applied to and seven optional selectors:  </p> <ul> <li> <p>ancestorProperties, parentProperties: While the <code>parentProperties</code> can be used only as direct parent of the element, the <code>ancestorProperties</code> can be used for any level of ancestry (parent, grandparent, grand-grand etc.).</p> </li> <li> <p>childProperties, descendantProperties : The difference between them is, that the <code>childProperties</code> can be used only as direct child of the element, whereas the <code>descendantProperties</code> can be use for any level of descendance (child, grandson, grand-grand etc.).</p> </li> <li> <p>siblingProperties, prevSiblingProperties, nextSiblingProperties: The <code>siblingProperties</code> can be any sibling, whereas the <code>prevSiblingProperties</code> can be only the direct previous sibling and <code>nextSiblingProperties</code> can be only the direct next sibling.</p> </li> </ul> <p>You have to define at least one property in <code>elementProperties</code>. This could be <code>metadata</code> or any other property of the Overview below.</p>"},{"location":"sections/features/selectors/#sample","title":"Sample","text":"<pre><code>\"elementProperties\":{\n    \"metadata\": \"sap.m.Button\",\n    \"&lt;ui5Property&gt;\": \"*Any UI5 Property/Aggregation/Association\"\n    \"id\": \"*myId\",\n    \"viewName\": \"*myView*Name\",\n    \"viewId\": \"*id*viewId\",\n    \"bindingContextPath\": \"/ProductCategories(nodeKey=guid't12321-123213-34rer332', enabled='true', category='LT')\"\n    \"text\": [{\"path\": \"oDataModelName&gt;companyChangedManually\"}, {\"path\": \"*enabled\"}],  \n    \"tooltip\": [{\"path\": \"i18n&gt;welcomeDescription\"}]\n    \"domProperties\": {\n        \"nodeName\": \"li\",\n        \"class\": \"*sapMButton\"\n        \"tooltip\": \"*text*\"\n    },\n    \"ancestorProperties\": { \n        \"metadata\":\"sap.m.ColumnListItem\",\n        \"ancestorProperties\": {\n            \"metadata\": \"sap.m.Table\",\n            \"items\":  {\"path\": \"oDataModelName&gt;PurchaseOrderItems\"},\n            \"siblingProperties\": {...},\n            ...\n      },\n    },\n    \"descendantProperties\": {\"metadata\":\"sap.m.Icon\"},\n    \"siblingProperties\": {\"metadata\":\"sap.m.Input\"},\n    }\n</code></pre> <p>Tip</p> <p>For most of the cases it will be sufficient to provide only the elementProperties. Qmate Suite will generate the minimal unique selector for you.</p>"},{"location":"sections/features/selectors/#overview","title":"Overview","text":"<p>The following properties apply to all selector types (elementProperties, ancestorProperties, parentProperties, siblingProperties, prevSiblingProperties, nextSiblingProperties, childProperties, descendantProperties).</p> Property Description Sample Format Remark <code>metadata</code> the control type <code>\"metadata\": \"sap.m.Button\"</code>, <code>\"metadata\": \"sap.m.Input\"</code> string: <code>\"property\": \"value\"</code> <code>&lt;ui5Property&gt;</code> UI5 properties including aggregations and associations, as defined in the official UI5 API <code>\"text\": \"Amount\"</code>, <code>\"tooltip\": \"Amount\"</code>, <code>\"title\": \"Currency\"</code>, <code>\"enabled\": true</code> string: <code>\"property\": \"value\"</code>, numeric: <code>\"property\": 123</code>, boolean: <code>\"property\": true</code> <code>id</code> the ID of the control <code>\"id\": \"myButtonId\"</code>, <code>\"id\": \"my*Id*\"</code> string: <code>\"property\": \"value\"</code> <code>viewName</code> the view name <code>\"viewName\": \"myViewName\"</code>, <code>\"viewName\": \"*view*\"</code> string: <code>\"property\": \"value\"</code> <code>viewId</code> the view ID <code>\"viewId\": \"*myViewId*\"</code> string: <code>\"property\": \"value\"</code> <code>bindingContextPath</code> the binding context path <code>\"bindingContextPath\": \"/odata/entity('1')\"</code>, <code>\"bindingContextPath\": \"/odata/entity(*)*\"</code> string: <code>\"property\": \"value\"</code> binding property paths the binding property paths of the model (for all types of properties: UI properties, aggregations, associations) <code>\"text\":[{\"path\": \"oDataModelName&gt;companyChangedManually\"}]</code>, <code>\"title\": {\"path\": \"oDataModelName&gt;companyChangedTitle\"}</code>,  <code>\"items\": {\"path\": \"oDataModelName&gt;PurchaseOrderItems\"}</code>, <code>\"enabled\": [{\"path\": \"company*Enabled*\"}]</code>, json: <code>\"items\": {\"path\": ...}</code>, array: <code>\"items\": [{\"path\": ...}, {\"path\": ...} ...]</code> model name is optional i18n keys the binding properties path for i18n <code>\"tooltip\": [{\"path\": \"i18n&gt;welcomeDescription\"}]</code>, <code>\"tooltip\": {\"path\": \"i18n&gt;welcomeDescription\"}</code>, <code>\"tooltip\": [{\"path\": \"*i18n*welcomeDescription\"}]</code> json: <code>\"items\": {\"path\": ...}</code>, array: <code>\"items\": [{\"path\": ...}, {\"path\": ...} ...]</code> i18n is a model, and therefore all the above mentioned rules (as described in binding property paths) apply <code>domProperties</code> the properties of the DOM <code>\"domProperties\": {\"nodeName\": \"div\", \"class\": \"buttonNU* class2*\", \"id\": \"my*Id*\"}</code> string: <code>\"property\": \"value\"</code>, numeric: <code>\"property\": 123</code>, boolean: <code>\"property\": true</code> can be used if the UI5 Virtual DOM is not sufficient <p>Info</p> <p>Wildcards are supported for all properties, aggregation and associations  <pre><code>\"text\": \"my*text*\"\n</code></pre></p>"},{"location":"sections/features/selectors/#nested-properties","title":"Nested Properties","text":"<p>In case you need to specify the element based on its surrounding, you can define nested properties.  <pre><code>\"elementProperties\": {\n    ...\n    \"ancestorProperties\": {\n        \"metadata\": \"sap.m.ColumnListItem\",\n        \"ancestorProperties\": {\n            \"metadata\": \"sap.m.Table\",\n            \"items\": { \"path\": \"oDataModelName&gt;PurchaseOrderItems\" },\n            \"siblingProperties\": {...},\n            ...\n        },\n    }\n};\n</code></pre></p> <p>Info</p> <p>Nesting is enabled infinitely for ancestorProperties, siblingProperties and descendantProperties. Be cautious, the more level of nesting you add the slower your script will be.</p>"},{"location":"sections/features/selectors/#usage-of-selectors","title":"Usage of Selectors","text":"<p>For almost every UI5 action we provide, you can pass the selector directly to the function like: <pre><code>it(\"Step 01: click on 'Save' button\", async function () {\n  const selector = {\n    \"elementProperties\": {\n      \"metadata\": \"sap.m.Button\",\n      \"text\": \"Save\"\n    }\n  };\n  await ui5.userInteraction.click(selector);\n});\n</code></pre></p>"},{"location":"sections/features/selectors/#non-ui5","title":"Non UI5","text":""},{"location":"sections/features/selectors/#defining-the-element","title":"Defining the element","text":"<p>For all non UI5 applications you can define the element in different ways. We provide all common functionalities to get an element by its ID, Class or any other CSS attribute. Hence, you can not pass any selector directly to the function performing an action. Instead, you have to define the element first with one of the provided methods. <pre><code>// Get an element by its ID\nconst elem = await nonUi5.element.getById(\"button-abc\");\n\n// Get an element by its class (pass an index if there are more than one elements with the same class)\nconst elem = await nonUi5.element.getByClass(\".button\", 0);\n\n// Get an element by its attribute value of \"title\"\nconst elem = await nonUi5.element.getByCss(\"input[title='name']\");\n\n// Get an element by its class and text value\nconst elem = await nonUi5.element.getByCssContainingText(\".button\", \"Save\");\n</code></pre></p> <p>Info</p> <p>To get a complete overview about all possible methods, please see nonUi5.element. </p>"},{"location":"sections/features/selectors/#getting-the-attributes-manually","title":"Getting the attributes manually","text":"<p>To get the properties of an element manually, please follow the steps below:</p> <ol> <li> <p>Open the dev-tools F12 and switch to the Elements Tab.</p> </li> <li> <p>Select the element (right click \u279c inspect)</p> </li> <li> <p>Find any attribute or set of attributes to identify the element  clearly.</p> </li> <li> <p>To verify the uniqueness of the element, switch to the Console tab of the dev-tools and type in the following command using your found attribute/s: <pre><code>$$(\"[&lt;attr&gt;='&lt;attrValue&gt;']\");\n</code></pre></p> </li> </ol> <p>Warning</p> <p>If there are more than one elements found, try to find another attribute or add some more attributes until you will find a single element (you can still pass an index to the reuse function if you are not able to find a unique selector).</p>"},{"location":"sections/features/selectors/#usage","title":"Usage","text":"<p>To perform the action, pass the defined element to the action function. <pre><code>it(\"Step 01: click on 'Save' button\", async function () {\n    const elem = await nonUi5.element.getByCss(\".saveButton\");\n    await nonUi5.userInteraction.click(elem);\n});\n</code></pre></p>"},{"location":"sections/gettingStarted/config/","title":"Config","text":"<p>Related Topics: Features \u276f Config</p>"},{"location":"sections/gettingStarted/config/#enable-qmate-service","title":"Enable Qmate Service","text":"<p>To use our service you have to enable <code>@sap_oss/wdio-qmate-service</code> in your config.js.</p> config.js<pre><code>const QmateService = require(\"@sap_oss/wdio-qmate-service\");\n\nexports.config = {\n    // ...\n  services: [[QmateService]],\n    // ...\n};\n</code></pre> <p>WebdriverIO Parameters</p> <p>For more information about how to setup your config, please see the official documentation from WebdriverIO.</p>"},{"location":"sections/gettingStarted/execution/","title":"Execution","text":""},{"location":"sections/gettingStarted/execution/#run-your-test","title":"Run your test","text":"<p>To execute your test you have to call your <code>config.js</code></p> <pre><code>npx wdio config.js\n</code></pre>"},{"location":"sections/gettingStarted/setup/","title":"Setup","text":""},{"location":"sections/gettingStarted/setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Make sure Node.js is installed on your computer.</li> <li>To use Qmate Service, you will have to install WebdriverIO. </li> </ul>"},{"location":"sections/gettingStarted/setup/#installation","title":"Installation","text":"<p>To install the latest version of the service, simply execute the following command: <pre><code>npm install @sap_oss/wdio-qmate-service\n</code></pre></p>"},{"location":"sections/gettingStarted/spec/","title":"Spec","text":"<p>Related Topics: Features \u276f Spec |\u00a0Features \u276f Selectors</p>"},{"location":"sections/gettingStarted/spec/#sample","title":"Sample","text":"<p>Inside the .spec.js file, you define the sequence of steps for your test script. Each file consists of at least one describe block. clickGoOnListReport.spec.js<pre><code>describe(\"clickGoOnListReport - click 'Go' on ListReport\", function () {\n\n  it(\"Step 01: Navigate to your application\", async function () {\n    await ui5.navigation.navigateToApplication(\"PurchaseOrder-manage\")\n  });\n\n  it(\"Step 02: Navigate\", async function () {\n    await ui5.session.login(\"JOHNDOE\", \"Greetings1!\");\n  });\n\n  it(\"Step 03: Click 'Go' on ListReport\", async function () {\n    const selector = {\n      \"elementProperties\": {\n        \"viewName\": \"sap.suite.ui.generic.template.ListReport.view.ListReport\",\n        \"metadata\": \"sap.m.Button\",\n        \"id\": \"*listReportFilter-btnGo\"\n      }   \n    };\n    await ui5.userInteraction.click(selector);\n  });\n\n  // ...\n\n});\n</code></pre></p>"},{"location":"sections/gettingStarted/specs/","title":"Specs","text":"<p>Inside the .spec.js file, you define the sequence of steps for your test script. Each file consists of at least one describe block.</p> <pre><code>describe(\"01_yourScript - describe the test\", function () {\n\n    it(\"Step 01: describe the step\", async function () {\n        // [...]\n    });\n\n    it(\"Step 02: describe the step\", async function () {\n        // [...]\n    });\n\n    // [...]\n\n});\n</code></pre>"},{"location":"sections/support/bugReporting/","title":"Bug Reporting &amp; Feature Requests","text":"<p>Related Topics: Troubleshooting | Known Issues &amp; Limitations</p>"},{"location":"sections/support/bugReporting/#report-a-bug","title":"Report a Bug","text":"<p>Important Information</p> <p>Before you open an issue, please go through the checklist below.</p> <ul> <li> Have a look at the troubleshooting and known Issues &amp; Limitations section first, and check if a solution for your issue already exists.</li> <li> Be sure that there is no syntactical error displayed in the error log.</li> <li> Provide links to pipelines/gh-actions and/or specs/files of your repository.</li> <li> Provide a detailed analysis and add screenshots if possible.</li> <li> Follow the template given when opening an issue.</li> </ul> <p>Report a Bug </p>"},{"location":"sections/support/bugReporting/#request-a-feature","title":"Request a Feature","text":"<p>If you want to request a feature, please make sure that it will add a common value to Qmate Service.  </p> <p>Request a Feature </p>"},{"location":"sections/support/knownIssuesAndLimitations/","title":"Known Issues &amp; Limitations","text":""},{"location":"sections/support/troubleshooting/","title":"Troubleshooting","text":"<p>If you find any bug or issue which is not listed below, please open a new issue in the qmate repository. Thanks for your support.</p>"},{"location":"sections/support/troubleshooting/#sessionnotcreatederror","title":"SessionNotCreatedError","text":"Error Message <p><code>Error: SessionNotCreatedError: session not created: This version of ChromeDriver only supports Chrome version 89 Current browser version is 91.0.4472.77 with binary path C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe</code></p> Possible Reasons <p>The installed chromedriver does not support the current chrome-browser version or vice versa.</p> Possible Solutions <ul> <li>Please update your chromedriver version.  </li> <li>Also update your Chrome Browser version by visiting About Google Chrome. This will automatically trigger the Chrome Browser update. You will have to restart Chrome after the update is completed.</li> </ul>"}]}