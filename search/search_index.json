{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Qmate Service Qmate Service is a custom WebdriverIO service for testing web applications and APIs. Note The latest release of the Qmate Service is compatible with WebdriverIO V8 . Main features The main features of this service are: Supporting UI5 and OPA Selectors Reuse API with useful functions for UI5 and any other type of web application REST & OData API testing Dynamic test data handling Reuse API","title":"About"},{"location":"#qmate-service","text":"Qmate Service is a custom WebdriverIO service for testing web applications and APIs. Note The latest release of the Qmate Service is compatible with WebdriverIO V8 .","title":"Qmate Service"},{"location":"#main-features","text":"The main features of this service are: Supporting UI5 and OPA Selectors Reuse API with useful functions for UI5 and any other type of web application REST & OData API testing Dynamic test data handling Reuse API","title":"Main features"},{"location":"doc/","text":"Constants common Global namespace for common modules. util Global namespace for util modules. ui5 Global namespace for UI5 modules. nonUi5 Global namespace for non UI5 modules. service Global namespace for service modules. common Global namespace for common modules. Kind : global constant common .assertion .expectEqual(value1, value2) .expectUnequal(value1, value2) .expectTrue(value) .expectFalse(value) .expectDefined(value) .expectUndefined(value) .expectUrlToBe() .date .getToday([format]) \u21d2 String .getTomorrow([format]) \u21d2 String .getNextMonth([format]) \u21d2 String .getPreviousMonth([format]) \u21d2 String .getNextYear([format]) \u21d2 String .getPreviousYear([format]) \u21d2 String .getSpecific(date, [format]) \u21d2 String .calculate([date], [format]) \u21d2 String .navigation .navigateToUrl(url) .navigateToUrlAndRetry(url, [retries], [interval]) .userInteraction .fillActive(value) .fillActiveAndRetry(value, [retries], [interval]) .clearAndFillActive(value) .clearAndFillActiveAndRetry(value, [retries], [interval]) .pressKey(keys) .pressEnter() .pressTab() .pressF4() .pressBackspace() .pressEscape() .pressArrowLeft() .pressArrowRight() common.assertion Kind : static class of common .assertion .expectEqual(value1, value2) .expectUnequal(value1, value2) .expectTrue(value) .expectFalse(value) .expectDefined(value) .expectUndefined(value) .expectUrlToBe() assertion.expectEqual(value1, value2) Expects the passed values to be equal. Kind : static method of assertion Param Type Description value1 Any Value (1) to be equal to value (2) value2 Any Value (2) to be equal to value (1) Example common . assertion . expectEqual ( value1 , value2 ); assertion.expectUnequal(value1, value2) Expects the passed values to be unequal. Kind : static method of assertion Param Type Description value1 Any Value (1) to be unequal to value (2) value2 Any Value (2) to be unequal to value (1) Example common . assertion . expectUnequal ( value1 , value2 ); assertion.expectTrue(value) Expects the passed value to be true. Kind : static method of assertion Param Type Description value Any Value to be equal to true Example common . assertion . expectTrue ( value ); assertion.expectFalse(value) Expects the passed value to be false. Kind : static method of assertion Param Type Description value Boolean The value to be false. Example common . assertion . expectFalse ( false ); assertion.expectDefined(value) Expects the passed values is defined. Kind : static method of assertion Param Type Description value Any Value to be defined (not undefined) Example common . assertion . expectDefined ( value ); assertion.expectUndefined(value) Expects the passed values is undefined. Kind : static method of assertion Param Type Description value Any Value to be undefined Example common . assertion . expectUndefined ( value ); assertion.expectUrlToBe() Expects the url to be the passed value. Kind : static method of assertion Example await common . assertion . expectUrlToBe ( \"www.sap.com\" ); common.date Kind : static class of common .date .getToday([format]) \u21d2 String .getTomorrow([format]) \u21d2 String .getNextMonth([format]) \u21d2 String .getPreviousMonth([format]) \u21d2 String .getNextYear([format]) \u21d2 String .getPreviousYear([format]) \u21d2 String .getSpecific(date, [format]) \u21d2 String .calculate([date], [format]) \u21d2 String date.getToday([format]) \u21d2 String Returns the current day in the given format. Kind : static method of date Returns : String - The date in the given format. Param Type Default Description [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . getToday ( \"mm/dd/yyyy\" ); date.getTomorrow([format]) \u21d2 String Returns tomorrows date in the given format. Kind : static method of date Returns : String - The date in the given format. Param Type Default Description [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . getTomorrow ( \"mm/dd/yyyy\" ); date.getNextMonth([format]) \u21d2 String Returns the current day one month later in the given format. Kind : static method of date Returns : String - The date in the given format. Param Type Default Description [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . getNextMonth ( \"mm/dd/yyyy\" ); date.getPreviousMonth([format]) \u21d2 String Returns the current day one month before in the given format. Kind : static method of date Returns : String - The date in the given format. Param Type Default Description [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . getPreviousMonth ( \"mm/dd/yyyy\" ); date.getNextYear([format]) \u21d2 String Returns the current day one year later in the given format. Kind : static method of date Returns : String - The date in the given format. Param Type Default Description [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . getNextYear ( \"mm/dd/yyyy\" ); date.getPreviousYear([format]) \u21d2 String Returns the current day one year before in the given format. Kind : static method of date Returns : String - The date in the given format. Param Type Default Description [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . getPreviousYear ( \"mm/dd/yyyy\" ); date.getSpecific(date, [format]) \u21d2 String Returns a specific date in the given format. Kind : static method of date Returns : String - The date in the given format. Param Type Default Description date String A specific date string. [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . getSpecific ( \"2020, 0, 17\" , \"mm/dd/yyyy\" ); date.calculate([date], [format]) \u21d2 String Calculates the date based on the input parameter and returns it in the given format. Kind : static method of date Returns : String - The calculated date in the given format. Param Type Default Description [date] String \"today\" Supported values: today, tomorrow, nextMonth, previousMonth, nextYear, previousYear [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"mmm d, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . calculate ( \"today\" , \"mm/dd/yyyy\" ); common.navigation Kind : static class of common .navigation .navigateToUrl(url) .navigateToUrlAndRetry(url, [retries], [interval]) navigation.navigateToUrl(url) Navigates to the passed url. Kind : static method of navigation Param Type Description url String The url. Example await common . navigation . navigateToUrl ( \"www.sap.com\" ); navigation.navigateToUrlAndRetry(url, [retries], [interval]) Navigates to the passed url and retries the function in case of a failure. Kind : static method of navigation Param Type Default Description url String The url to navigate to. [retries] Integer 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Integer 5000 The interval of the retries (ms), can be set in config for all functions under params stepRetriesIntervals. Example await common . navigation . navigateToUrlAndRetry ( \"www.sap.com\" ); common.userInteraction Kind : static class of common .userInteraction .fillActive(value) .fillActiveAndRetry(value, [retries], [interval]) .clearAndFillActive(value) .clearAndFillActiveAndRetry(value, [retries], [interval]) .pressKey(keys) .pressEnter() .pressTab() .pressF4() .pressBackspace() .pressEscape() .pressArrowLeft() .pressArrowRight() userInteraction.fillActive(value) Fills the active input with the given value. Kind : static method of userInteraction Param Type Description value String | Number The value to enter. Example await common . userInteraction . fillActive ( \"My Value\" ); userInteraction.fillActiveAndRetry(value, [retries], [interval]) Enters the given value to the active input field and retries the action in case it fails. Kind : static method of userInteraction Param Type Default Description value String The value to enter. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await common . userInteraction . fillActiveAndRetry ( \"My Value\" ); userInteraction.clearAndFillActive(value) Clears and fills the active input. Kind : static method of userInteraction Param Type Description value String The value to fill. Example await common . userInteraction . clearAndFillActive ( \"My Value\" ); userInteraction.clearAndFillActiveAndRetry(value, [retries], [interval]) CClears and fills the active input. Retries the action in case of a failure. Kind : static method of userInteraction Param Type Default Description value String The value to fill. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await common . userInteraction . clearAndFillActiveAndRetry ( \"My Value\" ); userInteraction.pressKey(keys) Performs the specified keypress. Possible values: https://w3c.github.io/webdriver/#keyboard-actions Kind : static method of userInteraction Param Type Description keys String | Array.<String> The key or combination of keys to execute. Example await common . userInteraction . pressKey ( \"Enter\" ); Example await common . userInteraction . pressKey ( \"\\uE004\" ); Example await common . userInteraction . pressKey ([ \"\\uE009\" , \"Alt\" ]); userInteraction.pressEnter() Performs the Enter keypress. Kind : static method of userInteraction Example await common . userInteraction . pressEnter (); userInteraction.pressTab() Performs the Tab keypress. Kind : static method of userInteraction Example await common . userInteraction . pressTab (); userInteraction.pressF4() Performs the F4 keypress. Kind : static method of userInteraction Example await common . userInteraction . pressF4 (); userInteraction.pressBackspace() Performs the Backspace keypress. Kind : static method of userInteraction Example await common . userInteraction . pressBackspace (); userInteraction.pressEscape() Performs the Escape keypress. Kind : static method of userInteraction Example await common . userInteraction . pressEscape (); userInteraction.pressArrowLeft() Performs the Arrow Left keypress. Kind : static method of userInteraction Example await common . userInteraction . pressArrowLeft (); userInteraction.pressArrowRight() Performs the Arrow Right keypress. Kind : static method of userInteraction Example await common . userInteraction . pressArrowRight (); util Global namespace for util modules. Kind : global constant util .browser .getBaseUrl() \u21d2 String .setBaseUrl(baseUrl:) .logCurrentUrl() .getCurrentUrl() .resetFocus() .sleep([duration]) .collectCoverage() .sleepAndCollectCoverage([duration]) .refresh() .clearBrowser([clearLocal], [clearSession], [clearCookies]) .getBrowserName() \u21d2 String .getUI5Version([timeout]) .logUI5Version() .executeScript(command) \u21d2 Any .switchToNewWindow(titleOrUrl, [timeout]) .switchToWindow(handle) .getCurrentWindow() \u21d2 Object .switchToIframe(selector) .switchToDefaultContent() .back() .log(message) .warn(message) .error(message) .component new component() .loadEntryPoint([folderPath]) \u21d2 Object .storeEntryPoint(data, [folderPath]) .console .log(message, [textColor], [backgroundColor], [brightness]) .error(message) .warn(message) .success(message) .info(message) .data .getData(filename, [source]) \u21d2 Object .getSecureData(filename, [source]) \u21d2 Object .readDataFromFile(filePath) \u21d2 Object .writeDataToFile(filePath, data) .decrypt(data) \u21d2 Object .file .upload(files, [selector]) .uploadWebGui(files, selector) .parsePdf(pdfStream, renderingMethod) \u21d2 String .expectPdfContainsText(pdfStream, text, renderingMethod) .expectPdfNotContainsText(pdfStream, text, renderingMethod) .getExcelData(filePath, fileName, [sheetIndex], [conversionType]) .getTextData(filePath) .expectTextDataToContain(filePath) .getXmlData(filePath) .getAttributeValuesFromJson(object) .findFilePathRecursively(directory, fileName) .getFileNamesByExtensions(dirPath, fileExtensions) .formatter .sliceStringAt(input, slicePoint, length) \u21d2 String .sliceStringAfter(input, slicePoint, length) \u21d2 String .trimString(input) .extractNumberFromString(input, [index]) \u21d2 String .stringifyJSON(object) \u21d2 String .addRemoveLeadingZeros(number, length) \u21d2 String .formatDate(date, format, [locale]) \u21d2 String .function .retry(fct, args, [retries], [interval], [scope]) .executeOptional(fct, args) .system .getOS() \u21d2 String util.browser Kind : static class of util .browser .getBaseUrl() \u21d2 String .setBaseUrl(baseUrl:) .logCurrentUrl() .getCurrentUrl() .resetFocus() .sleep([duration]) .collectCoverage() .sleepAndCollectCoverage([duration]) .refresh() .clearBrowser([clearLocal], [clearSession], [clearCookies]) .getBrowserName() \u21d2 String .getUI5Version([timeout]) .logUI5Version() .executeScript(command) \u21d2 Any .switchToNewWindow(titleOrUrl, [timeout]) .switchToWindow(handle) .getCurrentWindow() \u21d2 Object .switchToIframe(selector) .switchToDefaultContent() .back() .log(message) .warn(message) .error(message) browser.getBaseUrl() \u21d2 String Retrieves the baseUrl from the configuration file. Kind : static method of browser Returns : String - The baseUrl. Example const baseUrl = util . browser . getBaseUrl (); browser.setBaseUrl(baseUrl:) Sets or overwrites the baseUrl in the configuration file. Kind : static method of browser Param Type Description baseUrl: String base URL to set Example await util . browser . setBaseUrl ( \"https://www.sap.com\" ); browser.logCurrentUrl() Displays the current URL in the console. Kind : static method of browser Example await util . browser . logCurrentUrl (); browser.getCurrentUrl() Returns the current URL Kind : static method of browser Example await util . browser . getCurrentUrl (); browser.resetFocus() Resets the focus in case it set for a specific element. Kind : static method of browser Example await util . browser . resetFocus (); browser.sleep([duration]) Sleeps (pauses execution) for the passed duration. Kind : static method of browser Param Type Default Description [duration] Number 1000 The time to pause (ms). Example await util . browser . sleep ( 30000 ); browser.collectCoverage() Trigger collection of coverage by coverage service. Kind : static method of browser Example await util . browser . collectCoverage (); browser.sleepAndCollectCoverage([duration]) Trigger collection of coverage by coverage service. Kind : static method of browser Param Type Default Description [duration] Number 1000 The time to pause (ms). Example await util . browser . sleepAndCollectCoverage ( 3000 ); browser.refresh() Refreshes the page. Kind : static method of browser Example await util . browser . refresh (); browser.clearBrowser([clearLocal], [clearSession], [clearCookies]) Clears the local and session cache and deletes all browser cookies. Kind : static method of browser Param Type Default Description [clearLocal] Boolean true Specifies if the local cache will be cleared. [clearSession] Boolean true Specifies if the session cache will be cleared. [clearCookies] Boolean true Specifies if the cookies will be cleared. Example await util . browser . clearBrowser (); browser.getBrowserName() \u21d2 String Retrieves the name of the current browser. Kind : static method of browser Returns : String - The browser name. Example const browserName = util . browser . getBrowserName (); browser.getUI5Version([timeout]) Gets the UI5 version and creation date for UI5 based applications. Kind : static method of browser Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await util . browser . getUI5Version (); browser.logUI5Version() Logs the UI5 version and creation date for UI5 based applications to the console. Kind : static method of browser Example await util . browser . logUI5Version (); browser.executeScript(command) \u21d2 Any Executes the specified JavaScript command. Kind : static method of browser Returns : Any - The result from the executed function. Param Type Description command String The command to execute. Example await util . browser . executeScript ( command ); browser.switchToNewWindow(titleOrUrl, [timeout]) Switches to the window or tab with the given title. Kind : static method of browser Param Type Default Description titleOrUrl String | RegExp Window title or url of the expected window or tab (can be either a string or part of it as regular expression). [timeout] Number 10000 The timeout to wait (ms). Example await util . browser . switchToNewWindow ( \"SAP - Home\" ); Example await util . browser . switchToNewWindow ( /Home/ ); Example await util . browser . switchToNewWindow ( \"www.sap.com\" ); browser.switchToWindow(handle) Switches to the passed window. Kind : static method of browser Param Type Description handle Object The window handle. Example await util . browser . switchToWindow ( originalWindowHandle ); browser.getCurrentWindow() \u21d2 Object Returns the current window handle. Kind : static method of browser Returns : Object - The window handle. Example const originalWindowHandle = await util . browser . getCurrentWindow (); browser.switchToIframe(selector) Switches to the passed iframe. Kind : static method of browser Param Type Description selector String The CSS selector describing the iframe element. Example await util . browser . switchToIframe ( \"iframe[id='frame01']\" ); browser.switchToDefaultContent() Switches to the default content of the HTML page. Kind : static method of browser Example await util . browser . switchToDefaultContent (); browser.back() Go one step back in browser history. Kind : static method of browser Example await util . browser . back (); browser.log(message) add log message to browser logs, can be viewed in the html report Kind : static method of browser Param Type Description message String string - The message to be logged. Example await util . browser . log ( \"Created PO 123456\" ); browser.warn(message) add warning message to browser logs, can be viewed in the html report Kind : static method of browser Param Type Description message String string - The warning message to be logged. Example await util . browser . warn ( \"This is a warning message\" ); browser.error(message) add error message to browser logs, can be viewed in the html report Kind : static method of browser Param Type Description message String string - The error message to be logged. Example await util . browser . error ( \"This is an error message\" ); util.component Kind : static class of util .component new component() .loadEntryPoint([folderPath]) \u21d2 Object .storeEntryPoint(data, [folderPath]) new component() This class provides functions for writing component tests with qmate-proxy-service component.loadEntryPoint([folderPath]) \u21d2 Object Will be called in component test scripts. Returns a previously stored entry point object for sharing information (like a draft id) between preparation and the actual component tests. Kind : static method of component Returns : Object - The data object of the stored entry point. Param Type Default Description [folderPath] String \"./entrypoints\" Custom folder path where entry points are stored. Example const entryPoint = util . component . loadEntryPoint (); component.storeEntryPoint(data, [folderPath]) Will be called in preparation scripts before component tests. Stores an entry point object for sharing information (like a draft id) between preparation and the actual component tests. Kind : static method of component Param Type Default Description data Object The data object of the entry point to store. [folderPath] String \"./entrypoints\" Custom folder path where entry points are stored. Example const entryPoint = util . component . storeEntryPoint ({ \"draftId\" : \"0123456789\" }); util.console Kind : static class of util .console .log(message, [textColor], [backgroundColor], [brightness]) .error(message) .warn(message) .success(message) .info(message) console.log(message, [textColor], [backgroundColor], [brightness]) Logs a message to the console in the given color. Kind : static method of console Param Type Description message String The message to log. [textColor] String The color of the text: \"black, white\", \"red\", \"yellow\", \"green\", \"blue\", \"cyan\", \"magenta\". [backgroundColor] String The color of the background: \"black, white\", \"red\", \"yellow\", \"green\", \"blue\", \"cyan\", \"magenta\". [brightness] String Adjusts the brightness of the color: \"bright\", \"dim\". Leave empty for default. Example util . console . log ( \"The document has been saved.\" , \"green\" ); console.error(message) Logs a error message to the console in red. Kind : static method of console Param Type Description message String The message to log. Example util . console . error ( \"Error: Please investigate.\" ); console.warn(message) Logs a warning message to the console in yellow. Kind : static method of console Param Type Description message String The message to log. Example util . console . warn ( \"Optional step not executed.\" ); console.success(message) Logs a success message to the console in green. Kind : static method of console Param Type Description message String The message to log. Example util . console . success ( \"The document has been saved.\" ); console.info(message) Logs a info message to the console in cyan. Kind : static method of console Param Type Description message String The message to log. Example util . console . success ( \"The document has been saved.\" ); util.data Kind : static class of util .data .getData(filename, [source]) \u21d2 Object .getSecureData(filename, [source]) \u21d2 Object .readDataFromFile(filePath) \u21d2 Object .writeDataToFile(filePath, data) .decrypt(data) \u21d2 Object data.getData(filename, [source]) \u21d2 Object Returns the data object with the given filename (JSON, stored in data folder). Kind : static method of data Returns : Object - The data object. Param Type Default Description filename String The name of the data file. [source] String data The source key defined under params.import of the config file. Example const data = util . data . getData ( \"myTest\" ); data.getSecureData(filename, [source]) \u21d2 Object Returns and encrypts the data object with the given filename (JSON, stored in data folder). Will return the local file object if private key is not accessible. Kind : static method of data Returns : Object - The encrypted or local data object. Param Type Default Description filename String The name of the data file (without suffix '.secure' or '.local'). [source] String data The source key defined under params.import of the config file. Example const secureData = util . data . getSecureData ( \"myTest\" ); data.readDataFromFile(filePath) \u21d2 Object Reads the data object from the given filepath. Kind : static method of data Returns : Object - The data object. Param Type Description filePath String The filepath. Example const data = util . data . readDataFromFile ( \"./data/myData.json\" ); data.writeDataToFile(filePath, data) Writes the data object to the given filepath. Kind : static method of data Param Type Description filePath String The filepath. data Object The data object to write. Example const data = util . data . writeDataToFile ( \"myTest\" ); data.decrypt(data) \u21d2 Object Decrypts the passed input data. Kind : static method of data Returns : Object - The decrypted data. Param Type Description data String The encrypted data to decrypt. Example const decrypted = util . data . decrypt ( \"d704004c262faa8ef4bdcf34c8a94883e15524872c7bef334d26a391a1934cf47338b749d99426980ee4cc7a81deaef21439c6894ab0324cdb29b9b6332635baca442651c5d37847f52bb90b8868e037271a7d456024b39b65fdf4dc62e8d82a3d5683a72e4324c59d339742fc79749f0ee74abef916d38e306218adc48e3547a2b346962249320c962d22cb46d9998de36d8219a2496c0997d0fc389f76fb1431a9b57c317886e9c9795c0a09ad98d9fa0b7687d10814dc7973397f3f72a227a04ead4c3d1d428c096a51922ffc4d7afc3952df1c130def5c5fb3e834605cbf1454885966cc65c77046343f4c678e74931fb2dd6cac8dae17837cf674f288d6550dd7fa6b01f5b7ea68aa6bd27d79dd5d53edb5fd4b4edce824bd31b3939352ad7a71a16bab8c54025c2bb92c54e022fcd23ff08bc54a17fc50d00dc3b884cadbfdefe1e75901fdf80e7324ad02a891f2c4863fa120ca238520b79126c65a03\" ); util.file Kind : static class of util .file .upload(files, [selector]) .uploadWebGui(files, selector) .parsePdf(pdfStream, renderingMethod) \u21d2 String .expectPdfContainsText(pdfStream, text, renderingMethod) .expectPdfNotContainsText(pdfStream, text, renderingMethod) .getExcelData(filePath, fileName, [sheetIndex], [conversionType]) .getTextData(filePath) .expectTextDataToContain(filePath) .getXmlData(filePath) .getAttributeValuesFromJson(object) .findFilePathRecursively(directory, fileName) .getFileNamesByExtensions(dirPath, fileExtensions) file.upload(files, [selector]) Uploads all the file/s by the paths given in the Array. Kind : static method of file Param Type Default Description files Array.<String> Array with path/s of file/s to be uploaded. [selector] String \"input[type='file']\" Custom selector of uploader control (in case there are more then one present). Example await util . file . upload ([ \"path/to/text1.txt\" , \"path/to/text2.txt\" ]); // uses the default uploader control Example await util . file . upload ([ \"path/to/text1.txt\" , \"path/to/text2.txt\" ], \"input[id='myUpload']\" ); // upload to file uploader with matching selector file.uploadWebGui(files, selector) Uploads all the file/s by the paths given in the Array for SAP WebGUI apps. Kind : static method of file Param Type Description files Array.<String> Array with path/s of file/s to be uploaded. selector String Custom selector of the input element Example await util . file . uploadWebGui ([ \"path/to/text1.txt\" ], \"INPUT[title='External file name']\" ); file.parsePdf(pdfStream, renderingMethod) \u21d2 String Parses the text from PDF stream. Returned text can be asserted to verify the PDF document content. Kind : static method of file Returns : String - The parsed PDF text. See : Parse PDF Param Type Description pdfStream Buffer PDF stream to be downloaded. renderingMethod function Function to customize the parsing process. Example await util . file . parsePdf ( pdfStream , customRenderingMethod ); file.expectPdfContainsText(pdfStream, text, renderingMethod) Parses the PDF and checks for given text to be contained in PDF. Kind : static method of file See : Parse pdf Param Type Description pdfStream Buffer PDF stream to be downloaded. text String The expected text. renderingMethod function Function to customize the parsing process. Example await util . file . expectPdfContainsText ( pdfStream , \"abc\" ); file.expectPdfNotContainsText(pdfStream, text, renderingMethod) Parses the PDF and checks for given text not to be contained in PDF. Kind : static method of file See : Parse pdf Param Type Description pdfStream Buffer PDF stream to be downloaded text String The text expected to be not contained in the PDF. renderingMethod function Function to customize the parsing process. Example await util . file . expectPdfNotContainsText ( pdfStream , \"abc\" ); file.getExcelData(filePath, fileName, [sheetIndex], [conversionType]) It returns the excel data based on the conversion type which is passed Kind : static method of file Param Type Description filePath string File path is required fileName string File Name is required [sheetIndex] number sheetIndex is required [conversionType] string Value for this are [json, csv, txt] Example const myTableContent = await util . file . getExcelData ( \"/Users/path/myWork\" , \"myTable.xlx\" ); file.getTextData(filePath) Returns the content of a .txt file. Kind : static method of file Param Type Description filePath string Path to the file. Example const txtData = await util . file . getTextData ( path . resolve ( __dirname , \"./testFiles/test3.txt\" )); const isDateIncluded = txtData . includes ( \"26.6.2023\" ); common . assertion . expectEqual ( isDateIncluded , true ); file.expectTextDataToContain(filePath) Reads the specified .txt file and asserts if it includes a specific string. Kind : static method of file Param Type Description filePath string Path to the file. Example await util . file . expectTextDataToContain ( \"/Users/path/myWork\" , \"supplierList.txt\" ); file.getXmlData(filePath) Returns the converted JSON object based on the passed XML file. Kind : static method of file Param Type Description filePath string Path to the file. Example const xmlData = await util . file . getXmlData ( path . resolve ( __dirname , \"./testFiles/test2.xml\" )); file.getAttributeValuesFromJson(object) Traverses the passed JSON object and returns the value/s of the passed attribute if found. Else returns empty Array. Kind : static method of file Param Type Description object object The JSON Object to search through. Example const attribute = util . file . getAttributeValuesFromJson ( xmlData , \"CtrlSum\" ); file.findFilePathRecursively(directory, fileName) Returns the absolute path of the file with the given filename. Searches Recursively for the file within the given directory. Kind : static method of file Param Type Description directory string The name of the directory. fileName string The name of the file. Example await util . file . findFilePathRecursively ( \"/Users\" , \"test.xls\" ); file.getFileNamesByExtensions(dirPath, fileExtensions) Returns the filename/s of the given directory filtered by the given extensions. Kind : static method of file Param Type Description dirPath string The path to the directory. fileExtensions string | Array.<string> The file extension as string or multiple as string array. Example const fileName = await util . file . getFileNamesByExtensions ( \"regression/downloads\" , \"xml\" ); const fileNames = await util . file . getFileNamesByExtensions ( \"regression/downloads\" , \"[\" xml \", \" txt \"]\" ); util.formatter Kind : static class of util .formatter .sliceStringAt(input, slicePoint, length) \u21d2 String .sliceStringAfter(input, slicePoint, length) \u21d2 String .trimString(input) .extractNumberFromString(input, [index]) \u21d2 String .stringifyJSON(object) \u21d2 String .addRemoveLeadingZeros(number, length) \u21d2 String .formatDate(date, format, [locale]) \u21d2 String formatter.sliceStringAt(input, slicePoint, length) \u21d2 String Slices the given string beginning at a specific substring. Kind : static method of formatter Returns : String - The sliced string. Param Type Description input String The input string to slice. slicePoint String The substring at which the input string is being sliced. length number The required length of the returning string (starting at the index of the passed slice point). Example const sliced = util . formatter . sliceStringAt ( \"prefixNR12345postfix\" , \"NR\" , 7 ); // returns \"NR12345\" formatter.sliceStringAfter(input, slicePoint, length) \u21d2 String Slices the given string after a specific substring. Kind : static method of formatter Returns : String - The sliced string. Param Type Description input String The input string to slice. slicePoint String The substring after which the input string is being sliced. length number The required length of the returning string (starting at the index after the passed slice point). Example const sliced = util . formatter . sliceStringAfter ( \"prefixNR12345postfix\" , \"NR\" , 5 ); // returns \"12345\" formatter.trimString(input) Removes whitespace from both sides of the given string. Kind : static method of formatter Param Type Description input String The input string to trim. Example const trimmed = util . formatter . trimString ( \" value \" ); // returns \"value\" formatter.extractNumberFromString(input, [index]) \u21d2 String Extracts all numbers from a string. Kind : static method of formatter Returns : String - The extracted number. Param Type Default Description input String The input string to extract the number. [index] number 0 If there are multiple numbers in the string you can pass an index to return a specific number. Example const extracted = util . formatter . extractNumberFromString ( \"prefixNR12345postfix\" ); // returns \"12345\" Example const extracted = util . formatter . extractNumberFromString ( \"first12345 someText second 20 abc\" , 1 ); // returns \"20\" formatter.stringifyJSON(object) \u21d2 String Converts a JSON object to string. Kind : static method of formatter Returns : String - The converted JSON object. Param Type Description object Object The JSON to be converted. Example console . log ( `Printing the current selector: ${ util . formatter . stringifyJSON ( selector ) } ` ); formatter.addRemoveLeadingZeros(number, length) \u21d2 String Adds or removes leading zeros to the passed number to format it to the required length. Kind : static method of formatter Returns : String - The formatted number. Param Type Description number String The number to be formatted. length Number The required length of the number. Example const itemNumber = util . formatter . addRemoveLeadingZeros ( 10 , 5 ); formatter.formatDate(date, format, [locale]) \u21d2 String formats date. Kind : static method of formatter Returns : String - The formatted date as string. Param Type Default Description date Date The date object to be formatted. format String The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"mmm d, yyyy\", \"datetime\", \"object\"). [locale] String \"en-US\" The locale format of the date. E.g. \"en-US\", \"de-DE\", etc. Example const date = new Date ( 2020 , 0 , 17 ); const formattedDate = util . formatter . formatDate ( date , \"mm/dd/yyyy\" ); // returns \"01/17/2020\" Example const date = new Date ( 2022 , 3 , 12 ); const formattedDate = util . formatter . formatDate ( date , \"mmm dd, yyyy\" ); // returns \"Apr 03, 2022\" util.function Kind : static class of util .function .retry(fct, args, [retries], [interval], [scope]) .executeOptional(fct, args) function.retry(fct, args, [retries], [interval], [scope]) Retries the passed function n times with a specific interval until it executed successfully. Kind : static method of function Param Type Default Description fct function The function to retry. args Array An array of the arguments passed to the function. [retries] Integer 3 The number of retries. Can be set in config for all functions under \"params\" - \"stepsRetries\". [interval] Integer 5000 The interval of the retries (ms). Can be set in config for all functions under \"params\" - \"stepRetriesIntervals\". [scope] Object The function scope. Defaults is the global object. Example await util . function . retry ( ui5 . userInteraction . fill , [ selector , value ], 4 , 10000 ); Example await util . function . retry ( async () => { await ui5 . userInteraction . fill ( selector , \"ABC\" ); }, [], 2 , 30000 ); function.executeOptional(fct, args) Executes the given function optionally. If it fails, a promise will be returned anyway. Kind : static method of function Param Type Description fct function The function to execute. args Array An array of the arguments passed to the function. Example await util . function . executeOptional ( ui5 . userInteraction . fill , [ selector , value ]); Example await util . function . executeOptional ( async () => { await ui5 . userInteraction . fill ( selector , \"ABC\" ); }, []); util.system Kind : static class of util system.getOS() \u21d2 String Returns the current operating system. Kind : static method of system Returns : String - AIX | Android | MacOS | FreeBSD | Linux | OpenBSD | Windows | SunOS Example const os = await util . system . getOS (); ui5 Global namespace for UI5 modules. Kind : global constant ui5 .assertion .expectAttributeToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectAttributeToContain(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectTextToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectValueToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectValueToBeDefined(selector, [index], [timeout]) .expectToBeNotEnabled(selector, [index], [timeout], [loadPropertyTimeout]) .expectToBeEnabled(selector, [index], [timeout], [loadPropertyTimeout]) .expectValidationError(selector, [index], [timeout], [loadPropertyTimeout]) .expectValidationSuccess(selector, [index], [timeout], [loadPropertyTimeout]) .expectBindingPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectBindingContextPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectToBeVisible(selector, [index], [timeout], [loadPropertyTimeout]) .expectToBeVisibleInViewport(selector, [index], [timeout], [loadPropertyTimeout]) .expectToBeNotVisible(selector, [index], [timeout]) .expectMessageToastTextToBe(text, [timeout]) .confirmationDialog .clickButton(text, [timeout]) .clickOk([timeout]) .clickCancel([timeout]) .clickYes([timeout]) .clickNo([timeout]) .clickCreate([timeout]) .clickDelete([timeout]) .clickRevokeApproval([timeout]) .control .execute(callbackFunction, selectorOrElement, args) .focus(selector, [index], [timeout]) .getProperty(selectorOrElement, propertyName) .getAggregationProperty(selectorOrElement, propertyName) .getAssociationProperty(selectorOrElement, propertyName) .getBindingContextPathProperty(selectorOrElement) .getPropertyBinding(selectorOrElement, propertyName) \u21d2 Array .date .pick(selector, date, [index]) .pickRange(selector, range, [index]) .fillRange(selector, range, [index]) .element .waitForAll(selector, [timeout]) .getAllDisplayed(selector, [timeout]) \u21d2 Array.<Object> .getDisplayed(selector, [index], [timeout]) \u21d2 Object .getByText(selector, value, [index], [timeout]) \u21d2 Object .getByChild(elementSelector, childSelector, [index], [timeout]) \u21d2 Object .getByParent(elementSelector, parentSelector, [index], [timeout]) \u21d2 Object .getId(selector, [index], [timeout]) \u21d2 String .getPropertyValue(selector, property, [index], [timeout]) \u21d2 any .getValue(selector, [index], [timeout]) \u21d2 String .getBindingValue(selector, bindingContext, [index], [timeout]) \u21d2 String .isVisible(selector, [index], [timeout]) \u21d2 Boolean .highlight(selector, [duration], [color]) .errorDialog .expectToBeVisible() .clickClose() .footerBar .clickButton(text, [timeout]) .clickApply([timeout]) .clickSave([timeout]) .clickCreate([timeout]) .clickCancel([timeout]) .clickCheck([timeout]) .clickOrder([timeout]) .clickPost([timeout]) .clickAdd([timeout]) .mockserver .waitForUi5ApplicationLoad(interval) .interactWithMockServer(mockServerPath, fnCallback, oParams) .attachFunctionBefore(method, mockServerPath, fnBeforeCallback, oParams) .attachFunctionAfter(method, mockServerPath, fnAfterCallback, oParams) .addNewRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation) .removeRequest(method, mockServerPath, urlPathRegex) .addOrOverrideRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation) .startMockServer(mockServerPath) .initMockServer(mockServerPath, mockServerOptions) .initApplication(mockServerPath) .stopMockServer(mockServerPath) .loadMockDataFile(filePath, isText) \u21d2 String .getEntitySetData(mockServerPath, entitySetName) \u21d2 Array .setEntitySetData(mockServerPath, entitySetName, entries) .navigation .navigateToApplication(intent, [preventPopups], [verify], [refresh]) .navigateToApplicationAndRetry(intent, [preventPopups], [verify], [retries], [interval]) .navigateToSystemAndApplication(system, intent, [closePopups], [verify]) .navigateToSystemAndApplicationAndRetry(system, intent, [closePopups], [verify], [retries], [interval]) .navigateToApplicationWithQueryParams(intent, queryParams, [preventPopups], [verify]) .navigateToApplicationWithQueryParamsAndRetry(intent, queryParams, [preventPopups], [verify], [retries], [interval]) .closePopups([timeout]) .expectUnsupportedNavigationPopup(navigationTarget) .navigationBar .clickBack([timeout]) .clickSapLogo([timeout]) .clickUserIcon([timeout]) .expectPageTitle(compareValue) .expectShellHeader([timeout]) .qunit .executeTests(path) .session .login(username, [password], [verify], [timeout]) .loginFiori(username, [password], [verify]) .loginSapCloud(username, [password], [verify]) .loginCustom(username, [password], usernameFieldSelector, passwordFieldSelector, logonButtonSelector, [verify]) .loginCustomViaConfig(username, [password], [verify]) .logout([verify]) .switchUser(username, [password], [authenticator], [wait]) .expectLogoutText() .table .sortColumnAscending(columnName, [tableSelector]) .sortColumnDescending(columnName, [tableSelector]) .clickSettingsButton([tableSelector]) .userInteraction .click(selector, [index], [timeout]) .clickAndRetry(selector, [index], [timeout], [retries], [interval]) .doubleClick(selector, [index], [timeout]) .rightClick(selector, [index], [timeout]) .clickTab(selector, [index], [timeout]) .clickListItem(selector, [index], [timeout]) .check(selector, [index], [timeout]) .uncheck(selector, [index], [timeout]) .fill(selector, value, [index], [timeout]) .fillAndRetry(selector, value, [index], [timeout], [retries], [interval]) .clear(selector, [index], [timeout]) .clearAndRetry(selector, [index], [timeout], [retries], [interval]) .clearAndFill(selector, value, [index], [timeout]) .clearAndFillAndRetry(selector, value, [index], [timeout], [retries], [interval], [verify]) .clearSmartFieldInput(selector, [index], [timeout]) .clearAndFillSmartFieldInput(selector, value, [index], [timeout]) .clearAndFillSmartFieldInputAndRetry(selector, value, [index], [timeout], [retries], [interval]) .selectBox(selector, value, [index]) .selectComboBox(selector, value, [index]) .selectMultiComboBox(selector, values, [index]) .clickSelectArrow(selector, [index]) .clickSelectArrowAndRetry(selector, [index], [retries], [interval]) .selectFromTab(selector, value, [index], [timeout]) .mouseOverElement(selector, [index], [timeout]) .scrollToElement(selector, [index], [alignment], [timeout]) .selectAll([selector], [index], [timeout]) .openF4Help(selector, [index], [timeout], useF4Key) .searchFor(selector, [index], [timeout], useEnter) .resetSearch(selector, [index], [timeout]) ui5.assertion Kind : static class of ui5 .assertion .expectAttributeToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectAttributeToContain(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectTextToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectValueToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectValueToBeDefined(selector, [index], [timeout]) .expectToBeNotEnabled(selector, [index], [timeout], [loadPropertyTimeout]) .expectToBeEnabled(selector, [index], [timeout], [loadPropertyTimeout]) .expectValidationError(selector, [index], [timeout], [loadPropertyTimeout]) .expectValidationSuccess(selector, [index], [timeout], [loadPropertyTimeout]) .expectBindingPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectBindingContextPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectToBeVisible(selector, [index], [timeout], [loadPropertyTimeout]) .expectToBeVisibleInViewport(selector, [index], [timeout], [loadPropertyTimeout]) .expectToBeNotVisible(selector, [index], [timeout]) .expectMessageToastTextToBe(text, [timeout]) assertion.expectAttributeToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) Expects the passed elements attribute to be the compare value. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. attribute String The attribute to be compared. compareValue String | Boolean | Number | Object The compare value. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectAttributeToBe ( selector , \"text\" , \"Hello\" ); assertion.expectAttributeToContain(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) Expects the passed elements attribute to contain the compare value. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. attribute String The attribute to be compared. compareValue String The compare value. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectAttributeToContain ( selector , \"text\" , \"abc\" ); assertion.expectTextToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout]) Expects the passed elements text attribute to be the compare value. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. compareValue String The compare value. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectTextToBe ( selector , \"Hello\" ); assertion.expectValueToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout]) Expects the passed elements value attribute to be the compare value. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. compareValue String | Number The compare value. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectValueToBe ( selector , \"123\" ); assertion.expectValueToBeDefined(selector, [index], [timeout]) Expects the passed elements value to be defined. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . assertion . expectValueToBeDefined ( selector ); assertion.expectToBeNotEnabled(selector, [index], [timeout], [loadPropertyTimeout]) Expects that the element is enabled to the user. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectToBeNotEnabled ( selector ); assertion.expectToBeEnabled(selector, [index], [timeout], [loadPropertyTimeout]) Expects that the element is enabled to the user. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectToBeEnabled ( selector ); assertion.expectValidationError(selector, [index], [timeout], [loadPropertyTimeout]) Expects the \"valueState\" of the element to be \"Error\". Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectValidationError ( selector ); assertion.expectValidationSuccess(selector, [index], [timeout], [loadPropertyTimeout]) Expects the valueState of the element to be \"None\". Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectValidationSuccess ( selector ); assertion.expectBindingPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) Expects the passed elements attribute binding-path to contain the compare value Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. attribute String The attribute to be compared. compareValue String | Array.<String> The compare value(s). [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectBindingPathToBe ( selector , \"text\" , \"Hello\" ); assertion.expectBindingContextPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) Expects the passed elements binding-context-path to be the compare value. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. attribute String The attribute to be compared. compareValue String The compare value. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectBindingContextPathToBe ( selector , \"text\" , \"Hello\" ); assertion.expectToBeVisible(selector, [index], [timeout], [loadPropertyTimeout]) Expects that the element is visible to the user. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectToBeVisible ( selector ); assertion.expectToBeVisibleInViewport(selector, [index], [timeout], [loadPropertyTimeout]) Expects that the element is visible in the viewport. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectToBeVisibleInViewport ( selector ); assertion.expectToBeNotVisible(selector, [index], [timeout]) Expects that the element is not visible to the user. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Recommendation is to lower the timeout since the element is not expected to show up. Example await ui5 . assertion . expectToBeNotVisible ( selector , 0 , 5000 ); assertion.expectMessageToastTextToBe(text, [timeout]) Expects the message toast with the passed text. Kind : static method of assertion Param Type Default Description text String The expected text. [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . assertion . expectMessageToastTextToBe ( text ); ui5.confirmationDialog Kind : static class of ui5 .confirmationDialog .clickButton(text, [timeout]) .clickOk([timeout]) .clickCancel([timeout]) .clickYes([timeout]) .clickNo([timeout]) .clickCreate([timeout]) .clickDelete([timeout]) .clickRevokeApproval([timeout]) confirmationDialog.clickButton(text, [timeout]) Clicks the button with the given text at the confirmation dialog. Kind : static method of confirmationDialog Param Type Default Description text String The text of the button. [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . confirmationDialog . clickButton ( \"Ok\" ); confirmationDialog.clickOk([timeout]) Clicks the \"OK\" button at the confirmation dialog. Kind : static method of confirmationDialog Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . confirmationDialog . clickOk (); confirmationDialog.clickCancel([timeout]) Clicks the \"Cancel\" button at the confirmation dialog. Kind : static method of confirmationDialog Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . confirmationDialog . clickCancel (); confirmationDialog.clickYes([timeout]) Clicks the \"Yes\" button at the confirmation dialog. Kind : static method of confirmationDialog Param Type Description [timeout] Number The timeout to wait (default value: 30 sec). Example await ui5 . confirmationDialog . clickYes (); confirmationDialog.clickNo([timeout]) Clicks the \"Yes\" button at the confirmation dialog. Kind : static method of confirmationDialog Param Type Description [timeout] Number The timeout to wait (default value: 30 sec). Example await ui5 . confirmationDialog . clickNo (); confirmationDialog.clickCreate([timeout]) Clicks the create button in the confirmation dialog Kind : static method of confirmationDialog Param Type Description [timeout] Number The timeout to wait (default value: 30 sec). Example await ui5 . confirmationDialog . clickCreate (); confirmationDialog.clickDelete([timeout]) Clicks the \"Delete\" button at the confirmation dialog. Kind : static method of confirmationDialog Param Type Description [timeout] Number The timeout to wait (default value: 30 sec). Example await ui5 . confirmationDialog . clickDelete (); confirmationDialog.clickRevokeApproval([timeout]) Clicks the \"Revoke Approval\" button at the confirmation dialog. Kind : static method of confirmationDialog Param Type Description [timeout] Number The timeout to wait (default value: 30 sec). Example await ui5 . confirmationDialog . clickRevokeApproval (); ui5.control Kind : static class of ui5 .control .execute(callbackFunction, selectorOrElement, args) .focus(selector, [index], [timeout]) .getProperty(selectorOrElement, propertyName) .getAggregationProperty(selectorOrElement, propertyName) .getAssociationProperty(selectorOrElement, propertyName) .getBindingContextPathProperty(selectorOrElement) .getPropertyBinding(selectorOrElement, propertyName) \u21d2 Array control.execute(callbackFunction, selectorOrElement, args) Executes a native UI5 action as callback function in the browser on the given UI5 control. Kind : static method of control Param Type Description callbackFunction function The client script function to be used with the control instance. Caution: The first and last parameter is reserved for the mockserver instance and the promise resolve function - done. selectorOrElement Element | Ui5Selector | Ui5SelectorWithOptions The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed). args Object An object containing the arguments to pass to the callback function. Example const selector = { \"elementProperties\" : { \"metadata\" : \"sap.m.StandardListItem\" , \"id\" : \"*categoryList-7\" }}; const args = { \"property\" : \"text\" }; const title = await ui5 . control . execute ( function ( control , args , done ) { done ( control . getProperty ( args . property )); }, selector , args ); control.focus(selector, [index], [timeout]) Focuses on the element with the given selector to get it into view. If focus is not possible scrollToElement is used. Kind : static method of control Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . control . focus ( selector ); Example await ui5 . control . focus ( selector , 0 , 5000 ); control.getProperty(selectorOrElement, propertyName) Gets the UI5 control property of the given element. Kind : static method of control Param Type Description selectorOrElement Element | Ui5Selector | Ui5SelectorWithOptions The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed) propertyName String The property name of the control to retrieve the value from. Example const selector = { \"elementProperties\" : { \"metadata\" : \"sap.m.StandardListItem\" , \"mProperties\" : { \"title\" : [{ \"path\" : \"CategoryName\" }] }}; const elem = await ui5 . element . getDisplayed ( selector ); const propertyName = \"title\" ; const val = await ui5 . control . getProperty ( elem , propertyName ); control.getAggregationProperty(selectorOrElement, propertyName) Gets the UI5 control aggregation property of the given element. Kind : static method of control Param Type Description selectorOrElement Element | Ui5Selector | Ui5SelectorWithOptions The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed) propertyName String The aggregation property name of the control to retrieve the value from. Example const selector = { \"elementProperties\" : { \"metadata\" : \"sap.m.StandardListItem\" , \"mProperties\" : { \"items\" : [{ \"path\" : \"/Categories\" }] }}; const elem = await ui5 . element . getDisplayed ( selector ); const propertyName = \"tooltip\" ; const val = await ui5 . control . getAggregationProperty ( elem , propertyName ); control.getAssociationProperty(selectorOrElement, propertyName) Get UI control property Kind : static method of control Param Type Description selectorOrElement Element | Ui5Selector | Ui5SelectorWithOptions The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed) propertyName String The association property name of the control to retrieve the value from. Example const selector = { \"elementProperties\" : { \"metadata\" : \"sap.m.MultiComboBox\" , \"mProperties\" : {}}; const elem = await ui5 . element . getDisplayed ( selector ); const propertyName = \"selectedItems\" ; const propertyValue = await ui5 . control . getAssociationProperty ( elem , propertyName ); control.getBindingContextPathProperty(selectorOrElement) Get UI control binding context path Kind : static method of control Param Type Description selectorOrElement Element | Ui5Selector | Ui5SelectorWithOptions The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed) Example const selector = { \"elementProperties\" : { \"metadata\" : \"sap.m.StandardListItem\" , \"mProperties\" : { \"title\" : [{ \"path\" : \"CategoryName\" }] }}; const elem = await ui5 . element . getDisplayed ( selector ); const context = await ui5 . control . getBindingContextPathProperty ( elem ); control.getPropertyBinding(selectorOrElement, propertyName) \u21d2 Array Get UI control property Kind : static method of control Returns : Array - Array of bindings for the specific property Param Type Description selectorOrElement Element | Ui5Selector | Ui5SelectorWithOptions The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed) propertyName String The property name to retrieve from the control binding Example const selector = { \"elementProperties\" : { \"metadata\" : \"sap.m.StandardListItem\" , \"mProperties\" : { \"title\" : [{ \"path\" : \"CategoryName\" }] }}; const elem = await ui5 . element . getDisplayed ( selector ); const propertyName = \"title\" ; const binding = await ui5 . control . getPropertyBinding ( elem , propertyName ); ui5.date Kind : static class of ui5 .date .pick(selector, date, [index]) .pickRange(selector, range, [index]) .fillRange(selector, range, [index]) date.pick(selector, date, [index]) Picks the passed date using the \"DatePicker\" with the given selector. Kind : static method of date Param Type Default Description selector Selector The selector describing the element. date Date The date object. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). Example const today = await common . date . calculate ( \"today\" ); await ui5 . date . pick ( selector , date ); date.pickRange(selector, range, [index]) Picks the passed date range using the \"DatePicker\" with the given selector. Note that this will only work within the current month! Kind : static method of date Param Type Default Description selector Selector The selector describing the element. range Array.<Object> The array of date objects containing start- and end date. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). Example const start = await common . date . calculate ( \"2020, 9, 20\" ); const end = await common . date . calculate ( \"2021, 1, 3\" ); const range = [ start , end ]; await ui5 . date . pickRange ( selector , range ); date.fillRange(selector, range, [index]) Enters the passed date range to the date input with the given selector by providing the start- and end date. Kind : static method of date Param Type Default Description selector Selector The selector describing the element. range Array.<Object> The array of date objects containing start- and end date. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). Example const start = await common . date . calculate ( \"2020, 9, 20\" , \"dd.mm.yyyy\" ); const end = await common . date . calculate ( \"2021, 1, 3\" , \"dd.mm.yyyy\" ); const range = [ start , end ]; await ui5 . date . fillRange ( selector , range ); ui5.element Kind : static class of ui5 .element .waitForAll(selector, [timeout]) .getAllDisplayed(selector, [timeout]) \u21d2 Array.<Object> .getDisplayed(selector, [index], [timeout]) \u21d2 Object .getByText(selector, value, [index], [timeout]) \u21d2 Object .getByChild(elementSelector, childSelector, [index], [timeout]) \u21d2 Object .getByParent(elementSelector, parentSelector, [index], [timeout]) \u21d2 Object .getId(selector, [index], [timeout]) \u21d2 String .getPropertyValue(selector, property, [index], [timeout]) \u21d2 any .getValue(selector, [index], [timeout]) \u21d2 String .getBindingValue(selector, bindingContext, [index], [timeout]) \u21d2 String .isVisible(selector, [index], [timeout]) \u21d2 Boolean .highlight(selector, [duration], [color]) element.waitForAll(selector, [timeout]) Waits for all elements matching the given selector. Kind : static method of element Param Type Default Description selector Object The selector describing the elements. [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . element . waitForAll ( selector ); element.getAllDisplayed(selector, [timeout]) \u21d2 Array.<Object> Returns the visible elements with the given selector. Kind : static method of element Returns : Array.<Object> - - The found elements. Param Type Default Description selector Object The selector describing the elements. [timeout] Number 30000 The timeout to wait (ms). Example const elem = await ui5 . element . getAllDisplayed ( selector ); element.getDisplayed(selector, [index], [timeout]) \u21d2 Object Returns the visible element. Kind : static method of element Returns : Object - The found element. Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const elem = await ui5 . element . getDisplayed ( selector ); element.getByText(selector, value, [index], [timeout]) \u21d2 Object Returns the element with the given selector and text value. Kind : static method of element Returns : Object - The found element. Param Type Default Description selector Object The selector describing the element. value String The text value of the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const elem = await ui5 . element . getByText ( selector , \"Home\" ); element.getByChild(elementSelector, childSelector, [index], [timeout]) \u21d2 Object Gets an element by its selector and child selector. Can be used as unique combination between element and child properties when multiple elements have the same properties. Note: For nested selectors, all properties except of the \"elementProperties\" are being ignored. Kind : static method of element Returns : Object - The found element. Param Type Default Description elementSelector String The selector describing the requested element. childSelector String The selector describing a child element of the requested element. [index] Number 0 The index of the element (in case the combination applies to more than one element). [timeout] Number 30000 The timeout to wait (ms). Example const elementSelector = { \"elementProperties\" : {...} }; const childSelector = { \"elementProperties\" : {...} }; const elem = await ui5 . element . getByChild ( elementSelector , childSelector ); element.getByParent(elementSelector, parentSelector, [index], [timeout]) \u21d2 Object Gets an element by its selector and parent selector. Can be used as unique combination between element and parent properties when multiple elements have the same properties. Note: For nested selectors, all properties except of the \"elementProperties\" are being ignored. Kind : static method of element Returns : Object - The found element. Param Type Default Description elementSelector String The selector describing the requested element. parentSelector String The selector describing the parent element of the requested element. [index] Number 0 The index of the element (in case the combination applies to more than one element). [timeout] Number 30000 The timeout to wait (ms). Example const elementSelector = { \"elementProperties\" : {...} }; const parentSelector = { \"elementProperties\" : {...} }; const elem = await ui5 . element . getByParent ( elementSelector , parentSelector ); element.getId(selector, [index], [timeout]) \u21d2 String Returns the id of the element with the given selector. Kind : static method of element Returns : String - The id of the element. Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const elemId = await ui5 . element . getId ( selector ); element.getPropertyValue(selector, property, [index], [timeout]) \u21d2 any Returns the UI5 property value of the passed element. Kind : static method of element Returns : any - The property value of the element. Param Type Default Description selector Object The selector describing the element. property String The property of the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const elemValue = await ui5 . element . getPropertyValue ( selector , \"text\" ); element.getValue(selector, [index], [timeout]) \u21d2 String Returns the inner value of the passed element. Kind : static method of element Returns : String - The value of the element. Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const elemValue = await ui5 . element . getValue ( selector ); element.getBindingValue(selector, bindingContext, [index], [timeout]) \u21d2 String Returns the value of the given binding property for a specific element. Kind : static method of element Returns : String - The binding property value. Param Type Default Description selector Object The selector describing the element. bindingContext String The binding property to retrieve. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const elemBindingValue = await ui5 . element . getBindingValue ( selector , \"InvoiceGrossAmount\" ); element.isVisible(selector, [index], [timeout]) \u21d2 Boolean Determines if the element is visible. Kind : static method of element Returns : Boolean - The bool value 'true' or 'false' if the element is visible or not. Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const isVisible = await ui5 . element . isVisible ( selector ); element.highlight(selector, [duration], [color]) Highlights the element with the given selector. Kind : static method of element Param Type Default Description selector Object The selector describing the element. [duration] Number 2000 The duration of the highlighting (ms). [color] String \"red\" The color of the highlighting (CSS color). Example await ui5 . element . highlight ( selector , 3000 , \"green\" ); ui5.errorDialog Kind : static class of ui5 .errorDialog .expectToBeVisible() .clickClose() errorDialog.expectToBeVisible() Expects that the error dialog is visible on the page. Kind : static method of errorDialog Example await ui5 . errorDialog . expectToBeVisible (); errorDialog.clickClose() Clicks the 'Close' button at the error dialog. Kind : static method of errorDialog Example await ui5 . errorDialog . clickClose (); ui5.footerBar Kind : static class of ui5 .footerBar .clickButton(text, [timeout]) .clickApply([timeout]) .clickSave([timeout]) .clickCreate([timeout]) .clickCancel([timeout]) .clickCheck([timeout]) .clickOrder([timeout]) .clickPost([timeout]) .clickAdd([timeout]) footerBar.clickButton(text, [timeout]) Clicks the button with the given text at the footer bar. Kind : static method of footerBar Param Type Default Description text String The text of the button. [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickButton ( \"Ok\" ); footerBar.clickApply([timeout]) Clicks the 'Apply' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickApply (); footerBar.clickSave([timeout]) Clicks the 'Save' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickSave (); footerBar.clickCreate([timeout]) Clicks the 'Create' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickCreate (); footerBar.clickCancel([timeout]) Clicks the 'Cancel' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickCancel (); footerBar.clickCheck([timeout]) Clicks the 'Check' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickCheck (); footerBar.clickOrder([timeout]) Clicks the 'Order' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickOrder (); footerBar.clickPost([timeout]) Clicks the 'Post' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickPost (); footerBar.clickAdd([timeout]) Clicks the 'Add' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickAdd (); ui5.mockserver Kind : static class of ui5 .mockserver .waitForUi5ApplicationLoad(interval) .interactWithMockServer(mockServerPath, fnCallback, oParams) .attachFunctionBefore(method, mockServerPath, fnBeforeCallback, oParams) .attachFunctionAfter(method, mockServerPath, fnAfterCallback, oParams) .addNewRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation) .removeRequest(method, mockServerPath, urlPathRegex) .addOrOverrideRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation) .startMockServer(mockServerPath) .initMockServer(mockServerPath, mockServerOptions) .initApplication(mockServerPath) .stopMockServer(mockServerPath) .loadMockDataFile(filePath, isText) \u21d2 String .getEntitySetData(mockServerPath, entitySetName) \u21d2 Array .setEntitySetData(mockServerPath, entitySetName, entries) mockserver.waitForUi5ApplicationLoad(interval) Waits for the UI5 framework to load and makes sure XHR request finished und busy indicators are not visible anymore. Kind : static method of mockserver Param Type Description interval Integer The intervals to use when waiting UI5 to load. Example await ui5 . mockserver . waitForUi5ApplicationLoad ( 100 ); mockserver.interactWithMockServer(mockServerPath, fnCallback, oParams) Execute client script function to enable interaction with mockserver instance [you can write code in ui5 app context] Kind : static method of mockserver Param Type Description mockServerPath String The full path to your mockserver instance fnCallback String | Object The client script function that you can use to interact with your mockserver instance. [Caution] The first and last parameter is reserved (1st param is the mockserver instance and last parameter the promise resolve function - done) oParams String Additional parameters you would like to inject in your client script function Example await ui5 . mockserver . interactWithMockServer ( \"path/to/project/localService/main/mockserver\" , fnCallback , oParams ); mockserver.attachFunctionBefore(method, mockServerPath, fnBeforeCallback, oParams) Attaches a callback function in mockserver attachBefore event to be executed Kind : static method of mockserver Param Type Description method String The attachAfter http method [GET or POST]. mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method so the mockserver instance can be consumed]. fnBeforeCallback String | Object The callback function to be used in the native attachBefore method as described (https://sapui5.hana.ondemand.com/#/api/sap.ui.core.ui5.mockserver%23methods/Summary) oParams Object Additional parameters you would like to inject in your client script function Example await ui5 . mockserver . attachFunctionBefore ( \"GET\" , \"path/to/project/localService/main/mockserver\" , fnBeforeCallback , oParams ); mockserver.attachFunctionAfter(method, mockServerPath, fnAfterCallback, oParams) Attaches a callback function in mockserver attachAfter event to be executed Kind : static method of mockserver Param Type Description method String The attachAfter http method [GET or POST]. mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method so the mockserver instance can be consumed]. fnAfterCallback String | Object The callback function to be used in the native attachAfter method as described (https://sapui5.hana.ondemand.com/#/api/sap.ui.core.ui5.mockserver%23methods/Summary) oParams Object Additional parameters you would like to inject in your client script function Example await ui5 . mockserver . attachFunctionAfter ( \"GET\" , \"path/to/project/localService/main/mockserver\" , fnAfterCallback ); mockserver.addNewRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation) Adds new mock request Kind : static method of mockserver Param Type Description method String The http method [GET,POST..]. mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. urlPathRegex String The url path regex to filter the requests responseJsonPath String The json object or the path to your json file to be used as response [use relative path from the html page started]. returnCode Integer The http response code to simulate for this mock request. isText Boolean If true then content type is text/plain otherwise application/json. responseMessages String Mocks the gw sap-message response messages [Don't forget to stringify your json before: JSON.stringify(msg)] responseLocation String Mocks the location response messages header Example await ui5 . mockserver . addNewRequest ( \"GET\" , \"path/to/project/localService/main/mockserver\" , \"*.Headers.*\" , \"path/to/project/localService/main/mockdata/test.json\" , 200 , true , JSON . stringify ( msg )); mockserver.removeRequest(method, mockServerPath, urlPathRegex) Removes request mock [Doesn't work currently - Mockserver bug] Kind : static method of mockserver Param Type Description method String The http method [GET,POST..]. mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. urlPathRegex String The url path regex to filter the requests Example await ui5 . mockserver . removeRequest ( \"GET\" , \"path/to/project/localService/main/mockserver\" , \"*.Headers.*\" ); mockserver.addOrOverrideRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation) Adds new or overrides an existing mock request Kind : static method of mockserver Param Type Description method String The http method [GET,POST..]. mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. urlPathRegex String The url path regex to filter the requests responseJsonPath String The json object or the path to your json file to be used as response [use relative path from the html page started]. returnCode Integer The http response code to simulate for this mock request. isText Boolean If true then content type is text/plain otherwise application/json. responseMessages String Mocks the gw sap-message response messages [Don't forget to stringify your json before: JSON.stringify(msg)] responseLocation String Mocks the location response messages header Example await ui5 . mockserver . addOrOverrideRequest ( \"GET\" , \"path/to/project/localService/main/mockserver\" , \"*.Headers.*\" , \"path/to/project/localService/main/mockdata/test.json\" , 200 , true , JSON . stringify ( msg )); mockserver.startMockServer(mockServerPath) (Re-)Starts mock server instance Kind : static method of mockserver Param Type Description mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. Example await ui5 . mockserver . startMockServer ( \"path/to/project/localService/main/mockserver\" ); mockserver.initMockServer(mockServerPath, mockServerOptions) Initializes the provide mockserver instance on the fly Kind : static method of mockserver Param Type Description mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. mockServerOptions String The mock server options Example await ui5 . mockserver . initMockServer ( \"path/to/project/localService/main/mockserver\" , mockServerOptions ); mockserver.initApplication(mockServerPath) Initializes the application [Used in the beggining of script, once the mockserver is fully initialized and request mocking is done] Kind : static method of mockserver Param Type Description mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. Example await ui5 . mockserver . initApplication ( \"path/to/project/localService/main/mockserver\" ); mockserver.stopMockServer(mockServerPath) Stops the mockserver instance Kind : static method of mockserver Param Type Description mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. Example await ui5 . mockserver . stopMockServer ( \"path/to/project/localService/main/mockserver\" ); mockserver.loadMockDataFile(filePath, isText) \u21d2 String Loads a mock data file Kind : static method of mockserver Returns : String - The json object Param Type Description filePath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. isText Boolean If true then content type is text/plain otherwise application/json. Example await ui5 . mockserver . loadMockDataFile ( \"path/to/project/mockData/myData.json\" , true ); mockserver.getEntitySetData(mockServerPath, entitySetName) \u21d2 Array Retrieves entity data Kind : static method of mockserver Returns : Array - An array of json objects Param Type Description mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. entitySetName String The entity set name Example await ui5 . mockserver . getEntitySetData ( \"path/to/project/localService/main/mockserver\" , \"Headers\" ); mockserver.setEntitySetData(mockServerPath, entitySetName, entries) Override entity data entries Kind : static method of mockserver Param Type Description mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. entitySetName String The entity name entries String The json object to be used as data to be inserted [use relative path from the html page started]. Example await ui5 . mockserver . setEntitySetData ( \"path/to/project/localService/main/mockserver\" , \"Headers\" , entries ); ui5.navigation Kind : static class of ui5 .navigation .navigateToApplication(intent, [preventPopups], [verify], [refresh]) .navigateToApplicationAndRetry(intent, [preventPopups], [verify], [retries], [interval]) .navigateToSystemAndApplication(system, intent, [closePopups], [verify]) .navigateToSystemAndApplicationAndRetry(system, intent, [closePopups], [verify], [retries], [interval]) .navigateToApplicationWithQueryParams(intent, queryParams, [preventPopups], [verify]) .navigateToApplicationWithQueryParamsAndRetry(intent, queryParams, [preventPopups], [verify], [retries], [interval]) .closePopups([timeout]) .expectUnsupportedNavigationPopup(navigationTarget) navigation.navigateToApplication(intent, [preventPopups], [verify], [refresh]) Navigates to the application via the passed intent. The intent will be added to the baseUrl maintained in the config. Kind : static method of navigation Param Type Default Description intent String The intent of the application. [preventPopups] Boolean false Specifies if random popup appearance should be prevented. [verify] Boolean false Specifies if the url should be asserted after the navigation. [refresh] Boolean false Refresh the page after navigation. Example await ui5 . navigation . navigateToApplication ( \"PurchaseOrder-manage\" ); navigation.navigateToApplicationAndRetry(intent, [preventPopups], [verify], [retries], [interval]) Navigates to the application via the passed intent, and retries in case it fails. Kind : static method of navigation Param Type Default Description intent String The intent of the app. [preventPopups] Boolean false Specifies if random popup appearance should be prevented. Might not work for specific popups. [verify] Boolean false Specifies if the url should be asserted after the navigation. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await ui5 . navigation . navigateToApplicationAndRetry ( \"PurchaseOrder-manage\" ); navigation.navigateToSystemAndApplication(system, intent, [closePopups], [verify]) Navigates within the passed system to the application via the passed intent. Kind : static method of navigation Param Type Default Description system String The system url. intent String The intent of the application. [closePopups] Boolean false Specifies if random popups should be closed after the navigation. [verify] Boolean false Specifies if the url should be asserted after the navigation. Example await ui5 . navigation . navigateToSystemAndApplication ( \"yourFioriLaunchpad.domain\" , \"PurchaseOrder-manage\" ); navigation.navigateToSystemAndApplicationAndRetry(system, intent, [closePopups], [verify], [retries], [interval]) Navigates within the passed system to the application via the passed intent, and retries in case it fails. Kind : static method of navigation Param Type Default Description system String The system url. intent String The intent of the application. [closePopups] Boolean false Specifies if random popups should be closed after the navigation. [verify] Boolean false Specifies if the url should be asserted after the navigation. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await ui5 . navigation . navigateToSystemAndApplicationAndRetry ( \"yourFioriLaunchpad.domain\" , \"PurchaseOrder-manage\" ); navigation.navigateToApplicationWithQueryParams(intent, queryParams, [preventPopups], [verify]) Navigates to the application with the passed queryParams via the passed intent. Kind : static method of navigation Param Type Default Description intent String The intent of the app. queryParams String [OPTIONAL] Add url query params. [preventPopups] Boolean false Specifies if random popup appearance should be prevented. [verify] Boolean false Specifies if the url should be asserted after the navigation. Example const intent = \"PurchaseOrder-manage\" const queryParams = \"?sap-language=EN&responderOn=true\" ; await ui5 . navigation . navigateToApplicationWithQueryParams ( intent , queryParams ); navigation.navigateToApplicationWithQueryParamsAndRetry(intent, queryParams, [preventPopups], [verify], [retries], [interval]) Navigates to the application via the passed intent, and retries in case it fails. Kind : static method of navigation Param Type Default Description intent String The intent of the app. queryParams String [OPTIONAL] Add url query params. [preventPopups] Boolean false Specifies if random popup appearance should be prevented. [verify] Boolean false Specifies if the url should be asserted after the navigation. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example const intent = \"PurchaseOrder-manage\" const queryParams = \"?sap-language=EN&responderOn=true\" ; await ui5 . navigation . navigateToApplicationWithQueryParamsAndRetry ( intent , queryParams ); navigation.closePopups([timeout]) Closes all popups if they occur after navigating to a specific page. Kind : static method of navigation Param Type Default Description [timeout] Number 30000 The timeout to wait. Example await ui5 . navigation . closePopups (); navigation.expectUnsupportedNavigationPopup(navigationTarget) Expects navigation to an app that is not supported. This can be the case for Mocked tests when the application does not exist or when the app is not included in a role. Kind : static method of navigation Param Type Description navigationTarget String The selector describing the element. Example await ui5 . navigation . expectUnsupportedNavigationPopup ( \"#SupplierInvoice-display?FiscalYear=1234&SupplierInvoice=1234567890\" ); ui5.navigationBar Kind : static class of ui5 .navigationBar .clickBack([timeout]) .clickSapLogo([timeout]) .clickUserIcon([timeout]) .expectPageTitle(compareValue) .expectShellHeader([timeout]) navigationBar.clickBack([timeout]) Navigates one layer back. Kind : static method of navigationBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . navigationBar . clickBack (); navigationBar.clickSapLogo([timeout]) Clicks at the SAP Logo. Kind : static method of navigationBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . navigationBar . clickSapLogo (); navigationBar.clickUserIcon([timeout]) Clicks at the Account Icon. Kind : static method of navigationBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . navigationBar . clickUserIcon (); navigationBar.expectPageTitle(compareValue) Expects the page title of the current page to be the compare value. Kind : static method of navigationBar Param Type Description compareValue String The compare value. Example await ui5 . navigationBar . expectPageTitle ( \"Home\" ); navigationBar.expectShellHeader([timeout]) Expects the shell header to be visible Kind : static method of navigationBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . navigationBar . expectShellHeader (); ui5.qunit Kind : static class of ui5 qunit.executeTests(path) Executes QUnit & OPA5 tests. Qmate acts like a runner. Kind : static method of qunit Param Type Description path String Relative path to the QUnit/OPA5 html file. Example await ui5 . qunit . executeTests ( \"path/to/qunit.html\" ); ui5.session Kind : static class of ui5 .session .login(username, [password], [verify], [timeout]) .loginFiori(username, [password], [verify]) .loginSapCloud(username, [password], [verify]) .loginCustom(username, [password], usernameFieldSelector, passwordFieldSelector, logonButtonSelector, [verify]) .loginCustomViaConfig(username, [password], [verify]) .logout([verify]) .switchUser(username, [password], [authenticator], [wait]) .expectLogoutText() session.login(username, [password], [verify], [timeout]) Login with specific username and password. This function works for both fiori and sap-cloud login. Kind : static method of session Param Type Default Description username String The username. [password] String The password. [verify] Boolean false Specifies if the function will check the shell header after logging in. [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . session . login ( \"PURCHASER\" ); Example await ui5 . session . login ( \"JOHN_DOE\" , \"abc123!\" , true ); session.loginFiori(username, [password], [verify]) Login with fioriForm and specific username and password. Kind : static method of session Param Type Default Description username String The username. [password] String The password. [verify] Boolean false Specifies if the function will check the shell header after logging in. Example await ui5 . session . loginFiori ( \"john\" , \"abc123!\" ); session.loginSapCloud(username, [password], [verify]) Login with sapCloud form and specific username and password. Kind : static method of session Param Type Default Description username String The username. [password] String The password. [verify] Boolean false Specifies if the function will check the shell header after logging in. Example await ui5 . session . loginSapCloud ( \"john\" , \"abc123!\" ); session.loginCustom(username, [password], usernameFieldSelector, passwordFieldSelector, logonButtonSelector, [verify]) Login with custom form and specific username and password. Kind : static method of session Param Type Default Description username String The username. [password] String \"super-duper-sensitive-pw\" The password. usernameFieldSelector String The CSS selector of the username field. passwordFieldSelector String The CSS selector of the password field. logonButtonSelector String The CSS selector of the login button. [verify] Boolean false Specifies if the function will check the shell header after logging in. Example await ui5 . session . loginCustom ( \"JOHN_DOE\" , \"abc123!\" , \"#username\" , # password , \"#logon\" ); session.loginCustomViaConfig(username, [password], [verify]) Login with specific username and password. The selectors will be taken from the config. Kind : static method of session Param Type Default Description username String The username. Can be specified in spec or config. If specified in both credentials will be taken from config. [password] String The password. Can be specified in spec or config. If specified in both credentials will be taken from config. [verify] Boolean false Specifies if the function will check the shell header after logging in. Example // config - SAMPLE 1 auth : { formType : 'plain' , usernameFieldSelector : \"#USERNAME_BLOCK input\" , passwordFieldSelector : \"#PASSWORD_BLOCK input\" , logonButtonSelector : \"#LOGIN_LINK\" }, // spec await ui5 . session . loginCustomViaConfig ( \"JOHN_DOE\" , \"abc123!\" ); // config - SAMPLE 2 auth : { formType : \"plain\" , username : \"PURCH_EXT\" , password : \"super-duper-sensitive-pw\" , usernameFieldSelector : \"#USERNAME_BLOCK input\" , passwordFieldSelector : \"#PASSWORD_BLOCK input\" , logonButtonSelector : \"#LOGIN_LINK\" }, // spec await ui5 . session . loginCustomViaConfig (); session.logout([verify]) Logs the user out. Kind : static method of session Param Type Default Description [verify] Boolean \"true\" Specifies if the function will check the logout text after logging out. Set this to false if the system does not show the text after logging out. Example await ui5 . session . logout (); session.switchUser(username, [password], [authenticator], [wait]) switches the user according to the passed username and password. Kind : static method of session Param Type Default Description username String The username. [password] String The password. [authenticator] Object The login form type. Set to null to use generic login. [wait] Number 10000 The waiting time between logout and login (ms). Example await ui5 . session . switchUser ( \"PURCHASER\" ); Example const authenticator = ui5 . authenticators . fioriForm ; await ui5 . session . switchUser ( \"PURCHASER\" , \"super-duper-sensitive-pw\" , authenticator , 30000 ); session.expectLogoutText() Expects the logout text after logout to be \"You have been logged off. This is essential for chaining scripts, so that no static browser sleep in the spec itself is required anymore. Kind : static method of session Example await ui5 . session . expectLogoutText (); ui5.table Kind : static class of ui5 .table .sortColumnAscending(columnName, [tableSelector]) .sortColumnDescending(columnName, [tableSelector]) .clickSettingsButton([tableSelector]) table.sortColumnAscending(columnName, [tableSelector]) Sorts the given column \"Ascending\". Kind : static method of table Param Type Description columnName String The name of the column to sort. [tableSelector] Object The selector describing the table element (in case there are more then one). Example await ui5 . table . sortColumnAscending ( \"Supplier\" ); Example const glAccountItemsTable = { \"elementProperties\" : { \"viewName\" : \"ui.s2p.mm.supplinvoice.manage.s1.view.S1\" , \"metadata\" : \"sap.m.Table\" , \"id\" : \"*idS2P.MM.MSI.TableGLAccountItems\" } }; await ui5 . table . sortColumnAscending ( \"Amount\" , glAccountItemsTable ); table.sortColumnDescending(columnName, [tableSelector]) Sorts the given column \"Descending\". Kind : static method of table Param Type Description columnName String The name of the column to sort. [tableSelector] Object The selector describing the table element (in case there are more then one). Example await ui5 . table . sortColumnDescending ( \"Supplier\" ); Example const glAccountItemsTable = { \"elementProperties\" : { \"viewName\" : \"ui.s2p.mm.supplinvoice.manage.s1.view.S1\" , \"metadata\" : \"sap.m.Table\" , \"id\" : \"*idS2P.MM.MSI.TableGLAccountItems\" } }; await ui5 . table . sortColumnDescending ( \"Amount\" , glAccountItemsTable ); table.clickSettingsButton([tableSelector]) Opens the user Settings. Kind : static method of table Param Type Description [tableSelector] Object The selector describing the table element (in case there are more then one). Example await ui5 . table . clickSettingsButton (); Example const glAccountItemsTable = { \"elementProperties\" : { \"viewName\" : \"ui.s2p.mm.supplinvoice.manage.s1.view.S1\" , \"metadata\" : \"sap.m.Table\" , \"id\" : \"*idS2P.MM.MSI.TableGLAccountItems\" } }; await ui5 . table . clickSettingsButton ( glAccountItemsTable ); ui5.userInteraction Kind : static class of ui5 .userInteraction .click(selector, [index], [timeout]) .clickAndRetry(selector, [index], [timeout], [retries], [interval]) .doubleClick(selector, [index], [timeout]) .rightClick(selector, [index], [timeout]) .clickTab(selector, [index], [timeout]) .clickListItem(selector, [index], [timeout]) .check(selector, [index], [timeout]) .uncheck(selector, [index], [timeout]) .fill(selector, value, [index], [timeout]) .fillAndRetry(selector, value, [index], [timeout], [retries], [interval]) .clear(selector, [index], [timeout]) .clearAndRetry(selector, [index], [timeout], [retries], [interval]) .clearAndFill(selector, value, [index], [timeout]) .clearAndFillAndRetry(selector, value, [index], [timeout], [retries], [interval], [verify]) .clearSmartFieldInput(selector, [index], [timeout]) .clearAndFillSmartFieldInput(selector, value, [index], [timeout]) .clearAndFillSmartFieldInputAndRetry(selector, value, [index], [timeout], [retries], [interval]) .selectBox(selector, value, [index]) .selectComboBox(selector, value, [index]) .selectMultiComboBox(selector, values, [index]) .clickSelectArrow(selector, [index]) .clickSelectArrowAndRetry(selector, [index], [retries], [interval]) .selectFromTab(selector, value, [index], [timeout]) .mouseOverElement(selector, [index], [timeout]) .scrollToElement(selector, [index], [alignment], [timeout]) .selectAll([selector], [index], [timeout]) .openF4Help(selector, [index], [timeout], useF4Key) .searchFor(selector, [index], [timeout], useEnter) .resetSearch(selector, [index], [timeout]) userInteraction.click(selector, [index], [timeout]) Clicks on the element with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . click ( selector ); userInteraction.clickAndRetry(selector, [index], [timeout], [retries], [interval]) Clicks on the element with the given selector and retries the action in case of a failure. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await ui5 . userInteraction . clickAndRetry ( selector ); userInteraction.doubleClick(selector, [index], [timeout]) Double Clicks on the passed element. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . doubleClick ( selector ); userInteraction.rightClick(selector, [index], [timeout]) Right Clicks on the passed element. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const elem = await nonUi5 . element . getById ( \"button01\" ); await ui5 . userInteraction . rightClick ( elem ); userInteraction.clickTab(selector, [index], [timeout]) Clicks on the tab with the given selector and checks if the tab got selected successfully. The function retries the click for maximal 3 times if the selection of the tab (blue underline) was not successful. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . clickTab ( selector ); userInteraction.clickListItem(selector, [index], [timeout]) Clicks or opens the list item with the given selector (e.g. ColumnListItem, StandardListItem). In some cases the default click function is not working correctly (clicks an element within the list item). Therefore we recommend to use this function to open a specific list item. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . clickListItem ( selector ); userInteraction.check(selector, [index], [timeout]) Checks the checkbox with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . check ( selector ); userInteraction.uncheck(selector, [index], [timeout]) Unchecks the checkbox with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . uncheck ( selector ); userInteraction.fill(selector, value, [index], [timeout]) Fills the input field with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String | Number The value to enter. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . fill ( selector , \"My Value\" ); userInteraction.fillAndRetry(selector, value, [index], [timeout], [retries], [interval]) Fills the input field with the given selector and retries the action in case of a failure. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String | Number The value to enter. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await ui5 . userInteraction . fillAndRetry ( selector , \"My Value\" ); userInteraction.clear(selector, [index], [timeout]) Clears the input with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . clear ( selector ); userInteraction.clearAndRetry(selector, [index], [timeout], [retries], [interval]) Clears the input with the given selector and retries the action in case of a failure Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await ui5 . userInteraction . clearAndRetry ( selector ); userInteraction.clearAndFill(selector, value, [index], [timeout]) Clears the input field with the given selector and fills the given value. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String | Number The value to enter. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . clearAndFill ( selector , \"My Value\" ); userInteraction.clearAndFillAndRetry(selector, value, [index], [timeout], [retries], [interval], [verify]) Clears the input field with the given selector and fills the given value. Retries the action in case of a failure. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String The value to enter. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. [verify] Boolean true Specifies if the filled value should be verified. Example await ui5 . userInteraction . clearAndFillAndRetry ( selector , \"My Value\" ); userInteraction.clearSmartFieldInput(selector, [index], [timeout]) Clears the smart filed with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . clearSmartFieldInput ( selector ); userInteraction.clearAndFillSmartFieldInput(selector, value, [index], [timeout]) Clears the smart filed with the given selector and fills the given value. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String The value to enter. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . clearAndFillSmartFieldInput ( selector , \"My Value\" ); userInteraction.clearAndFillSmartFieldInputAndRetry(selector, value, [index], [timeout], [retries], [interval]) Clears the smart filed with the given selector and fills the given value and retries the action in case of a failure. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String The value to enter. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await ui5 . userInteraction . clearAndFillSmartFieldInputAndRetry ( selector , \"My Value\" ); userInteraction.selectBox(selector, value, [index]) Selects the passed value of the Select box. Please note that the function will only work for the default select Box. In special cases, please use the clickSelectArrow function. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String The value to select. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). Example await ui5 . userInteraction . selectBox ( selector , \"Germany\" ); userInteraction.selectComboBox(selector, value, [index]) Selects the passed value from the ComboBox with the given selector. Please note that the function will only work for the default ComboBox. In special cases you need to use the 'clickSelectArrow' function. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String The value to select. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). Example await ui5 . userInteraction . selectComboBox ( selector , \"Germany\" ); userInteraction.selectMultiComboBox(selector, values, [index]) Selects the passed values of the MultiComboBox with the given selector. Please note that the function will only work for the default MultiComboBox. In special cases, please use the clickSelectArrow function. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. values Array The values to select. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). Example await ui5 . userInteraction . selectMultiComboBox ( selector , [ \"Option 1\" , \"Option 2\" ]); userInteraction.clickSelectArrow(selector, [index]) Clicks the arrow icon at the passed selector (select box). Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). Example await ui5 . userInteraction . clickSelectArrow ( selector ); userInteraction.clickSelectArrowAndRetry(selector, [index], [retries], [interval]) Clicks the arrow icon at the passed selector (select box), and retries in case it fails. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await ui5 . userInteraction . clickSelectArrowAndRetry ( selector ); userInteraction.selectFromTab(selector, value, [index], [timeout]) Selects the passed value on the tab with the given selector and checks if the tab got selected successfully. The function retries the click for maximal 3 times if the selection of the tab (blue underline) was not successful. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String The value to select. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . selectFromTab ( selector ); userInteraction.mouseOverElement(selector, [index], [timeout]) Moves the cursor/focus to the element with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . mouseOverElement ( selector ); userInteraction.scrollToElement(selector, [index], [alignment], [timeout]) Scrolls the element with the given selector into view. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [alignment] String | Object \"center\" The alignment option for scrolling. Can be one of: \"start\", \"center\", \"end\", \"nearest\", or an object with properties: - block: Vertical alignment (\"start\", \"center\", \"end\", \"nearest\"). - inline: Horizontal alignment (\"start\", \"center\", \"end\", \"nearest\"). [timeout] Number 30000 The timeout to wait (ms). Example // Scroll to element with center alignment. await nonUi5 . userInteraction . scrollToElement ( selector , 0 , \"center\" ); Example // Scroll to element with custom alignment. const alignment = { block : \"start\" , inline : \"center\" }; await nonUi5 . userInteraction . scrollToElement ( selector , 0 , alignment ); userInteraction.selectAll([selector], [index], [timeout]) Performs \"select all\" (ctrl + a) at the element with the given selector. Kind : static method of userInteraction Param Type Default Description [selector] Object The selector describing the element. [index] Number 0 The index of the selector, in case there are more than one elements visible at the same time. [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . selectAll ( selector ); userInteraction.openF4Help(selector, [index], [timeout], useF4Key) Opens the F4-help of the element with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). useF4Key Boolean Specifies if the help is opened by pressing the F4-key or via the button. The default value is true (triggered by pressing the F4-key). Set \"useF4Key\" to false, to trigger the search by clicking the button. Example await ui5 . userInteraction . openF4Help ( selector , 0 , 30000 , false ); userInteraction.searchFor(selector, [index], [timeout], useEnter) Searches for the passed value and executes the search. In case that the search is already filled, it will reset the field first. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). useEnter Boolean Specifies if the search is triggered by pressing the Enter-key or via the search button. The default value is true (triggered by pressing the Enter-key). Set \"useEnter\" to false, to trigger the search by clicking the search button. Example await ui5 . userInteraction . searchFor ( selector , \"My Value\" , 0 , 30000 , false ); userInteraction.resetSearch(selector, [index], [timeout]) Resets the search field. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . resetSearch ( selector ); nonUi5 Global namespace for non UI5 modules. Kind : global constant nonUi5 .assertion .expectAttributeToBe(elem, compareValue, [attribute]) .expectAttributeToContain(elem, compareValue, [attribute]) .expectValueToBe(elem, compareValue) .expectToBeVisible(element) .expectToBeNotVisible(element, [timeout]) .element .waitForAll(selector, [timeout]) .waitToBePresent(selector, [timeout]) .waitToBeVisible(selector, [timeout]) .waitToBeClickable(selector, [timeout]) .getAllDisplayed(selector, [timeout]) \u21d2 Array.<Object> .getAll(selector, [timeout]) .getByCss(selector, [index], [timeout], [includeHidden]) \u21d2 Object .getByCssContainingText(selector, [text], [index], [timeout], [includeHidden], [strict]) \u21d2 Object .getById(id, [timeout], [includeHidden]) \u21d2 Object .getByClass(elemClass, [index], [timeout], [includeHidden]) \u21d2 Object .getByName(name, [index], [timeout], [includeHidden]) \u21d2 Object .getByXPath(xpath, [index], [timeout], [includeHidden]) \u21d2 Object .getByChild(elementSelector, childSelector, [index], [timeout], [includeHidden]) \u21d2 Object .getByParent(elementSelector, parentSelector, [index], [timeout], [includeHidden]) \u21d2 Object .isVisible(element, [strict]) \u21d2 Boolean .isPresent(elem) \u21d2 Boolean .isPresentByCss(css, [index], [timeout]) \u21d2 boolean .isPresentByXPath(xpath, [index], [timeout]) \u21d2 boolean .isSelected(elem) \u21d2 boolean .getAttributeValue(elem, [attribute]) \u21d2 String .getValue(elem) \u21d2 String .setInnerHTML(elem) \u21d2 String .highlight(elem, [duration], [color]) .navigation .navigateToApplication(relativeReference, [refresh]) .session .loginSapNetWeaver(username, password, [clickContinue], [iframeCssSelector]) .userInteraction .click(element, [timeout]) .clickAndRetry(element, [timeout], [retries], [interval]) .doubleClick(element, [timeout]) .rightClick(element, [timeout]) .check(element) .uncheck(element) .fill(element, value) .fillAndRetry(element, value, [retries], [interval]) .clear(element) .clearAndRetry(element, [retries], [interval]) .clearAndFill(element, value) .clearAndFillAndRetry(element, value, [retries], [interval], [verify]) .mouseOverElement(element, [xOffset], [yOffset]) .scrollToElement(elem, [alignment]) .dragAndDrop(element, targetElem) .moveCursorAndClick(element) .clickElementInSvg(svgElem, innerSelector) nonUi5.assertion Kind : static class of nonUi5 .assertion .expectAttributeToBe(elem, compareValue, [attribute]) .expectAttributeToContain(elem, compareValue, [attribute]) .expectValueToBe(elem, compareValue) .expectToBeVisible(element) .expectToBeNotVisible(element, [timeout]) assertion.expectAttributeToBe(elem, compareValue, [attribute]) Expects the attributes value of the passed element to be the compare value. Kind : static method of assertion Param Type Description elem Object The element. compareValue String The compare value. [attribute] String The attribute to compare. If not passed, it will compare the inner HTML content of the element. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . assertion . expectAttributeToBe ( elem , \"Save\" ); Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . assertion . expectAttributeToBe ( element , \"Save\" , \"title\" ); assertion.expectAttributeToContain(elem, compareValue, [attribute]) Expects the attributes value of the passed element to contain the compare value. Kind : static method of assertion Param Type Description elem Object The element. compareValue String The compare value. [attribute] String The attribute to compare. If not passed, it will compare the inner HTML content of the element. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . assertion . expectAttributeToContain ( element , \"Save\" , \"title\" ); assertion.expectValueToBe(elem, compareValue) Expects the attributes value of the passed element to be the compare value. Kind : static method of assertion Param Type Description elem Object The element. compareValue String The compare value. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . assertion . expectValueToBe ( elem , \"Save\" ); assertion.expectToBeVisible(element) Expects that the element is visible to the user. Kind : static method of assertion Param Type Description element Object The element. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . assertion . expectToBeVisible ( elem ); assertion.expectToBeNotVisible(element, [timeout]) Expects that the element is not visible to the user. Kind : static method of assertion Param Type Default Description element Object The element. [timeout] Number 30000 The timeout to wait (ms). Recommendation is to lower the timeout since the element is not expected to show up. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . assertion . expectToBeNotVisible ( elem , 5000 ); nonUi5.element Kind : static class of nonUi5 .element .waitForAll(selector, [timeout]) .waitToBePresent(selector, [timeout]) .waitToBeVisible(selector, [timeout]) .waitToBeClickable(selector, [timeout]) .getAllDisplayed(selector, [timeout]) \u21d2 Array.<Object> .getAll(selector, [timeout]) .getByCss(selector, [index], [timeout], [includeHidden]) \u21d2 Object .getByCssContainingText(selector, [text], [index], [timeout], [includeHidden], [strict]) \u21d2 Object .getById(id, [timeout], [includeHidden]) \u21d2 Object .getByClass(elemClass, [index], [timeout], [includeHidden]) \u21d2 Object .getByName(name, [index], [timeout], [includeHidden]) \u21d2 Object .getByXPath(xpath, [index], [timeout], [includeHidden]) \u21d2 Object .getByChild(elementSelector, childSelector, [index], [timeout], [includeHidden]) \u21d2 Object .getByParent(elementSelector, parentSelector, [index], [timeout], [includeHidden]) \u21d2 Object .isVisible(element, [strict]) \u21d2 Boolean .isPresent(elem) \u21d2 Boolean .isPresentByCss(css, [index], [timeout]) \u21d2 boolean .isPresentByXPath(xpath, [index], [timeout]) \u21d2 boolean .isSelected(elem) \u21d2 boolean .getAttributeValue(elem, [attribute]) \u21d2 String .getValue(elem) \u21d2 String .setInnerHTML(elem) \u21d2 String .highlight(elem, [duration], [color]) element.waitForAll(selector, [timeout]) Waits until all elements with the given selector are rendered. Will fail if no element is found. Kind : static method of element Param Type Default Description selector Object The CSS selector describing the element. [timeout] Number 30000 The timeout to wait (ms). Example await nonUi5 . element . waitForAll ( \".inputField\" ); element.waitToBePresent(selector, [timeout]) Waits until the element with the given selector is present. Kind : static method of element Param Type Default Description selector Object The CSS selector describing the element. [timeout] Number 30000 The timeout to wait (ms). Example await nonUi5 . element . waitToBePresent ( \".input01\" ); Example await nonUi5 . element . waitToBePresent ( \"#button12\" ); Example await nonUi5 . element . waitToBePresent ( \"p:first-child\" ); element.waitToBeVisible(selector, [timeout]) Waits until the element with the given selector is visible. Kind : static method of element Param Type Default Description selector Object The CSS selector describing the element. [timeout] Number 30000 The timeout to wait (ms). Example await nonUi5 . element . waitToBeVisible ( \".input01\" ); Example await nonUi5 . element . waitToBeVisible ( \"#button12\" ); Example await nonUi5 . element . waitToBeVisible ( \"p:first-child\" ); element.waitToBeClickable(selector, [timeout]) Waits until the element with the given selector is clickable. Kind : static method of element Param Type Default Description selector Object The CSS selector describing the element. [timeout] Number 30000 The timeout to wait (ms). Example await nonUi5 . element . waitToBeClickable ( \".input01\" ); Example await nonUi5 . element . waitToBeClickable ( \"#button12\" ); Example await nonUi5 . element . waitToBeClickable ( \"p:first-child\" ); element.getAllDisplayed(selector, [timeout]) \u21d2 Array.<Object> Gets all visible elements with the passed selector. Kind : static method of element Returns : Array.<Object> - The array of elements. Param Type Default Description selector Object The CSS selector describing the element. [timeout] Number 30000 The timeout to wait (ms). Example await nonUi5 . element . getAllDisplayed ( \".inputField\" ); element.getAll(selector, [timeout]) Returns all elements found by the given selector despite visible or not. Kind : static method of element Param Type Default Description selector Object The CSS selector describing the element. [timeout] Number 30000 The timeout to wait (ms). Example const hiddenElements = await nonUi5 . element . getAll ( \".sapUiInvisibleText\" ); const isPresent = await nonUi5 . element . isPresent ( hiddenElements [ 0 ]); await common . assertion . expectTrue ( isPresent ); element.getByCss(selector, [index], [timeout], [includeHidden]) \u21d2 Object Gets the element with the given CSS selector. Kind : static method of element Returns : Object - The found element. Param Type Default Description selector Object The CSS selector describing the element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if hidden elements are also considered. By default it checks only for visible ones. Example const elem = await nonUi5 . element . getByCss ( \".button01\" ); element.getByCssContainingText(selector, [text], [index], [timeout], [includeHidden], [strict]) \u21d2 Object Gets the element with the given CSS selector containing the given text value. Kind : static method of element Returns : Object - The found element. Param Type Default Description selector Object The CSS selector describing the element. [text] String \"\" The containing text value of the element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if hidden elements are also considered. By default it checks only for visible ones. [strict] Boolean false Specifies if the values match should be exact Example const elem = await nonUi5 . element . getByCssContainingText ( \".input01\" , \"Jack Jackson\" ); element.getById(id, [timeout], [includeHidden]) \u21d2 Object Gets the element with the given ID. Kind : static method of element Returns : Object - The found element. Param Type Default Description id String The id of the element. [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if the function will check for the elements visibility. Example const elem = await nonUi5 . element . getById ( \"button01\" ); element.getByClass(elemClass, [index], [timeout], [includeHidden]) \u21d2 Object Gets the element with the given class. Kind : static method of element Returns : Object - The found element. Param Type Default Description elemClass String The class describing the element [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if hidden elements are also considered. By default it checks only for visible ones. Example const elem = await nonUi5 . element . getByClass ( \"button01\" ); const elem = await nonUi5 . element . getByClass ( \"sapMIBar sapMTB sapMTBNewFlex sapContrastPlus\" ); element.getByName(name, [index], [timeout], [includeHidden]) \u21d2 Object Gets the element with the given name. Kind : static method of element Returns : Object - The found element. Param Type Default Description name String The name attribute of the element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if hidden elements are also considered. By default it checks only for visible ones. Example const elem = await nonUi5 . element . getByName ( \".button01\" ); element.getByXPath(xpath, [index], [timeout], [includeHidden]) \u21d2 Object Gets the element with the given XPath. Kind : static method of element Returns : Object - The found element. Param Type Default Description xpath String The XPath describing the element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if hidden elements are also considered. By default it checks only for visible ones. Example const elem = await nonUi5 . element . getByXPath ( \"//ul/li/a\" ); element.getByChild(elementSelector, childSelector, [index], [timeout], [includeHidden]) \u21d2 Object Gets an element by its selector and child selector. Can be used when multiple elements have the same properties. Kind : static method of element Returns : Object - The found element. Param Type Default Description elementSelector String The CSS selector describing the element. childSelector String The CSS selector describing the child element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if hidden elements are also considered. By default it checks only for visible ones. Example const elem = await nonUi5 . element . getByChild ( \".form01\" , \".input01\" ); element.getByParent(elementSelector, parentSelector, [index], [timeout], [includeHidden]) \u21d2 Object Gets an element by its selector and parent selector. Can be used when multiple elements have the same properties. Kind : static method of element Returns : Object - The found element. Param Type Default Description elementSelector String The CSS selector describing the element. parentSelector String The CSS selector describing the parent element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if hidden elements are also considered. By default it checks only for visible ones. Example const elem = await nonUi5 . element . getByParent ( \".form01\" , \".input01\" ); element.isVisible(element, [strict]) \u21d2 Boolean Returns a boolean if the element is visible to the user. Kind : static method of element Returns : Boolean - Returns true or false. Param Type Default Description element Object The element. [strict] Boolean true If strict mode is enabled it will only return \"true\" if the element is visible on the page and within the viewport. If disabled, it will be sufficient if the element is visible on the page but not inside the current viewport. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . element . isVisible ( elem ); element.isPresent(elem) \u21d2 Boolean Returns a boolean if the element is present at the DOM or not. It might be hidden. Kind : static method of element Returns : Boolean - Returns true or false. Param Type Description elem Object The element. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . element . isPresent ( elem ); element.isPresentByCss(css, [index], [timeout]) \u21d2 boolean Returns a boolean if the element is present at the DOM or not. Kind : static method of element Returns : boolean - Returns true or false. Param Type Default Description css String The CSS selector describing the element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await nonUi5 . element . isPresentByCss ( \".button01\" ); element.isPresentByXPath(xpath, [index], [timeout]) \u21d2 boolean Returns a boolean if the element is present at the DOM or not. Kind : static method of element Param Type Default Description xpath String The XPath describing the element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await nonUi5 . element . isPresentByXPath ( \".//*[text()='Create']\" ); element.isSelected(elem) \u21d2 boolean Returns a boolean if the element (e.g. checkbox) is selected. Kind : static method of element Param Type Description elem Object The element. Example const elem = await nonUi5 . element . getById ( \"elem01\" ); const isSelected = await nonUi5 . element . isSelected ( elem ); element.getAttributeValue(elem, [attribute]) \u21d2 String Returns the attributes value of the passed element. Kind : static method of element Returns : String - The attributes value of the element. Param Type Description elem Object The element. [attribute] String The attribute of the element. Leave empty to return the inner HTML value of the element. Example const elem = await nonUi5 . element . getById ( \"elem01\" ); const text = await nonUi5 . element . getAttributeValue ( elem , \"text\" ); Example const elem = await nonUi5 . element . getById ( \"elem02\" ); const innerHTML = await nonUi5 . element . getAttributeValue ( elem ); element.getValue(elem) \u21d2 String Returns the value of the passed element. Kind : static method of element Returns : String - The value of the element. Param Type Description elem Object The element. Example const elem = await nonUi5 . element . getById ( \"elem02\" ); const innerHTML = await nonUi5 . element . getValue ( elem ); element.setInnerHTML(elem) \u21d2 String Sets the innerHTML value of the given element. CAUTION: Only use this if filling the value in the normal way is not working and if it is unavoidable. Keep in mind, that a user is not able to perform such actions. Kind : static method of element Returns : String - The value to set. Param Type Description elem Object The element. Example const elem = await nonUi5 . element . getById ( \"text-editor\" ); await nonUi5 . element . setInnerHTML ( elem , \"Hello World!\" ); element.highlight(elem, [duration], [color]) Highlights the passed element. Kind : static method of element Param Type Default Description elem Object The element. [duration] Integer 2000 The duration of the highlighting (ms). [color] String \"red\" The color of the highlighting (CSS value). Example const elem = await nonUi5 . element . getById ( \"text01\" ); await nonUi5 . element . highlight ( elem ); Example const elem = await nonUi5 . element . getById ( \"text01\" ); await nonUi5 . element . highlight ( elem , 3000 , \"green\" ); nonUi5.navigation Kind : static class of nonUi5 navigation.navigateToApplication(relativeReference, [refresh]) Navigates to the application via the passed relative reference. The path will be added to the baseUrl maintained in the config. Kind : static method of navigation Param Type Default Description relativeReference String Relative reference of an application (path, query and fragment) [refresh] Boolean true Refresh the page after navigation. Example await nonUi5 . navigation . navigateToApplication ( \"categories\" ); nonUi5.session Kind : static class of nonUi5 session.loginSapNetWeaver(username, password, [clickContinue], [iframeCssSelector]) Login for SAP NetWebGUI form and specific username and password. Kind : static method of session Param Type Default Description username String The username. password String The password. [clickContinue] Boolean true Specifies if the function will press continue if applicable. [iframeCssSelector] String \"iframe\" The specific iframe selector the login form is contained. Example await nonUi5 . session . loginSapNetWeaver ( \"john\" , \"abc123!\" ); nonUi5.userInteraction Kind : static class of nonUi5 .userInteraction .click(element, [timeout]) .clickAndRetry(element, [timeout], [retries], [interval]) .doubleClick(element, [timeout]) .rightClick(element, [timeout]) .check(element) .uncheck(element) .fill(element, value) .fillAndRetry(element, value, [retries], [interval]) .clear(element) .clearAndRetry(element, [retries], [interval]) .clearAndFill(element, value) .clearAndFillAndRetry(element, value, [retries], [interval], [verify]) .mouseOverElement(element, [xOffset], [yOffset]) .scrollToElement(elem, [alignment]) .dragAndDrop(element, targetElem) .moveCursorAndClick(element) .clickElementInSvg(svgElem, innerSelector) userInteraction.click(element, [timeout]) Clicks on the passed element. Kind : static method of userInteraction Param Type Default Description element Object The element. [timeout] Number 30000 The timeout to wait (ms). Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . userInteraction . click ( elem ); userInteraction.clickAndRetry(element, [timeout], [retries], [interval]) Clicks on the passed element, retries in case it fails. Kind : static method of userInteraction Param Type Default Description element Object The element. [timeout] Number 30000 The timeout to wait (ms). [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . userInteraction . clickAndRetry ( elem ); userInteraction.doubleClick(element, [timeout]) Double Clicks on the passed element. Kind : static method of userInteraction Param Type Default Description element Object The element. [timeout] Number 30000 The timeout to wait (ms). Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . userInteraction . doubleClick ( elem ); userInteraction.rightClick(element, [timeout]) Right Clicks on the passed element. Kind : static method of userInteraction Param Type Default Description element Object The element. [timeout] Number 30000 The timeout to wait (ms). Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . userInteraction . rightClick ( elem ); userInteraction.check(element) Checks the given checkbox. Kind : static method of userInteraction Param Type Description element Object The element. Example await nonUi5 . userInteraction . check ( selector ); userInteraction.uncheck(element) Unchecks the given checkbox. Kind : static method of userInteraction Param Type Description element Object The element. Example await nonUi5 . userInteraction . uncheck ( selector ); userInteraction.fill(element, value) Fills the given value into the passed input. Kind : static method of userInteraction Param Type Description element Object The element. value String | Number The value to enter. Example const elem = await nonUi5 . element . getById ( \"input01\" ); await nonUi5 . userInteraction . fill ( elem , \"Service 01\" ); userInteraction.fillAndRetry(element, value, [retries], [interval]) Fills the given value into the passed input, retries in case of a failure. Kind : static method of userInteraction Param Type Default Description element Object The element. value String | Number The value to enter. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example const elem = await nonUi5 . element . getById ( \"input01\" ); await nonUi5 . userInteraction . fillAndRetry ( elem , \"Service 01\" ); userInteraction.clear(element) Clears the passed input element. Kind : static method of userInteraction Param Type Description element Object The element. Example const elem = await nonUi5 . element . getById ( \"input01\" ); await nonUi5 . userInteraction . clear ( elem ); userInteraction.clearAndRetry(element, [retries], [interval]) Clears the passed input element, retries in case of a failure. Kind : static method of userInteraction Param Type Default Description element Object The element. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example const elem = await nonUi5 . element . getById ( \"input01\" , 10000 ); await nonUi5 . userInteraction . clearAndRetry ( elem ); userInteraction.clearAndFill(element, value) Clears and fills the passed input element. Kind : static method of userInteraction Param Type Description element Object The element. value String | Number The value to enter in. Example const elem = await nonUi5 . element . getById ( \"input01\" ); await nonUi5 . userInteraction . clearAndFill ( elem , \"Service 01\" ); userInteraction.clearAndFillAndRetry(element, value, [retries], [interval], [verify]) Clears and fills the passed input, retries in case it fails. Kind : static method of userInteraction Param Type Default Description element Object The element. value String | Number The value to enter in. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. [verify] Boolean true Specifies if the filled value should be verified. Example const elem = await nonUi5 . element . getById ( \"input01\" ); await nonUi5 . userInteraction . clearAndFillAndRetry ( elem , \"Service 01\" ); userInteraction.mouseOverElement(element, [xOffset], [yOffset]) Moves the cursor/focus to the passed element. Kind : static method of userInteraction Param Type Description element Object The element. [xOffset] Number X offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element. [yOffset] Number Y offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element. Example const elem = await nonUi5 . element . getById ( \"dropdown42\" ); await nonUi5 . userInteraction . mouseOverElement ( elem ); userInteraction.scrollToElement(elem, [alignment]) Scrolls an element into view. Kind : static method of userInteraction Param Type Default Description elem Element The target element to scroll to. [alignment] String | Object \"center\" The alignment option for scrolling. Can be one of: \"start\", \"center\", \"end\", \"nearest\", or an object with properties: - block: Vertical alignment (\"start\", \"center\", \"end\", \"nearest\"). - inline: Horizontal alignment (\"start\", \"center\", \"end\", \"nearest\"). Example // Scroll to element with center alignment. const elem = await nonUi5 . userInteraction . getElementById ( \"footer01\" ); await nonUi5 . userInteraction . scrollToElement ( elem , \"center\" ); Example // Scroll to element with custom alignment. const elem = await nonUi5 . userInteraction . getElementById ( \"footer01\" ); const alignment = { block : \"start\" , inline : \"center\" }; await nonUi5 . userInteraction . scrollToElement ( elem , alignment ); userInteraction.dragAndDrop(element, targetElem) Drags and drops the given element to the given target element. Kind : static method of userInteraction Param Type Description element Object The element to drag. targetElem Object The target element to drop the element. Example const elem = await nonUi5 . element . getById ( \"drag01\" ); Example const targetElem = await nonUi5 . element . getById ( \"drop02\" ); await nonUi5 . userInteraction . dragAndDrop ( elem , targetElem ); userInteraction.moveCursorAndClick(element) Moves the cursor to the target element and clicks on it. Can be used for charts. Kind : static method of userInteraction Param Type Description element Object The element to be clicked. Example const elem = await nonUi5 . element . getById ( \"chartPartToClick\" ); await nonUi5 . userInteraction . moveCursorAndClick ( elem ); userInteraction.clickElementInSvg(svgElem, innerSelector) Clicks on an inner element within a SVG element. Kind : static method of userInteraction Param Type Description svgElem Object The SVG element. innerSelector String The CSS selector describing the inner element to be clicked. Example const svgElem = await nonUi5 . element . getByCss ( \"svg\" ); const innerSelector = \"circle:nth-child(6)\" ; await nonUi5 . userInteraction . clickElementInSvg ( svgElem , innerSelector ); service Global namespace for service modules. Kind : global constant service .odata .init(url, username, password, [loggingEnabled], [params], [authType]) \u21d2 Object .get(srv, entitySet, keys, raw) .getEntitySet(srv, entitySet, [filterString], [selectionFields], [queryParams]) \u21d2 Array .isFeatureToggleActivated(srv, featureName) .post(srv, entitySet, payload, raw) .merge(srv, entitySet, payload) .delete(srv, entitySet, options) .callFunctionImport(srv, functionImportName, options) .getOutputManagementPdfStream(outputConf, url, username, password) .readPdfFromDirectUrl(url, [username], [password], [isSaml]) .rest .init([customConfig]) \u21d2 Object .get(uri, [config]) \u21d2 Object .post(uri, payload, [config]) \u21d2 Object .delete(uri, [config]) \u21d2 Object .patch(uri, payload, [config]) \u21d2 Object .put(uri, payload, [config]) \u21d2 Object service.odata Kind : static class of service .odata .init(url, username, password, [loggingEnabled], [params], [authType]) \u21d2 Object .get(srv, entitySet, keys, raw) .getEntitySet(srv, entitySet, [filterString], [selectionFields], [queryParams]) \u21d2 Array .isFeatureToggleActivated(srv, featureName) .post(srv, entitySet, payload, raw) .merge(srv, entitySet, payload) .delete(srv, entitySet, options) .callFunctionImport(srv, functionImportName, options) .getOutputManagementPdfStream(outputConf, url, username, password) .readPdfFromDirectUrl(url, [username], [password], [isSaml]) odata.init(url, username, password, [loggingEnabled], [params], [authType]) \u21d2 Object Initializes The service to work with. XCSRF-Token will be automatically fetched and stored in the service instance. Cookies will also automatically assembled and stored in the service instance. Kind : static method of odata Returns : Object - The initialized service object. Param Type Default Description url String The base url of the service username String The username. password String The password of the username. [loggingEnabled] boolean false The boolean param to control whether user wants to see logs during build run [params] Object {} JSON object with key-value pairs of parameter names and corresponding values by default we send { \"client\": \"715\", \"documentation\": [\"heading\", \"quickinfo\"], \"language\": \"EN\" } These can be overridden by sending params as JSON object with additional params as shown in example [authType] String authentication type, in case you want to override the default SAML authentication. Set this to \"basic\", to use basic authentication for communication users for whom SAML login doesn't work. Or \"none\" for no authentication. Example const url = \"<urlToSystem>/sap/opu/odata/sap/API_PURCHASEORDER_PROCESS_SRV/\" ; const params = { \"saml2\" : \"disabled\" , \"language\" : \"de\" } srv = await service . odata . init ( url , user , password , false , params ); odata.get(srv, entitySet, keys, raw) makes a GET request. Kind : static method of odata Param Type Description srv Object Instance of the service entitySet String The entitySet you want to GET from. keys Object The required keys for the GET-request. raw Boolean Response includes all header contents. Example const url = \"<baseUrl>/sap/opu/odata/sap/API_PURCHASEORDER_PROCESS_SRV/\" ; srv = await service . odata . init ( url , user , password ); const keys = { PurchaseOrder : \"4100000000\" }; const res = await service . odata . get ( srv , \"A_PurchaseOrder\" , keys ); odata.getEntitySet(srv, entitySet, [filterString], [selectionFields], [queryParams]) \u21d2 Array GET's the EntitySet collection. Kind : static method of odata Returns : Array - - Result set array Param Type Description srv Object Instance of the service entitySet String The entitySet you want to GET from. [filterString] String The filters to be applied on get query [selectionFields] String comma separated list of fields to be selected [queryParams] Object JSON object of key value pairs of custom query parameters. Example const url = \"<baseUrl>/sap/opu/odata/sap/API_PURCHASEORDER_PROCESS_SRV/\" ; srv = await service . odata . init ( url , user , password ); let filterString = \"Status eq '01'\" ; let res = await service . odata . getEntitySet ( srv , \"A_PurchaseOrder\" , filterString ); let select = \"CentralPurchaseContract,PurchasingProcessingStatus\" ; let res = await service . odata . getEntitySet ( srv , \"A_PurchaseOrder\" , filterString , select ); let queryParams = { \"$top\" : 5 , \"$skip\" : 10 , }; let res = await service . odata . getEntitySet ( srv , \"A_PurchaseOrder\" , filterString , select , queryParams ); odata.isFeatureToggleActivated(srv, featureName) checks if a feature toggle is switched on or off Kind : static method of odata Param Type Description srv Object Instance of the service featureName String The name of the feature you want know the status of. Example const url = browser . params . systemUrl + \"/sap/opu/odata/SAP/CA_FM_FEATURE_TOGGLE_STATUS_SRV/\" ; const srv = await service . odata . init ( url , user , password ); let isFeatureActive = await service . odata . isFeatureToggleActivated ( srv , \"MM_PUR_PO_BATCHES_IN_MANAGE_PO\" ); odata.post(srv, entitySet, payload, raw) makes a POST request. Kind : static method of odata Param Type Description srv Object Instance of the service entitySet String The entitySet you want to POST against. payload Object The payload for the POST-request. raw Boolean Response includes all header contents. Example let payload = { \"PurchaseOrder\" : \"4500007108\" , \"DraftUUID\" : \"00000000-0000-0000-0000-000000000000\" , \"IsActiveEntity\" : \"true\" }; let res = await service . odata . post ( srv , \"A_PurchaseOrder\" , payload ); odata.merge(srv, entitySet, payload) makes a MERGE request. Kind : static method of odata Param Type Description srv Object Instance of the service entitySet String The entitySet you want to MERGE in. payload Object The payload for the MERGE-request. Example let res = await service . odata . merge ( srv , \"A_PurchaseOrderScheduleLine\" , { \"PurchasingDocument\" : \"4500007108\" , \"PurchasingDocumentItem\" : \"10\" , \"ScheduleLine\" : \"1\" , \"ScheduleLineDeliveryDate\" : new Date () }; odata.delete(srv, entitySet, options) makes a DELETE request. Kind : static method of odata Param Type Description srv Object Instance of the service entitySet String The entitySet you want to DELETE. options Object The options for the DELETE-request. Example let options = { \"PurchaseOrder\" : \"\" , \"DraftUUID\" : draftUUID , \"IsActiveEntity\" : false }; await service . odata . delete ( srv , \"C_PurchaseOrderTP\" , options ); odata.callFunctionImport(srv, functionImportName, options) makes a function import request on an OData service. Kind : static method of odata Param Type Description srv Object Instance of the service functionImportName String Name of Function Import options Object parameters for function import Example const options = { CentralRequestForQuotation : \"7500000026\" , Supplier : \"100006\" }; const res = await service . odata . callFunctionImport ( srv , \"Cancel\" , options ); odata.getOutputManagementPdfStream(outputConf, url, username, password) returns a stream of output management pdf file. Kind : static method of odata Param Type Description outputConf Object Configuration for the output management pdf. url String system url username String username for login password String password for login Example const outputConf = ApplObjectType : \"REQUEST_FOR_QUOTATION\" , ApplObjectId : \"7000002653\" , ItemId : \"1\" }; const pdfStream = await service . odata . getOutputManagementPdfStream ( outputConf , url , user , password ); odata.readPdfFromDirectUrl(url, [username], [password], [isSaml]) returns a stream of pdf file which is part of attachment. Kind : static method of odata Param Type Default Description url String system url [username] String username for login [password] String password for login [isSaml] Boolean false use SAML login if true Example const url = \"https://domain.com/getPdfFile\" ; const pdfStream = await service . odata . readPdfFromDirectUrl ( url , \"username\" , \"Password\" ); service.rest Kind : static class of service .rest .init([customConfig]) \u21d2 Object .get(uri, [config]) \u21d2 Object .post(uri, payload, [config]) \u21d2 Object .delete(uri, [config]) \u21d2 Object .patch(uri, payload, [config]) \u21d2 Object .put(uri, payload, [config]) \u21d2 Object rest.init([customConfig]) \u21d2 Object Returns an axios instance for custom axios handling. Kind : static method of rest Returns : Object - The axios instance. Param Type Default Description [customConfig] Object {} Custom config for axios. If not specified axios defaults will be taken. Example const customConfig = { baseURL : 'https://some-domain.com/api/' , timeout : 1000 , headers : { 'X-Custom-Header' : 'foobar' } const axios = service . rest . init ( customConfig ); rest.get(uri, [config]) \u21d2 Object makes a GET request. Kind : static method of rest Returns : Object - The response of the GET request. Param Type Description uri String The uri to the data source you want to GET. [config] Object The config options for the request. Example const uri = https : //api.predic8.de/shop/products/\"; let res = await service . rest . get ( uri ); common . assertion . expectEqual ( res . data . title , \"qmate-service\" ); rest.post(uri, payload, [config]) \u21d2 Object makes a POST request. Kind : static method of rest Returns : Object - The response of the POST request. Param Type Description uri String The uri to the data source you want to POST against. payload Object The data you want to POST against your entity set. [config] Object The config options for the request. Example const payload = { id : 99 , title : \"qmate-service\" , author : \"marvin\" }; const config = { headers : { \"X-CSRF-TOKEN\" : \"<CSRF TOKEN>\" , \"Cookie\" : \"<COOKIE>\" , \"Content-Type\" : \"application/json\" } }; let res = await service . rest . post ( ` ${ browser . config . baseUrl } /posts/99` , payload , config ); rest.delete(uri, [config]) \u21d2 Object makes a DELETE request. Kind : static method of rest Returns : Object - The response of the DELETE request. Param Type Description uri String The uri to the data source you want to DELETE. [config] Object The config options for the request. Example const config = { auth : { \"username\" : \"<username>\" , \"password\" : \"<password>\" } }; let res = await service . rest . delete ( ` ${ browser . config . baseUrl } /posts/99` , config ); rest.patch(uri, payload, [config]) \u21d2 Object makes a PATCH request. Kind : static method of rest Returns : Object - The response of the PATCH request. Param Type Description uri String The uri to the data source you want to PATCH. payload Object The data to be used for updating the entity. [config] Object The config options for the request. Example const config = { auth : { \"username\" : \"<username>\" , \"password\" : \"<password>\" } }; const payload = { \"title\" : \"patched-qmate-service\" , \"author\" : \"qmate-tester\" }, let res = await service . rest . patch ( ` ${ browser . config . baseUrl } /posts/99` , payload , config ); rest.put(uri, payload, [config]) \u21d2 Object makes a PUT request. Kind : static method of rest Returns : Object - The response of the PUT request. Param Type Description uri String The uri to the data source you want to PUT. payload Object The data to be used for updating the entity. [config] Object The config options for the request. Example const config = { auth : { \"username\" : \"<username>\" , \"password\" : \"<password>\" } } const payload = { \"id\" : 99 , \"title\" : \"put-qmate-service\" , \"author\" : \"qmate-tester\" }, let res = await service . rest . put ( ` ${ browser . config . baseUrl } /posts/99` , payload , config );","title":"\u2630 Reuse API"},{"location":"doc/#constants","text":"common Global namespace for common modules. util Global namespace for util modules. ui5 Global namespace for UI5 modules. nonUi5 Global namespace for non UI5 modules. service Global namespace for service modules.","title":"Constants"},{"location":"doc/#common","text":"Global namespace for common modules. Kind : global constant common .assertion .expectEqual(value1, value2) .expectUnequal(value1, value2) .expectTrue(value) .expectFalse(value) .expectDefined(value) .expectUndefined(value) .expectUrlToBe() .date .getToday([format]) \u21d2 String .getTomorrow([format]) \u21d2 String .getNextMonth([format]) \u21d2 String .getPreviousMonth([format]) \u21d2 String .getNextYear([format]) \u21d2 String .getPreviousYear([format]) \u21d2 String .getSpecific(date, [format]) \u21d2 String .calculate([date], [format]) \u21d2 String .navigation .navigateToUrl(url) .navigateToUrlAndRetry(url, [retries], [interval]) .userInteraction .fillActive(value) .fillActiveAndRetry(value, [retries], [interval]) .clearAndFillActive(value) .clearAndFillActiveAndRetry(value, [retries], [interval]) .pressKey(keys) .pressEnter() .pressTab() .pressF4() .pressBackspace() .pressEscape() .pressArrowLeft() .pressArrowRight()","title":"common"},{"location":"doc/#commonassertion","text":"Kind : static class of common .assertion .expectEqual(value1, value2) .expectUnequal(value1, value2) .expectTrue(value) .expectFalse(value) .expectDefined(value) .expectUndefined(value) .expectUrlToBe()","title":"common.assertion"},{"location":"doc/#assertionexpectequalvalue1-value2","text":"Expects the passed values to be equal. Kind : static method of assertion Param Type Description value1 Any Value (1) to be equal to value (2) value2 Any Value (2) to be equal to value (1) Example common . assertion . expectEqual ( value1 , value2 );","title":"assertion.expectEqual(value1, value2)"},{"location":"doc/#assertionexpectunequalvalue1-value2","text":"Expects the passed values to be unequal. Kind : static method of assertion Param Type Description value1 Any Value (1) to be unequal to value (2) value2 Any Value (2) to be unequal to value (1) Example common . assertion . expectUnequal ( value1 , value2 );","title":"assertion.expectUnequal(value1, value2)"},{"location":"doc/#assertionexpecttruevalue","text":"Expects the passed value to be true. Kind : static method of assertion Param Type Description value Any Value to be equal to true Example common . assertion . expectTrue ( value );","title":"assertion.expectTrue(value)"},{"location":"doc/#assertionexpectfalsevalue","text":"Expects the passed value to be false. Kind : static method of assertion Param Type Description value Boolean The value to be false. Example common . assertion . expectFalse ( false );","title":"assertion.expectFalse(value)"},{"location":"doc/#assertionexpectdefinedvalue","text":"Expects the passed values is defined. Kind : static method of assertion Param Type Description value Any Value to be defined (not undefined) Example common . assertion . expectDefined ( value );","title":"assertion.expectDefined(value)"},{"location":"doc/#assertionexpectundefinedvalue","text":"Expects the passed values is undefined. Kind : static method of assertion Param Type Description value Any Value to be undefined Example common . assertion . expectUndefined ( value );","title":"assertion.expectUndefined(value)"},{"location":"doc/#assertionexpecturltobe","text":"Expects the url to be the passed value. Kind : static method of assertion Example await common . assertion . expectUrlToBe ( \"www.sap.com\" );","title":"assertion.expectUrlToBe()"},{"location":"doc/#commondate","text":"Kind : static class of common .date .getToday([format]) \u21d2 String .getTomorrow([format]) \u21d2 String .getNextMonth([format]) \u21d2 String .getPreviousMonth([format]) \u21d2 String .getNextYear([format]) \u21d2 String .getPreviousYear([format]) \u21d2 String .getSpecific(date, [format]) \u21d2 String .calculate([date], [format]) \u21d2 String","title":"common.date"},{"location":"doc/#dategettodayformat-string","text":"Returns the current day in the given format. Kind : static method of date Returns : String - The date in the given format. Param Type Default Description [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . getToday ( \"mm/dd/yyyy\" );","title":"date.getToday([format]) \u21d2 String"},{"location":"doc/#dategettomorrowformat-string","text":"Returns tomorrows date in the given format. Kind : static method of date Returns : String - The date in the given format. Param Type Default Description [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . getTomorrow ( \"mm/dd/yyyy\" );","title":"date.getTomorrow([format]) \u21d2 String"},{"location":"doc/#dategetnextmonthformat-string","text":"Returns the current day one month later in the given format. Kind : static method of date Returns : String - The date in the given format. Param Type Default Description [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . getNextMonth ( \"mm/dd/yyyy\" );","title":"date.getNextMonth([format]) \u21d2 String"},{"location":"doc/#dategetpreviousmonthformat-string","text":"Returns the current day one month before in the given format. Kind : static method of date Returns : String - The date in the given format. Param Type Default Description [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . getPreviousMonth ( \"mm/dd/yyyy\" );","title":"date.getPreviousMonth([format]) \u21d2 String"},{"location":"doc/#dategetnextyearformat-string","text":"Returns the current day one year later in the given format. Kind : static method of date Returns : String - The date in the given format. Param Type Default Description [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . getNextYear ( \"mm/dd/yyyy\" );","title":"date.getNextYear([format]) \u21d2 String"},{"location":"doc/#dategetpreviousyearformat-string","text":"Returns the current day one year before in the given format. Kind : static method of date Returns : String - The date in the given format. Param Type Default Description [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . getPreviousYear ( \"mm/dd/yyyy\" );","title":"date.getPreviousYear([format]) \u21d2 String"},{"location":"doc/#dategetspecificdate-format-string","text":"Returns a specific date in the given format. Kind : static method of date Returns : String - The date in the given format. Param Type Default Description date String A specific date string. [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . getSpecific ( \"2020, 0, 17\" , \"mm/dd/yyyy\" );","title":"date.getSpecific(date, [format]) \u21d2 String"},{"location":"doc/#datecalculatedate-format-string","text":"Calculates the date based on the input parameter and returns it in the given format. Kind : static method of date Returns : String - The calculated date in the given format. Param Type Default Description [date] String \"today\" Supported values: today, tomorrow, nextMonth, previousMonth, nextYear, previousYear [format] String \"object\" The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"mmm d, yyyy\", \"datetime\", \"object\"). Example const date = await common . date . calculate ( \"today\" , \"mm/dd/yyyy\" );","title":"date.calculate([date], [format]) \u21d2 String"},{"location":"doc/#commonnavigation","text":"Kind : static class of common .navigation .navigateToUrl(url) .navigateToUrlAndRetry(url, [retries], [interval])","title":"common.navigation"},{"location":"doc/#navigationnavigatetourlurl","text":"Navigates to the passed url. Kind : static method of navigation Param Type Description url String The url. Example await common . navigation . navigateToUrl ( \"www.sap.com\" );","title":"navigation.navigateToUrl(url)"},{"location":"doc/#navigationnavigatetourlandretryurl-retries-interval","text":"Navigates to the passed url and retries the function in case of a failure. Kind : static method of navigation Param Type Default Description url String The url to navigate to. [retries] Integer 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Integer 5000 The interval of the retries (ms), can be set in config for all functions under params stepRetriesIntervals. Example await common . navigation . navigateToUrlAndRetry ( \"www.sap.com\" );","title":"navigation.navigateToUrlAndRetry(url, [retries], [interval])"},{"location":"doc/#commonuserinteraction","text":"Kind : static class of common .userInteraction .fillActive(value) .fillActiveAndRetry(value, [retries], [interval]) .clearAndFillActive(value) .clearAndFillActiveAndRetry(value, [retries], [interval]) .pressKey(keys) .pressEnter() .pressTab() .pressF4() .pressBackspace() .pressEscape() .pressArrowLeft() .pressArrowRight()","title":"common.userInteraction"},{"location":"doc/#userinteractionfillactivevalue","text":"Fills the active input with the given value. Kind : static method of userInteraction Param Type Description value String | Number The value to enter. Example await common . userInteraction . fillActive ( \"My Value\" );","title":"userInteraction.fillActive(value)"},{"location":"doc/#userinteractionfillactiveandretryvalue-retries-interval","text":"Enters the given value to the active input field and retries the action in case it fails. Kind : static method of userInteraction Param Type Default Description value String The value to enter. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await common . userInteraction . fillActiveAndRetry ( \"My Value\" );","title":"userInteraction.fillActiveAndRetry(value, [retries], [interval])"},{"location":"doc/#userinteractionclearandfillactivevalue","text":"Clears and fills the active input. Kind : static method of userInteraction Param Type Description value String The value to fill. Example await common . userInteraction . clearAndFillActive ( \"My Value\" );","title":"userInteraction.clearAndFillActive(value)"},{"location":"doc/#userinteractionclearandfillactiveandretryvalue-retries-interval","text":"CClears and fills the active input. Retries the action in case of a failure. Kind : static method of userInteraction Param Type Default Description value String The value to fill. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await common . userInteraction . clearAndFillActiveAndRetry ( \"My Value\" );","title":"userInteraction.clearAndFillActiveAndRetry(value, [retries], [interval])"},{"location":"doc/#userinteractionpresskeykeys","text":"Performs the specified keypress. Possible values: https://w3c.github.io/webdriver/#keyboard-actions Kind : static method of userInteraction Param Type Description keys String | Array.<String> The key or combination of keys to execute. Example await common . userInteraction . pressKey ( \"Enter\" ); Example await common . userInteraction . pressKey ( \"\\uE004\" ); Example await common . userInteraction . pressKey ([ \"\\uE009\" , \"Alt\" ]);","title":"userInteraction.pressKey(keys)"},{"location":"doc/#userinteractionpressenter","text":"Performs the Enter keypress. Kind : static method of userInteraction Example await common . userInteraction . pressEnter ();","title":"userInteraction.pressEnter()"},{"location":"doc/#userinteractionpresstab","text":"Performs the Tab keypress. Kind : static method of userInteraction Example await common . userInteraction . pressTab ();","title":"userInteraction.pressTab()"},{"location":"doc/#userinteractionpressf4","text":"Performs the F4 keypress. Kind : static method of userInteraction Example await common . userInteraction . pressF4 ();","title":"userInteraction.pressF4()"},{"location":"doc/#userinteractionpressbackspace","text":"Performs the Backspace keypress. Kind : static method of userInteraction Example await common . userInteraction . pressBackspace ();","title":"userInteraction.pressBackspace()"},{"location":"doc/#userinteractionpressescape","text":"Performs the Escape keypress. Kind : static method of userInteraction Example await common . userInteraction . pressEscape ();","title":"userInteraction.pressEscape()"},{"location":"doc/#userinteractionpressarrowleft","text":"Performs the Arrow Left keypress. Kind : static method of userInteraction Example await common . userInteraction . pressArrowLeft ();","title":"userInteraction.pressArrowLeft()"},{"location":"doc/#userinteractionpressarrowright","text":"Performs the Arrow Right keypress. Kind : static method of userInteraction Example await common . userInteraction . pressArrowRight ();","title":"userInteraction.pressArrowRight()"},{"location":"doc/#util","text":"Global namespace for util modules. Kind : global constant util .browser .getBaseUrl() \u21d2 String .setBaseUrl(baseUrl:) .logCurrentUrl() .getCurrentUrl() .resetFocus() .sleep([duration]) .collectCoverage() .sleepAndCollectCoverage([duration]) .refresh() .clearBrowser([clearLocal], [clearSession], [clearCookies]) .getBrowserName() \u21d2 String .getUI5Version([timeout]) .logUI5Version() .executeScript(command) \u21d2 Any .switchToNewWindow(titleOrUrl, [timeout]) .switchToWindow(handle) .getCurrentWindow() \u21d2 Object .switchToIframe(selector) .switchToDefaultContent() .back() .log(message) .warn(message) .error(message) .component new component() .loadEntryPoint([folderPath]) \u21d2 Object .storeEntryPoint(data, [folderPath]) .console .log(message, [textColor], [backgroundColor], [brightness]) .error(message) .warn(message) .success(message) .info(message) .data .getData(filename, [source]) \u21d2 Object .getSecureData(filename, [source]) \u21d2 Object .readDataFromFile(filePath) \u21d2 Object .writeDataToFile(filePath, data) .decrypt(data) \u21d2 Object .file .upload(files, [selector]) .uploadWebGui(files, selector) .parsePdf(pdfStream, renderingMethod) \u21d2 String .expectPdfContainsText(pdfStream, text, renderingMethod) .expectPdfNotContainsText(pdfStream, text, renderingMethod) .getExcelData(filePath, fileName, [sheetIndex], [conversionType]) .getTextData(filePath) .expectTextDataToContain(filePath) .getXmlData(filePath) .getAttributeValuesFromJson(object) .findFilePathRecursively(directory, fileName) .getFileNamesByExtensions(dirPath, fileExtensions) .formatter .sliceStringAt(input, slicePoint, length) \u21d2 String .sliceStringAfter(input, slicePoint, length) \u21d2 String .trimString(input) .extractNumberFromString(input, [index]) \u21d2 String .stringifyJSON(object) \u21d2 String .addRemoveLeadingZeros(number, length) \u21d2 String .formatDate(date, format, [locale]) \u21d2 String .function .retry(fct, args, [retries], [interval], [scope]) .executeOptional(fct, args) .system .getOS() \u21d2 String","title":"util"},{"location":"doc/#utilbrowser","text":"Kind : static class of util .browser .getBaseUrl() \u21d2 String .setBaseUrl(baseUrl:) .logCurrentUrl() .getCurrentUrl() .resetFocus() .sleep([duration]) .collectCoverage() .sleepAndCollectCoverage([duration]) .refresh() .clearBrowser([clearLocal], [clearSession], [clearCookies]) .getBrowserName() \u21d2 String .getUI5Version([timeout]) .logUI5Version() .executeScript(command) \u21d2 Any .switchToNewWindow(titleOrUrl, [timeout]) .switchToWindow(handle) .getCurrentWindow() \u21d2 Object .switchToIframe(selector) .switchToDefaultContent() .back() .log(message) .warn(message) .error(message)","title":"util.browser"},{"location":"doc/#browsergetbaseurl-string","text":"Retrieves the baseUrl from the configuration file. Kind : static method of browser Returns : String - The baseUrl. Example const baseUrl = util . browser . getBaseUrl ();","title":"browser.getBaseUrl() \u21d2 String"},{"location":"doc/#browsersetbaseurlbaseurl","text":"Sets or overwrites the baseUrl in the configuration file. Kind : static method of browser Param Type Description baseUrl: String base URL to set Example await util . browser . setBaseUrl ( \"https://www.sap.com\" );","title":"browser.setBaseUrl(baseUrl:)"},{"location":"doc/#browserlogcurrenturl","text":"Displays the current URL in the console. Kind : static method of browser Example await util . browser . logCurrentUrl ();","title":"browser.logCurrentUrl()"},{"location":"doc/#browsergetcurrenturl","text":"Returns the current URL Kind : static method of browser Example await util . browser . getCurrentUrl ();","title":"browser.getCurrentUrl()"},{"location":"doc/#browserresetfocus","text":"Resets the focus in case it set for a specific element. Kind : static method of browser Example await util . browser . resetFocus ();","title":"browser.resetFocus()"},{"location":"doc/#browsersleepduration","text":"Sleeps (pauses execution) for the passed duration. Kind : static method of browser Param Type Default Description [duration] Number 1000 The time to pause (ms). Example await util . browser . sleep ( 30000 );","title":"browser.sleep([duration])"},{"location":"doc/#browsercollectcoverage","text":"Trigger collection of coverage by coverage service. Kind : static method of browser Example await util . browser . collectCoverage ();","title":"browser.collectCoverage()"},{"location":"doc/#browsersleepandcollectcoverageduration","text":"Trigger collection of coverage by coverage service. Kind : static method of browser Param Type Default Description [duration] Number 1000 The time to pause (ms). Example await util . browser . sleepAndCollectCoverage ( 3000 );","title":"browser.sleepAndCollectCoverage([duration])"},{"location":"doc/#browserrefresh","text":"Refreshes the page. Kind : static method of browser Example await util . browser . refresh ();","title":"browser.refresh()"},{"location":"doc/#browserclearbrowserclearlocal-clearsession-clearcookies","text":"Clears the local and session cache and deletes all browser cookies. Kind : static method of browser Param Type Default Description [clearLocal] Boolean true Specifies if the local cache will be cleared. [clearSession] Boolean true Specifies if the session cache will be cleared. [clearCookies] Boolean true Specifies if the cookies will be cleared. Example await util . browser . clearBrowser ();","title":"browser.clearBrowser([clearLocal], [clearSession], [clearCookies])"},{"location":"doc/#browsergetbrowsername-string","text":"Retrieves the name of the current browser. Kind : static method of browser Returns : String - The browser name. Example const browserName = util . browser . getBrowserName ();","title":"browser.getBrowserName() \u21d2 String"},{"location":"doc/#browsergetui5versiontimeout","text":"Gets the UI5 version and creation date for UI5 based applications. Kind : static method of browser Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await util . browser . getUI5Version ();","title":"browser.getUI5Version([timeout])"},{"location":"doc/#browserlogui5version","text":"Logs the UI5 version and creation date for UI5 based applications to the console. Kind : static method of browser Example await util . browser . logUI5Version ();","title":"browser.logUI5Version()"},{"location":"doc/#browserexecutescriptcommand-any","text":"Executes the specified JavaScript command. Kind : static method of browser Returns : Any - The result from the executed function. Param Type Description command String The command to execute. Example await util . browser . executeScript ( command );","title":"browser.executeScript(command) \u21d2 Any"},{"location":"doc/#browserswitchtonewwindowtitleorurl-timeout","text":"Switches to the window or tab with the given title. Kind : static method of browser Param Type Default Description titleOrUrl String | RegExp Window title or url of the expected window or tab (can be either a string or part of it as regular expression). [timeout] Number 10000 The timeout to wait (ms). Example await util . browser . switchToNewWindow ( \"SAP - Home\" ); Example await util . browser . switchToNewWindow ( /Home/ ); Example await util . browser . switchToNewWindow ( \"www.sap.com\" );","title":"browser.switchToNewWindow(titleOrUrl, [timeout])"},{"location":"doc/#browserswitchtowindowhandle","text":"Switches to the passed window. Kind : static method of browser Param Type Description handle Object The window handle. Example await util . browser . switchToWindow ( originalWindowHandle );","title":"browser.switchToWindow(handle)"},{"location":"doc/#browsergetcurrentwindow-object","text":"Returns the current window handle. Kind : static method of browser Returns : Object - The window handle. Example const originalWindowHandle = await util . browser . getCurrentWindow ();","title":"browser.getCurrentWindow() \u21d2 Object"},{"location":"doc/#browserswitchtoiframeselector","text":"Switches to the passed iframe. Kind : static method of browser Param Type Description selector String The CSS selector describing the iframe element. Example await util . browser . switchToIframe ( \"iframe[id='frame01']\" );","title":"browser.switchToIframe(selector)"},{"location":"doc/#browserswitchtodefaultcontent","text":"Switches to the default content of the HTML page. Kind : static method of browser Example await util . browser . switchToDefaultContent ();","title":"browser.switchToDefaultContent()"},{"location":"doc/#browserback","text":"Go one step back in browser history. Kind : static method of browser Example await util . browser . back ();","title":"browser.back()"},{"location":"doc/#browserlogmessage","text":"add log message to browser logs, can be viewed in the html report Kind : static method of browser Param Type Description message String string - The message to be logged. Example await util . browser . log ( \"Created PO 123456\" );","title":"browser.log(message)"},{"location":"doc/#browserwarnmessage","text":"add warning message to browser logs, can be viewed in the html report Kind : static method of browser Param Type Description message String string - The warning message to be logged. Example await util . browser . warn ( \"This is a warning message\" );","title":"browser.warn(message)"},{"location":"doc/#browsererrormessage","text":"add error message to browser logs, can be viewed in the html report Kind : static method of browser Param Type Description message String string - The error message to be logged. Example await util . browser . error ( \"This is an error message\" );","title":"browser.error(message)"},{"location":"doc/#utilcomponent","text":"Kind : static class of util .component new component() .loadEntryPoint([folderPath]) \u21d2 Object .storeEntryPoint(data, [folderPath])","title":"util.component"},{"location":"doc/#new-component","text":"This class provides functions for writing component tests with qmate-proxy-service","title":"new component()"},{"location":"doc/#componentloadentrypointfolderpath-object","text":"Will be called in component test scripts. Returns a previously stored entry point object for sharing information (like a draft id) between preparation and the actual component tests. Kind : static method of component Returns : Object - The data object of the stored entry point. Param Type Default Description [folderPath] String \"./entrypoints\" Custom folder path where entry points are stored. Example const entryPoint = util . component . loadEntryPoint ();","title":"component.loadEntryPoint([folderPath]) \u21d2 Object"},{"location":"doc/#componentstoreentrypointdata-folderpath","text":"Will be called in preparation scripts before component tests. Stores an entry point object for sharing information (like a draft id) between preparation and the actual component tests. Kind : static method of component Param Type Default Description data Object The data object of the entry point to store. [folderPath] String \"./entrypoints\" Custom folder path where entry points are stored. Example const entryPoint = util . component . storeEntryPoint ({ \"draftId\" : \"0123456789\" });","title":"component.storeEntryPoint(data, [folderPath])"},{"location":"doc/#utilconsole","text":"Kind : static class of util .console .log(message, [textColor], [backgroundColor], [brightness]) .error(message) .warn(message) .success(message) .info(message)","title":"util.console"},{"location":"doc/#consolelogmessage-textcolor-backgroundcolor-brightness","text":"Logs a message to the console in the given color. Kind : static method of console Param Type Description message String The message to log. [textColor] String The color of the text: \"black, white\", \"red\", \"yellow\", \"green\", \"blue\", \"cyan\", \"magenta\". [backgroundColor] String The color of the background: \"black, white\", \"red\", \"yellow\", \"green\", \"blue\", \"cyan\", \"magenta\". [brightness] String Adjusts the brightness of the color: \"bright\", \"dim\". Leave empty for default. Example util . console . log ( \"The document has been saved.\" , \"green\" );","title":"console.log(message, [textColor], [backgroundColor], [brightness])"},{"location":"doc/#consoleerrormessage","text":"Logs a error message to the console in red. Kind : static method of console Param Type Description message String The message to log. Example util . console . error ( \"Error: Please investigate.\" );","title":"console.error(message)"},{"location":"doc/#consolewarnmessage","text":"Logs a warning message to the console in yellow. Kind : static method of console Param Type Description message String The message to log. Example util . console . warn ( \"Optional step not executed.\" );","title":"console.warn(message)"},{"location":"doc/#consolesuccessmessage","text":"Logs a success message to the console in green. Kind : static method of console Param Type Description message String The message to log. Example util . console . success ( \"The document has been saved.\" );","title":"console.success(message)"},{"location":"doc/#consoleinfomessage","text":"Logs a info message to the console in cyan. Kind : static method of console Param Type Description message String The message to log. Example util . console . success ( \"The document has been saved.\" );","title":"console.info(message)"},{"location":"doc/#utildata","text":"Kind : static class of util .data .getData(filename, [source]) \u21d2 Object .getSecureData(filename, [source]) \u21d2 Object .readDataFromFile(filePath) \u21d2 Object .writeDataToFile(filePath, data) .decrypt(data) \u21d2 Object","title":"util.data"},{"location":"doc/#datagetdatafilename-source-object","text":"Returns the data object with the given filename (JSON, stored in data folder). Kind : static method of data Returns : Object - The data object. Param Type Default Description filename String The name of the data file. [source] String data The source key defined under params.import of the config file. Example const data = util . data . getData ( \"myTest\" );","title":"data.getData(filename, [source]) \u21d2 Object"},{"location":"doc/#datagetsecuredatafilename-source-object","text":"Returns and encrypts the data object with the given filename (JSON, stored in data folder). Will return the local file object if private key is not accessible. Kind : static method of data Returns : Object - The encrypted or local data object. Param Type Default Description filename String The name of the data file (without suffix '.secure' or '.local'). [source] String data The source key defined under params.import of the config file. Example const secureData = util . data . getSecureData ( \"myTest\" );","title":"data.getSecureData(filename, [source]) \u21d2 Object"},{"location":"doc/#datareaddatafromfilefilepath-object","text":"Reads the data object from the given filepath. Kind : static method of data Returns : Object - The data object. Param Type Description filePath String The filepath. Example const data = util . data . readDataFromFile ( \"./data/myData.json\" );","title":"data.readDataFromFile(filePath) \u21d2 Object"},{"location":"doc/#datawritedatatofilefilepath-data","text":"Writes the data object to the given filepath. Kind : static method of data Param Type Description filePath String The filepath. data Object The data object to write. Example const data = util . data . writeDataToFile ( \"myTest\" );","title":"data.writeDataToFile(filePath, data)"},{"location":"doc/#datadecryptdata-object","text":"Decrypts the passed input data. Kind : static method of data Returns : Object - The decrypted data. Param Type Description data String The encrypted data to decrypt. Example const decrypted = util . data . decrypt ( \"d704004c262faa8ef4bdcf34c8a94883e15524872c7bef334d26a391a1934cf47338b749d99426980ee4cc7a81deaef21439c6894ab0324cdb29b9b6332635baca442651c5d37847f52bb90b8868e037271a7d456024b39b65fdf4dc62e8d82a3d5683a72e4324c59d339742fc79749f0ee74abef916d38e306218adc48e3547a2b346962249320c962d22cb46d9998de36d8219a2496c0997d0fc389f76fb1431a9b57c317886e9c9795c0a09ad98d9fa0b7687d10814dc7973397f3f72a227a04ead4c3d1d428c096a51922ffc4d7afc3952df1c130def5c5fb3e834605cbf1454885966cc65c77046343f4c678e74931fb2dd6cac8dae17837cf674f288d6550dd7fa6b01f5b7ea68aa6bd27d79dd5d53edb5fd4b4edce824bd31b3939352ad7a71a16bab8c54025c2bb92c54e022fcd23ff08bc54a17fc50d00dc3b884cadbfdefe1e75901fdf80e7324ad02a891f2c4863fa120ca238520b79126c65a03\" );","title":"data.decrypt(data) \u21d2 Object"},{"location":"doc/#utilfile","text":"Kind : static class of util .file .upload(files, [selector]) .uploadWebGui(files, selector) .parsePdf(pdfStream, renderingMethod) \u21d2 String .expectPdfContainsText(pdfStream, text, renderingMethod) .expectPdfNotContainsText(pdfStream, text, renderingMethod) .getExcelData(filePath, fileName, [sheetIndex], [conversionType]) .getTextData(filePath) .expectTextDataToContain(filePath) .getXmlData(filePath) .getAttributeValuesFromJson(object) .findFilePathRecursively(directory, fileName) .getFileNamesByExtensions(dirPath, fileExtensions)","title":"util.file"},{"location":"doc/#fileuploadfiles-selector","text":"Uploads all the file/s by the paths given in the Array. Kind : static method of file Param Type Default Description files Array.<String> Array with path/s of file/s to be uploaded. [selector] String \"input[type='file']\" Custom selector of uploader control (in case there are more then one present). Example await util . file . upload ([ \"path/to/text1.txt\" , \"path/to/text2.txt\" ]); // uses the default uploader control Example await util . file . upload ([ \"path/to/text1.txt\" , \"path/to/text2.txt\" ], \"input[id='myUpload']\" ); // upload to file uploader with matching selector","title":"file.upload(files, [selector])"},{"location":"doc/#fileuploadwebguifiles-selector","text":"Uploads all the file/s by the paths given in the Array for SAP WebGUI apps. Kind : static method of file Param Type Description files Array.<String> Array with path/s of file/s to be uploaded. selector String Custom selector of the input element Example await util . file . uploadWebGui ([ \"path/to/text1.txt\" ], \"INPUT[title='External file name']\" );","title":"file.uploadWebGui(files, selector)"},{"location":"doc/#fileparsepdfpdfstream-renderingmethod-string","text":"Parses the text from PDF stream. Returned text can be asserted to verify the PDF document content. Kind : static method of file Returns : String - The parsed PDF text. See : Parse PDF Param Type Description pdfStream Buffer PDF stream to be downloaded. renderingMethod function Function to customize the parsing process. Example await util . file . parsePdf ( pdfStream , customRenderingMethod );","title":"file.parsePdf(pdfStream, renderingMethod) \u21d2 String"},{"location":"doc/#fileexpectpdfcontainstextpdfstream-text-renderingmethod","text":"Parses the PDF and checks for given text to be contained in PDF. Kind : static method of file See : Parse pdf Param Type Description pdfStream Buffer PDF stream to be downloaded. text String The expected text. renderingMethod function Function to customize the parsing process. Example await util . file . expectPdfContainsText ( pdfStream , \"abc\" );","title":"file.expectPdfContainsText(pdfStream, text, renderingMethod)"},{"location":"doc/#fileexpectpdfnotcontainstextpdfstream-text-renderingmethod","text":"Parses the PDF and checks for given text not to be contained in PDF. Kind : static method of file See : Parse pdf Param Type Description pdfStream Buffer PDF stream to be downloaded text String The text expected to be not contained in the PDF. renderingMethod function Function to customize the parsing process. Example await util . file . expectPdfNotContainsText ( pdfStream , \"abc\" );","title":"file.expectPdfNotContainsText(pdfStream, text, renderingMethod)"},{"location":"doc/#filegetexceldatafilepath-filename-sheetindex-conversiontype","text":"It returns the excel data based on the conversion type which is passed Kind : static method of file Param Type Description filePath string File path is required fileName string File Name is required [sheetIndex] number sheetIndex is required [conversionType] string Value for this are [json, csv, txt] Example const myTableContent = await util . file . getExcelData ( \"/Users/path/myWork\" , \"myTable.xlx\" );","title":"file.getExcelData(filePath, fileName, [sheetIndex], [conversionType])"},{"location":"doc/#filegettextdatafilepath","text":"Returns the content of a .txt file. Kind : static method of file Param Type Description filePath string Path to the file. Example const txtData = await util . file . getTextData ( path . resolve ( __dirname , \"./testFiles/test3.txt\" )); const isDateIncluded = txtData . includes ( \"26.6.2023\" ); common . assertion . expectEqual ( isDateIncluded , true );","title":"file.getTextData(filePath)"},{"location":"doc/#fileexpecttextdatatocontainfilepath","text":"Reads the specified .txt file and asserts if it includes a specific string. Kind : static method of file Param Type Description filePath string Path to the file. Example await util . file . expectTextDataToContain ( \"/Users/path/myWork\" , \"supplierList.txt\" );","title":"file.expectTextDataToContain(filePath)"},{"location":"doc/#filegetxmldatafilepath","text":"Returns the converted JSON object based on the passed XML file. Kind : static method of file Param Type Description filePath string Path to the file. Example const xmlData = await util . file . getXmlData ( path . resolve ( __dirname , \"./testFiles/test2.xml\" ));","title":"file.getXmlData(filePath)"},{"location":"doc/#filegetattributevaluesfromjsonobject","text":"Traverses the passed JSON object and returns the value/s of the passed attribute if found. Else returns empty Array. Kind : static method of file Param Type Description object object The JSON Object to search through. Example const attribute = util . file . getAttributeValuesFromJson ( xmlData , \"CtrlSum\" );","title":"file.getAttributeValuesFromJson(object)"},{"location":"doc/#filefindfilepathrecursivelydirectory-filename","text":"Returns the absolute path of the file with the given filename. Searches Recursively for the file within the given directory. Kind : static method of file Param Type Description directory string The name of the directory. fileName string The name of the file. Example await util . file . findFilePathRecursively ( \"/Users\" , \"test.xls\" );","title":"file.findFilePathRecursively(directory, fileName)"},{"location":"doc/#filegetfilenamesbyextensionsdirpath-fileextensions","text":"Returns the filename/s of the given directory filtered by the given extensions. Kind : static method of file Param Type Description dirPath string The path to the directory. fileExtensions string | Array.<string> The file extension as string or multiple as string array. Example const fileName = await util . file . getFileNamesByExtensions ( \"regression/downloads\" , \"xml\" ); const fileNames = await util . file . getFileNamesByExtensions ( \"regression/downloads\" , \"[\" xml \", \" txt \"]\" );","title":"file.getFileNamesByExtensions(dirPath, fileExtensions)"},{"location":"doc/#utilformatter","text":"Kind : static class of util .formatter .sliceStringAt(input, slicePoint, length) \u21d2 String .sliceStringAfter(input, slicePoint, length) \u21d2 String .trimString(input) .extractNumberFromString(input, [index]) \u21d2 String .stringifyJSON(object) \u21d2 String .addRemoveLeadingZeros(number, length) \u21d2 String .formatDate(date, format, [locale]) \u21d2 String","title":"util.formatter"},{"location":"doc/#formatterslicestringatinput-slicepoint-length-string","text":"Slices the given string beginning at a specific substring. Kind : static method of formatter Returns : String - The sliced string. Param Type Description input String The input string to slice. slicePoint String The substring at which the input string is being sliced. length number The required length of the returning string (starting at the index of the passed slice point). Example const sliced = util . formatter . sliceStringAt ( \"prefixNR12345postfix\" , \"NR\" , 7 ); // returns \"NR12345\"","title":"formatter.sliceStringAt(input, slicePoint, length) \u21d2 String"},{"location":"doc/#formatterslicestringafterinput-slicepoint-length-string","text":"Slices the given string after a specific substring. Kind : static method of formatter Returns : String - The sliced string. Param Type Description input String The input string to slice. slicePoint String The substring after which the input string is being sliced. length number The required length of the returning string (starting at the index after the passed slice point). Example const sliced = util . formatter . sliceStringAfter ( \"prefixNR12345postfix\" , \"NR\" , 5 ); // returns \"12345\"","title":"formatter.sliceStringAfter(input, slicePoint, length) \u21d2 String"},{"location":"doc/#formattertrimstringinput","text":"Removes whitespace from both sides of the given string. Kind : static method of formatter Param Type Description input String The input string to trim. Example const trimmed = util . formatter . trimString ( \" value \" ); // returns \"value\"","title":"formatter.trimString(input)"},{"location":"doc/#formatterextractnumberfromstringinput-index-string","text":"Extracts all numbers from a string. Kind : static method of formatter Returns : String - The extracted number. Param Type Default Description input String The input string to extract the number. [index] number 0 If there are multiple numbers in the string you can pass an index to return a specific number. Example const extracted = util . formatter . extractNumberFromString ( \"prefixNR12345postfix\" ); // returns \"12345\" Example const extracted = util . formatter . extractNumberFromString ( \"first12345 someText second 20 abc\" , 1 ); // returns \"20\"","title":"formatter.extractNumberFromString(input, [index]) \u21d2 String"},{"location":"doc/#formatterstringifyjsonobject-string","text":"Converts a JSON object to string. Kind : static method of formatter Returns : String - The converted JSON object. Param Type Description object Object The JSON to be converted. Example console . log ( `Printing the current selector: ${ util . formatter . stringifyJSON ( selector ) } ` );","title":"formatter.stringifyJSON(object) \u21d2 String"},{"location":"doc/#formatteraddremoveleadingzerosnumber-length-string","text":"Adds or removes leading zeros to the passed number to format it to the required length. Kind : static method of formatter Returns : String - The formatted number. Param Type Description number String The number to be formatted. length Number The required length of the number. Example const itemNumber = util . formatter . addRemoveLeadingZeros ( 10 , 5 );","title":"formatter.addRemoveLeadingZeros(number, length) \u21d2 String"},{"location":"doc/#formatterformatdatedate-format-locale-string","text":"formats date. Kind : static method of formatter Returns : String - The formatted date as string. Param Type Default Description date Date The date object to be formatted. format String The expected format (\"mm/dd/yyyy\", \"dd.mm.yyyy\", \"dd/mm/yyyy\", \"yyyymmdd\", \"yyyy/mm/dd\", \"mmm dd, yyyy\", \"mmm d, yyyy\", \"datetime\", \"object\"). [locale] String \"en-US\" The locale format of the date. E.g. \"en-US\", \"de-DE\", etc. Example const date = new Date ( 2020 , 0 , 17 ); const formattedDate = util . formatter . formatDate ( date , \"mm/dd/yyyy\" ); // returns \"01/17/2020\" Example const date = new Date ( 2022 , 3 , 12 ); const formattedDate = util . formatter . formatDate ( date , \"mmm dd, yyyy\" ); // returns \"Apr 03, 2022\"","title":"formatter.formatDate(date, format, [locale]) \u21d2 String"},{"location":"doc/#utilfunction","text":"Kind : static class of util .function .retry(fct, args, [retries], [interval], [scope]) .executeOptional(fct, args)","title":"util.function"},{"location":"doc/#functionretryfct-args-retries-interval-scope","text":"Retries the passed function n times with a specific interval until it executed successfully. Kind : static method of function Param Type Default Description fct function The function to retry. args Array An array of the arguments passed to the function. [retries] Integer 3 The number of retries. Can be set in config for all functions under \"params\" - \"stepsRetries\". [interval] Integer 5000 The interval of the retries (ms). Can be set in config for all functions under \"params\" - \"stepRetriesIntervals\". [scope] Object The function scope. Defaults is the global object. Example await util . function . retry ( ui5 . userInteraction . fill , [ selector , value ], 4 , 10000 ); Example await util . function . retry ( async () => { await ui5 . userInteraction . fill ( selector , \"ABC\" ); }, [], 2 , 30000 );","title":"function.retry(fct, args, [retries], [interval], [scope])"},{"location":"doc/#functionexecuteoptionalfct-args","text":"Executes the given function optionally. If it fails, a promise will be returned anyway. Kind : static method of function Param Type Description fct function The function to execute. args Array An array of the arguments passed to the function. Example await util . function . executeOptional ( ui5 . userInteraction . fill , [ selector , value ]); Example await util . function . executeOptional ( async () => { await ui5 . userInteraction . fill ( selector , \"ABC\" ); }, []);","title":"function.executeOptional(fct, args)"},{"location":"doc/#utilsystem","text":"Kind : static class of util","title":"util.system"},{"location":"doc/#systemgetos-string","text":"Returns the current operating system. Kind : static method of system Returns : String - AIX | Android | MacOS | FreeBSD | Linux | OpenBSD | Windows | SunOS Example const os = await util . system . getOS ();","title":"system.getOS() \u21d2 String"},{"location":"doc/#ui5","text":"Global namespace for UI5 modules. Kind : global constant ui5 .assertion .expectAttributeToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectAttributeToContain(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectTextToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectValueToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectValueToBeDefined(selector, [index], [timeout]) .expectToBeNotEnabled(selector, [index], [timeout], [loadPropertyTimeout]) .expectToBeEnabled(selector, [index], [timeout], [loadPropertyTimeout]) .expectValidationError(selector, [index], [timeout], [loadPropertyTimeout]) .expectValidationSuccess(selector, [index], [timeout], [loadPropertyTimeout]) .expectBindingPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectBindingContextPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectToBeVisible(selector, [index], [timeout], [loadPropertyTimeout]) .expectToBeVisibleInViewport(selector, [index], [timeout], [loadPropertyTimeout]) .expectToBeNotVisible(selector, [index], [timeout]) .expectMessageToastTextToBe(text, [timeout]) .confirmationDialog .clickButton(text, [timeout]) .clickOk([timeout]) .clickCancel([timeout]) .clickYes([timeout]) .clickNo([timeout]) .clickCreate([timeout]) .clickDelete([timeout]) .clickRevokeApproval([timeout]) .control .execute(callbackFunction, selectorOrElement, args) .focus(selector, [index], [timeout]) .getProperty(selectorOrElement, propertyName) .getAggregationProperty(selectorOrElement, propertyName) .getAssociationProperty(selectorOrElement, propertyName) .getBindingContextPathProperty(selectorOrElement) .getPropertyBinding(selectorOrElement, propertyName) \u21d2 Array .date .pick(selector, date, [index]) .pickRange(selector, range, [index]) .fillRange(selector, range, [index]) .element .waitForAll(selector, [timeout]) .getAllDisplayed(selector, [timeout]) \u21d2 Array.<Object> .getDisplayed(selector, [index], [timeout]) \u21d2 Object .getByText(selector, value, [index], [timeout]) \u21d2 Object .getByChild(elementSelector, childSelector, [index], [timeout]) \u21d2 Object .getByParent(elementSelector, parentSelector, [index], [timeout]) \u21d2 Object .getId(selector, [index], [timeout]) \u21d2 String .getPropertyValue(selector, property, [index], [timeout]) \u21d2 any .getValue(selector, [index], [timeout]) \u21d2 String .getBindingValue(selector, bindingContext, [index], [timeout]) \u21d2 String .isVisible(selector, [index], [timeout]) \u21d2 Boolean .highlight(selector, [duration], [color]) .errorDialog .expectToBeVisible() .clickClose() .footerBar .clickButton(text, [timeout]) .clickApply([timeout]) .clickSave([timeout]) .clickCreate([timeout]) .clickCancel([timeout]) .clickCheck([timeout]) .clickOrder([timeout]) .clickPost([timeout]) .clickAdd([timeout]) .mockserver .waitForUi5ApplicationLoad(interval) .interactWithMockServer(mockServerPath, fnCallback, oParams) .attachFunctionBefore(method, mockServerPath, fnBeforeCallback, oParams) .attachFunctionAfter(method, mockServerPath, fnAfterCallback, oParams) .addNewRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation) .removeRequest(method, mockServerPath, urlPathRegex) .addOrOverrideRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation) .startMockServer(mockServerPath) .initMockServer(mockServerPath, mockServerOptions) .initApplication(mockServerPath) .stopMockServer(mockServerPath) .loadMockDataFile(filePath, isText) \u21d2 String .getEntitySetData(mockServerPath, entitySetName) \u21d2 Array .setEntitySetData(mockServerPath, entitySetName, entries) .navigation .navigateToApplication(intent, [preventPopups], [verify], [refresh]) .navigateToApplicationAndRetry(intent, [preventPopups], [verify], [retries], [interval]) .navigateToSystemAndApplication(system, intent, [closePopups], [verify]) .navigateToSystemAndApplicationAndRetry(system, intent, [closePopups], [verify], [retries], [interval]) .navigateToApplicationWithQueryParams(intent, queryParams, [preventPopups], [verify]) .navigateToApplicationWithQueryParamsAndRetry(intent, queryParams, [preventPopups], [verify], [retries], [interval]) .closePopups([timeout]) .expectUnsupportedNavigationPopup(navigationTarget) .navigationBar .clickBack([timeout]) .clickSapLogo([timeout]) .clickUserIcon([timeout]) .expectPageTitle(compareValue) .expectShellHeader([timeout]) .qunit .executeTests(path) .session .login(username, [password], [verify], [timeout]) .loginFiori(username, [password], [verify]) .loginSapCloud(username, [password], [verify]) .loginCustom(username, [password], usernameFieldSelector, passwordFieldSelector, logonButtonSelector, [verify]) .loginCustomViaConfig(username, [password], [verify]) .logout([verify]) .switchUser(username, [password], [authenticator], [wait]) .expectLogoutText() .table .sortColumnAscending(columnName, [tableSelector]) .sortColumnDescending(columnName, [tableSelector]) .clickSettingsButton([tableSelector]) .userInteraction .click(selector, [index], [timeout]) .clickAndRetry(selector, [index], [timeout], [retries], [interval]) .doubleClick(selector, [index], [timeout]) .rightClick(selector, [index], [timeout]) .clickTab(selector, [index], [timeout]) .clickListItem(selector, [index], [timeout]) .check(selector, [index], [timeout]) .uncheck(selector, [index], [timeout]) .fill(selector, value, [index], [timeout]) .fillAndRetry(selector, value, [index], [timeout], [retries], [interval]) .clear(selector, [index], [timeout]) .clearAndRetry(selector, [index], [timeout], [retries], [interval]) .clearAndFill(selector, value, [index], [timeout]) .clearAndFillAndRetry(selector, value, [index], [timeout], [retries], [interval], [verify]) .clearSmartFieldInput(selector, [index], [timeout]) .clearAndFillSmartFieldInput(selector, value, [index], [timeout]) .clearAndFillSmartFieldInputAndRetry(selector, value, [index], [timeout], [retries], [interval]) .selectBox(selector, value, [index]) .selectComboBox(selector, value, [index]) .selectMultiComboBox(selector, values, [index]) .clickSelectArrow(selector, [index]) .clickSelectArrowAndRetry(selector, [index], [retries], [interval]) .selectFromTab(selector, value, [index], [timeout]) .mouseOverElement(selector, [index], [timeout]) .scrollToElement(selector, [index], [alignment], [timeout]) .selectAll([selector], [index], [timeout]) .openF4Help(selector, [index], [timeout], useF4Key) .searchFor(selector, [index], [timeout], useEnter) .resetSearch(selector, [index], [timeout])","title":"ui5"},{"location":"doc/#ui5assertion","text":"Kind : static class of ui5 .assertion .expectAttributeToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectAttributeToContain(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectTextToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectValueToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectValueToBeDefined(selector, [index], [timeout]) .expectToBeNotEnabled(selector, [index], [timeout], [loadPropertyTimeout]) .expectToBeEnabled(selector, [index], [timeout], [loadPropertyTimeout]) .expectValidationError(selector, [index], [timeout], [loadPropertyTimeout]) .expectValidationSuccess(selector, [index], [timeout], [loadPropertyTimeout]) .expectBindingPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectBindingContextPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout]) .expectToBeVisible(selector, [index], [timeout], [loadPropertyTimeout]) .expectToBeVisibleInViewport(selector, [index], [timeout], [loadPropertyTimeout]) .expectToBeNotVisible(selector, [index], [timeout]) .expectMessageToastTextToBe(text, [timeout])","title":"ui5.assertion"},{"location":"doc/#assertionexpectattributetobeselector-attribute-comparevalue-index-timeout-loadpropertytimeout","text":"Expects the passed elements attribute to be the compare value. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. attribute String The attribute to be compared. compareValue String | Boolean | Number | Object The compare value. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectAttributeToBe ( selector , \"text\" , \"Hello\" );","title":"assertion.expectAttributeToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])"},{"location":"doc/#assertionexpectattributetocontainselector-attribute-comparevalue-index-timeout-loadpropertytimeout","text":"Expects the passed elements attribute to contain the compare value. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. attribute String The attribute to be compared. compareValue String The compare value. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectAttributeToContain ( selector , \"text\" , \"abc\" );","title":"assertion.expectAttributeToContain(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])"},{"location":"doc/#assertionexpecttexttobeselector-comparevalue-index-timeout-loadpropertytimeout","text":"Expects the passed elements text attribute to be the compare value. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. compareValue String The compare value. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectTextToBe ( selector , \"Hello\" );","title":"assertion.expectTextToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout])"},{"location":"doc/#assertionexpectvaluetobeselector-comparevalue-index-timeout-loadpropertytimeout","text":"Expects the passed elements value attribute to be the compare value. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. compareValue String | Number The compare value. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectValueToBe ( selector , \"123\" );","title":"assertion.expectValueToBe(selector, compareValue, [index], [timeout], [loadPropertyTimeout])"},{"location":"doc/#assertionexpectvaluetobedefinedselector-index-timeout","text":"Expects the passed elements value to be defined. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . assertion . expectValueToBeDefined ( selector );","title":"assertion.expectValueToBeDefined(selector, [index], [timeout])"},{"location":"doc/#assertionexpecttobenotenabledselector-index-timeout-loadpropertytimeout","text":"Expects that the element is enabled to the user. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectToBeNotEnabled ( selector );","title":"assertion.expectToBeNotEnabled(selector, [index], [timeout], [loadPropertyTimeout])"},{"location":"doc/#assertionexpecttobeenabledselector-index-timeout-loadpropertytimeout","text":"Expects that the element is enabled to the user. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectToBeEnabled ( selector );","title":"assertion.expectToBeEnabled(selector, [index], [timeout], [loadPropertyTimeout])"},{"location":"doc/#assertionexpectvalidationerrorselector-index-timeout-loadpropertytimeout","text":"Expects the \"valueState\" of the element to be \"Error\". Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectValidationError ( selector );","title":"assertion.expectValidationError(selector, [index], [timeout], [loadPropertyTimeout])"},{"location":"doc/#assertionexpectvalidationsuccessselector-index-timeout-loadpropertytimeout","text":"Expects the valueState of the element to be \"None\". Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectValidationSuccess ( selector );","title":"assertion.expectValidationSuccess(selector, [index], [timeout], [loadPropertyTimeout])"},{"location":"doc/#assertionexpectbindingpathtobeselector-attribute-comparevalue-index-timeout-loadpropertytimeout","text":"Expects the passed elements attribute binding-path to contain the compare value Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. attribute String The attribute to be compared. compareValue String | Array.<String> The compare value(s). [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectBindingPathToBe ( selector , \"text\" , \"Hello\" );","title":"assertion.expectBindingPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])"},{"location":"doc/#assertionexpectbindingcontextpathtobeselector-attribute-comparevalue-index-timeout-loadpropertytimeout","text":"Expects the passed elements binding-context-path to be the compare value. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. attribute String The attribute to be compared. compareValue String The compare value. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectBindingContextPathToBe ( selector , \"text\" , \"Hello\" );","title":"assertion.expectBindingContextPathToBe(selector, attribute, compareValue, [index], [timeout], [loadPropertyTimeout])"},{"location":"doc/#assertionexpecttobevisibleselector-index-timeout-loadpropertytimeout","text":"Expects that the element is visible to the user. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectToBeVisible ( selector );","title":"assertion.expectToBeVisible(selector, [index], [timeout], [loadPropertyTimeout])"},{"location":"doc/#assertionexpecttobevisibleinviewportselector-index-timeout-loadpropertytimeout","text":"Expects that the element is visible in the viewport. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [loadPropertyTimeout] Number 10000 The timeout to wait for a specific property to have the given compare value. Example await ui5 . assertion . expectToBeVisibleInViewport ( selector );","title":"assertion.expectToBeVisibleInViewport(selector, [index], [timeout], [loadPropertyTimeout])"},{"location":"doc/#assertionexpecttobenotvisibleselector-index-timeout","text":"Expects that the element is not visible to the user. Kind : static method of assertion Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Recommendation is to lower the timeout since the element is not expected to show up. Example await ui5 . assertion . expectToBeNotVisible ( selector , 0 , 5000 );","title":"assertion.expectToBeNotVisible(selector, [index], [timeout])"},{"location":"doc/#assertionexpectmessagetoasttexttobetext-timeout","text":"Expects the message toast with the passed text. Kind : static method of assertion Param Type Default Description text String The expected text. [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . assertion . expectMessageToastTextToBe ( text );","title":"assertion.expectMessageToastTextToBe(text, [timeout])"},{"location":"doc/#ui5confirmationdialog","text":"Kind : static class of ui5 .confirmationDialog .clickButton(text, [timeout]) .clickOk([timeout]) .clickCancel([timeout]) .clickYes([timeout]) .clickNo([timeout]) .clickCreate([timeout]) .clickDelete([timeout]) .clickRevokeApproval([timeout])","title":"ui5.confirmationDialog"},{"location":"doc/#confirmationdialogclickbuttontext-timeout","text":"Clicks the button with the given text at the confirmation dialog. Kind : static method of confirmationDialog Param Type Default Description text String The text of the button. [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . confirmationDialog . clickButton ( \"Ok\" );","title":"confirmationDialog.clickButton(text, [timeout])"},{"location":"doc/#confirmationdialogclickoktimeout","text":"Clicks the \"OK\" button at the confirmation dialog. Kind : static method of confirmationDialog Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . confirmationDialog . clickOk ();","title":"confirmationDialog.clickOk([timeout])"},{"location":"doc/#confirmationdialogclickcanceltimeout","text":"Clicks the \"Cancel\" button at the confirmation dialog. Kind : static method of confirmationDialog Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . confirmationDialog . clickCancel ();","title":"confirmationDialog.clickCancel([timeout])"},{"location":"doc/#confirmationdialogclickyestimeout","text":"Clicks the \"Yes\" button at the confirmation dialog. Kind : static method of confirmationDialog Param Type Description [timeout] Number The timeout to wait (default value: 30 sec). Example await ui5 . confirmationDialog . clickYes ();","title":"confirmationDialog.clickYes([timeout])"},{"location":"doc/#confirmationdialogclicknotimeout","text":"Clicks the \"Yes\" button at the confirmation dialog. Kind : static method of confirmationDialog Param Type Description [timeout] Number The timeout to wait (default value: 30 sec). Example await ui5 . confirmationDialog . clickNo ();","title":"confirmationDialog.clickNo([timeout])"},{"location":"doc/#confirmationdialogclickcreatetimeout","text":"Clicks the create button in the confirmation dialog Kind : static method of confirmationDialog Param Type Description [timeout] Number The timeout to wait (default value: 30 sec). Example await ui5 . confirmationDialog . clickCreate ();","title":"confirmationDialog.clickCreate([timeout])"},{"location":"doc/#confirmationdialogclickdeletetimeout","text":"Clicks the \"Delete\" button at the confirmation dialog. Kind : static method of confirmationDialog Param Type Description [timeout] Number The timeout to wait (default value: 30 sec). Example await ui5 . confirmationDialog . clickDelete ();","title":"confirmationDialog.clickDelete([timeout])"},{"location":"doc/#confirmationdialogclickrevokeapprovaltimeout","text":"Clicks the \"Revoke Approval\" button at the confirmation dialog. Kind : static method of confirmationDialog Param Type Description [timeout] Number The timeout to wait (default value: 30 sec). Example await ui5 . confirmationDialog . clickRevokeApproval ();","title":"confirmationDialog.clickRevokeApproval([timeout])"},{"location":"doc/#ui5control","text":"Kind : static class of ui5 .control .execute(callbackFunction, selectorOrElement, args) .focus(selector, [index], [timeout]) .getProperty(selectorOrElement, propertyName) .getAggregationProperty(selectorOrElement, propertyName) .getAssociationProperty(selectorOrElement, propertyName) .getBindingContextPathProperty(selectorOrElement) .getPropertyBinding(selectorOrElement, propertyName) \u21d2 Array","title":"ui5.control"},{"location":"doc/#controlexecutecallbackfunction-selectororelement-args","text":"Executes a native UI5 action as callback function in the browser on the given UI5 control. Kind : static method of control Param Type Description callbackFunction function The client script function to be used with the control instance. Caution: The first and last parameter is reserved for the mockserver instance and the promise resolve function - done. selectorOrElement Element | Ui5Selector | Ui5SelectorWithOptions The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed). args Object An object containing the arguments to pass to the callback function. Example const selector = { \"elementProperties\" : { \"metadata\" : \"sap.m.StandardListItem\" , \"id\" : \"*categoryList-7\" }}; const args = { \"property\" : \"text\" }; const title = await ui5 . control . execute ( function ( control , args , done ) { done ( control . getProperty ( args . property )); }, selector , args );","title":"control.execute(callbackFunction, selectorOrElement, args)"},{"location":"doc/#controlfocusselector-index-timeout","text":"Focuses on the element with the given selector to get it into view. If focus is not possible scrollToElement is used. Kind : static method of control Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . control . focus ( selector ); Example await ui5 . control . focus ( selector , 0 , 5000 );","title":"control.focus(selector, [index], [timeout])"},{"location":"doc/#controlgetpropertyselectororelement-propertyname","text":"Gets the UI5 control property of the given element. Kind : static method of control Param Type Description selectorOrElement Element | Ui5Selector | Ui5SelectorWithOptions The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed) propertyName String The property name of the control to retrieve the value from. Example const selector = { \"elementProperties\" : { \"metadata\" : \"sap.m.StandardListItem\" , \"mProperties\" : { \"title\" : [{ \"path\" : \"CategoryName\" }] }}; const elem = await ui5 . element . getDisplayed ( selector ); const propertyName = \"title\" ; const val = await ui5 . control . getProperty ( elem , propertyName );","title":"control.getProperty(selectorOrElement, propertyName)"},{"location":"doc/#controlgetaggregationpropertyselectororelement-propertyname","text":"Gets the UI5 control aggregation property of the given element. Kind : static method of control Param Type Description selectorOrElement Element | Ui5Selector | Ui5SelectorWithOptions The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed) propertyName String The aggregation property name of the control to retrieve the value from. Example const selector = { \"elementProperties\" : { \"metadata\" : \"sap.m.StandardListItem\" , \"mProperties\" : { \"items\" : [{ \"path\" : \"/Categories\" }] }}; const elem = await ui5 . element . getDisplayed ( selector ); const propertyName = \"tooltip\" ; const val = await ui5 . control . getAggregationProperty ( elem , propertyName );","title":"control.getAggregationProperty(selectorOrElement, propertyName)"},{"location":"doc/#controlgetassociationpropertyselectororelement-propertyname","text":"Get UI control property Kind : static method of control Param Type Description selectorOrElement Element | Ui5Selector | Ui5SelectorWithOptions The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed) propertyName String The association property name of the control to retrieve the value from. Example const selector = { \"elementProperties\" : { \"metadata\" : \"sap.m.MultiComboBox\" , \"mProperties\" : {}}; const elem = await ui5 . element . getDisplayed ( selector ); const propertyName = \"selectedItems\" ; const propertyValue = await ui5 . control . getAssociationProperty ( elem , propertyName );","title":"control.getAssociationProperty(selectorOrElement, propertyName)"},{"location":"doc/#controlgetbindingcontextpathpropertyselectororelement","text":"Get UI control binding context path Kind : static method of control Param Type Description selectorOrElement Element | Ui5Selector | Ui5SelectorWithOptions The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed) Example const selector = { \"elementProperties\" : { \"metadata\" : \"sap.m.StandardListItem\" , \"mProperties\" : { \"title\" : [{ \"path\" : \"CategoryName\" }] }}; const elem = await ui5 . element . getDisplayed ( selector ); const context = await ui5 . control . getBindingContextPathProperty ( elem );","title":"control.getBindingContextPathProperty(selectorOrElement)"},{"location":"doc/#controlgetpropertybindingselectororelement-propertyname-array","text":"Get UI control property Kind : static method of control Returns : Array - Array of bindings for the specific property Param Type Description selectorOrElement Element | Ui5Selector | Ui5SelectorWithOptions The selector object, selector with options (selector, index, timeout) or the dom element (retrieved from ui5.element.getDisplayed) propertyName String The property name to retrieve from the control binding Example const selector = { \"elementProperties\" : { \"metadata\" : \"sap.m.StandardListItem\" , \"mProperties\" : { \"title\" : [{ \"path\" : \"CategoryName\" }] }}; const elem = await ui5 . element . getDisplayed ( selector ); const propertyName = \"title\" ; const binding = await ui5 . control . getPropertyBinding ( elem , propertyName );","title":"control.getPropertyBinding(selectorOrElement, propertyName) \u21d2 Array"},{"location":"doc/#ui5date","text":"Kind : static class of ui5 .date .pick(selector, date, [index]) .pickRange(selector, range, [index]) .fillRange(selector, range, [index])","title":"ui5.date"},{"location":"doc/#datepickselector-date-index","text":"Picks the passed date using the \"DatePicker\" with the given selector. Kind : static method of date Param Type Default Description selector Selector The selector describing the element. date Date The date object. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). Example const today = await common . date . calculate ( \"today\" ); await ui5 . date . pick ( selector , date );","title":"date.pick(selector, date, [index])"},{"location":"doc/#datepickrangeselector-range-index","text":"Picks the passed date range using the \"DatePicker\" with the given selector. Note that this will only work within the current month! Kind : static method of date Param Type Default Description selector Selector The selector describing the element. range Array.<Object> The array of date objects containing start- and end date. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). Example const start = await common . date . calculate ( \"2020, 9, 20\" ); const end = await common . date . calculate ( \"2021, 1, 3\" ); const range = [ start , end ]; await ui5 . date . pickRange ( selector , range );","title":"date.pickRange(selector, range, [index])"},{"location":"doc/#datefillrangeselector-range-index","text":"Enters the passed date range to the date input with the given selector by providing the start- and end date. Kind : static method of date Param Type Default Description selector Selector The selector describing the element. range Array.<Object> The array of date objects containing start- and end date. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). Example const start = await common . date . calculate ( \"2020, 9, 20\" , \"dd.mm.yyyy\" ); const end = await common . date . calculate ( \"2021, 1, 3\" , \"dd.mm.yyyy\" ); const range = [ start , end ]; await ui5 . date . fillRange ( selector , range );","title":"date.fillRange(selector, range, [index])"},{"location":"doc/#ui5element","text":"Kind : static class of ui5 .element .waitForAll(selector, [timeout]) .getAllDisplayed(selector, [timeout]) \u21d2 Array.<Object> .getDisplayed(selector, [index], [timeout]) \u21d2 Object .getByText(selector, value, [index], [timeout]) \u21d2 Object .getByChild(elementSelector, childSelector, [index], [timeout]) \u21d2 Object .getByParent(elementSelector, parentSelector, [index], [timeout]) \u21d2 Object .getId(selector, [index], [timeout]) \u21d2 String .getPropertyValue(selector, property, [index], [timeout]) \u21d2 any .getValue(selector, [index], [timeout]) \u21d2 String .getBindingValue(selector, bindingContext, [index], [timeout]) \u21d2 String .isVisible(selector, [index], [timeout]) \u21d2 Boolean .highlight(selector, [duration], [color])","title":"ui5.element"},{"location":"doc/#elementwaitforallselector-timeout","text":"Waits for all elements matching the given selector. Kind : static method of element Param Type Default Description selector Object The selector describing the elements. [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . element . waitForAll ( selector );","title":"element.waitForAll(selector, [timeout])"},{"location":"doc/#elementgetalldisplayedselector-timeout-arrayobject","text":"Returns the visible elements with the given selector. Kind : static method of element Returns : Array.<Object> - - The found elements. Param Type Default Description selector Object The selector describing the elements. [timeout] Number 30000 The timeout to wait (ms). Example const elem = await ui5 . element . getAllDisplayed ( selector );","title":"element.getAllDisplayed(selector, [timeout]) \u21d2 Array.&lt;Object&gt;"},{"location":"doc/#elementgetdisplayedselector-index-timeout-object","text":"Returns the visible element. Kind : static method of element Returns : Object - The found element. Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const elem = await ui5 . element . getDisplayed ( selector );","title":"element.getDisplayed(selector, [index], [timeout]) \u21d2 Object"},{"location":"doc/#elementgetbytextselector-value-index-timeout-object","text":"Returns the element with the given selector and text value. Kind : static method of element Returns : Object - The found element. Param Type Default Description selector Object The selector describing the element. value String The text value of the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const elem = await ui5 . element . getByText ( selector , \"Home\" );","title":"element.getByText(selector, value, [index], [timeout]) \u21d2 Object"},{"location":"doc/#elementgetbychildelementselector-childselector-index-timeout-object","text":"Gets an element by its selector and child selector. Can be used as unique combination between element and child properties when multiple elements have the same properties. Note: For nested selectors, all properties except of the \"elementProperties\" are being ignored. Kind : static method of element Returns : Object - The found element. Param Type Default Description elementSelector String The selector describing the requested element. childSelector String The selector describing a child element of the requested element. [index] Number 0 The index of the element (in case the combination applies to more than one element). [timeout] Number 30000 The timeout to wait (ms). Example const elementSelector = { \"elementProperties\" : {...} }; const childSelector = { \"elementProperties\" : {...} }; const elem = await ui5 . element . getByChild ( elementSelector , childSelector );","title":"element.getByChild(elementSelector, childSelector, [index], [timeout]) \u21d2 Object"},{"location":"doc/#elementgetbyparentelementselector-parentselector-index-timeout-object","text":"Gets an element by its selector and parent selector. Can be used as unique combination between element and parent properties when multiple elements have the same properties. Note: For nested selectors, all properties except of the \"elementProperties\" are being ignored. Kind : static method of element Returns : Object - The found element. Param Type Default Description elementSelector String The selector describing the requested element. parentSelector String The selector describing the parent element of the requested element. [index] Number 0 The index of the element (in case the combination applies to more than one element). [timeout] Number 30000 The timeout to wait (ms). Example const elementSelector = { \"elementProperties\" : {...} }; const parentSelector = { \"elementProperties\" : {...} }; const elem = await ui5 . element . getByParent ( elementSelector , parentSelector );","title":"element.getByParent(elementSelector, parentSelector, [index], [timeout]) \u21d2 Object"},{"location":"doc/#elementgetidselector-index-timeout-string","text":"Returns the id of the element with the given selector. Kind : static method of element Returns : String - The id of the element. Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const elemId = await ui5 . element . getId ( selector );","title":"element.getId(selector, [index], [timeout]) \u21d2 String"},{"location":"doc/#elementgetpropertyvalueselector-property-index-timeout-any","text":"Returns the UI5 property value of the passed element. Kind : static method of element Returns : any - The property value of the element. Param Type Default Description selector Object The selector describing the element. property String The property of the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const elemValue = await ui5 . element . getPropertyValue ( selector , \"text\" );","title":"element.getPropertyValue(selector, property, [index], [timeout]) \u21d2 any"},{"location":"doc/#elementgetvalueselector-index-timeout-string","text":"Returns the inner value of the passed element. Kind : static method of element Returns : String - The value of the element. Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const elemValue = await ui5 . element . getValue ( selector );","title":"element.getValue(selector, [index], [timeout]) \u21d2 String"},{"location":"doc/#elementgetbindingvalueselector-bindingcontext-index-timeout-string","text":"Returns the value of the given binding property for a specific element. Kind : static method of element Returns : String - The binding property value. Param Type Default Description selector Object The selector describing the element. bindingContext String The binding property to retrieve. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const elemBindingValue = await ui5 . element . getBindingValue ( selector , \"InvoiceGrossAmount\" );","title":"element.getBindingValue(selector, bindingContext, [index], [timeout]) \u21d2 String"},{"location":"doc/#elementisvisibleselector-index-timeout-boolean","text":"Determines if the element is visible. Kind : static method of element Returns : Boolean - The bool value 'true' or 'false' if the element is visible or not. Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const isVisible = await ui5 . element . isVisible ( selector );","title":"element.isVisible(selector, [index], [timeout]) \u21d2 Boolean"},{"location":"doc/#elementhighlightselector-duration-color","text":"Highlights the element with the given selector. Kind : static method of element Param Type Default Description selector Object The selector describing the element. [duration] Number 2000 The duration of the highlighting (ms). [color] String \"red\" The color of the highlighting (CSS color). Example await ui5 . element . highlight ( selector , 3000 , \"green\" );","title":"element.highlight(selector, [duration], [color])"},{"location":"doc/#ui5errordialog","text":"Kind : static class of ui5 .errorDialog .expectToBeVisible() .clickClose()","title":"ui5.errorDialog"},{"location":"doc/#errordialogexpecttobevisible","text":"Expects that the error dialog is visible on the page. Kind : static method of errorDialog Example await ui5 . errorDialog . expectToBeVisible ();","title":"errorDialog.expectToBeVisible()"},{"location":"doc/#errordialogclickclose","text":"Clicks the 'Close' button at the error dialog. Kind : static method of errorDialog Example await ui5 . errorDialog . clickClose ();","title":"errorDialog.clickClose()"},{"location":"doc/#ui5footerbar","text":"Kind : static class of ui5 .footerBar .clickButton(text, [timeout]) .clickApply([timeout]) .clickSave([timeout]) .clickCreate([timeout]) .clickCancel([timeout]) .clickCheck([timeout]) .clickOrder([timeout]) .clickPost([timeout]) .clickAdd([timeout])","title":"ui5.footerBar"},{"location":"doc/#footerbarclickbuttontext-timeout","text":"Clicks the button with the given text at the footer bar. Kind : static method of footerBar Param Type Default Description text String The text of the button. [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickButton ( \"Ok\" );","title":"footerBar.clickButton(text, [timeout])"},{"location":"doc/#footerbarclickapplytimeout","text":"Clicks the 'Apply' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickApply ();","title":"footerBar.clickApply([timeout])"},{"location":"doc/#footerbarclicksavetimeout","text":"Clicks the 'Save' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickSave ();","title":"footerBar.clickSave([timeout])"},{"location":"doc/#footerbarclickcreatetimeout","text":"Clicks the 'Create' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickCreate ();","title":"footerBar.clickCreate([timeout])"},{"location":"doc/#footerbarclickcanceltimeout","text":"Clicks the 'Cancel' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickCancel ();","title":"footerBar.clickCancel([timeout])"},{"location":"doc/#footerbarclickchecktimeout","text":"Clicks the 'Check' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickCheck ();","title":"footerBar.clickCheck([timeout])"},{"location":"doc/#footerbarclickordertimeout","text":"Clicks the 'Order' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickOrder ();","title":"footerBar.clickOrder([timeout])"},{"location":"doc/#footerbarclickposttimeout","text":"Clicks the 'Post' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickPost ();","title":"footerBar.clickPost([timeout])"},{"location":"doc/#footerbarclickaddtimeout","text":"Clicks the 'Add' button at the footer toolbar. Kind : static method of footerBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . footerBar . clickAdd ();","title":"footerBar.clickAdd([timeout])"},{"location":"doc/#ui5mockserver","text":"Kind : static class of ui5 .mockserver .waitForUi5ApplicationLoad(interval) .interactWithMockServer(mockServerPath, fnCallback, oParams) .attachFunctionBefore(method, mockServerPath, fnBeforeCallback, oParams) .attachFunctionAfter(method, mockServerPath, fnAfterCallback, oParams) .addNewRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation) .removeRequest(method, mockServerPath, urlPathRegex) .addOrOverrideRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation) .startMockServer(mockServerPath) .initMockServer(mockServerPath, mockServerOptions) .initApplication(mockServerPath) .stopMockServer(mockServerPath) .loadMockDataFile(filePath, isText) \u21d2 String .getEntitySetData(mockServerPath, entitySetName) \u21d2 Array .setEntitySetData(mockServerPath, entitySetName, entries)","title":"ui5.mockserver"},{"location":"doc/#mockserverwaitforui5applicationloadinterval","text":"Waits for the UI5 framework to load and makes sure XHR request finished und busy indicators are not visible anymore. Kind : static method of mockserver Param Type Description interval Integer The intervals to use when waiting UI5 to load. Example await ui5 . mockserver . waitForUi5ApplicationLoad ( 100 );","title":"mockserver.waitForUi5ApplicationLoad(interval)"},{"location":"doc/#mockserverinteractwithmockservermockserverpath-fncallback-oparams","text":"Execute client script function to enable interaction with mockserver instance [you can write code in ui5 app context] Kind : static method of mockserver Param Type Description mockServerPath String The full path to your mockserver instance fnCallback String | Object The client script function that you can use to interact with your mockserver instance. [Caution] The first and last parameter is reserved (1st param is the mockserver instance and last parameter the promise resolve function - done) oParams String Additional parameters you would like to inject in your client script function Example await ui5 . mockserver . interactWithMockServer ( \"path/to/project/localService/main/mockserver\" , fnCallback , oParams );","title":"mockserver.interactWithMockServer(mockServerPath, fnCallback, oParams)"},{"location":"doc/#mockserverattachfunctionbeforemethod-mockserverpath-fnbeforecallback-oparams","text":"Attaches a callback function in mockserver attachBefore event to be executed Kind : static method of mockserver Param Type Description method String The attachAfter http method [GET or POST]. mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method so the mockserver instance can be consumed]. fnBeforeCallback String | Object The callback function to be used in the native attachBefore method as described (https://sapui5.hana.ondemand.com/#/api/sap.ui.core.ui5.mockserver%23methods/Summary) oParams Object Additional parameters you would like to inject in your client script function Example await ui5 . mockserver . attachFunctionBefore ( \"GET\" , \"path/to/project/localService/main/mockserver\" , fnBeforeCallback , oParams );","title":"mockserver.attachFunctionBefore(method, mockServerPath, fnBeforeCallback, oParams)"},{"location":"doc/#mockserverattachfunctionaftermethod-mockserverpath-fnaftercallback-oparams","text":"Attaches a callback function in mockserver attachAfter event to be executed Kind : static method of mockserver Param Type Description method String The attachAfter http method [GET or POST]. mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method so the mockserver instance can be consumed]. fnAfterCallback String | Object The callback function to be used in the native attachAfter method as described (https://sapui5.hana.ondemand.com/#/api/sap.ui.core.ui5.mockserver%23methods/Summary) oParams Object Additional parameters you would like to inject in your client script function Example await ui5 . mockserver . attachFunctionAfter ( \"GET\" , \"path/to/project/localService/main/mockserver\" , fnAfterCallback );","title":"mockserver.attachFunctionAfter(method, mockServerPath, fnAfterCallback, oParams)"},{"location":"doc/#mockserveraddnewrequestmethod-mockserverpath-urlpathregex-responsejsonpath-returncode-istext-responsemessages-responselocation","text":"Adds new mock request Kind : static method of mockserver Param Type Description method String The http method [GET,POST..]. mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. urlPathRegex String The url path regex to filter the requests responseJsonPath String The json object or the path to your json file to be used as response [use relative path from the html page started]. returnCode Integer The http response code to simulate for this mock request. isText Boolean If true then content type is text/plain otherwise application/json. responseMessages String Mocks the gw sap-message response messages [Don't forget to stringify your json before: JSON.stringify(msg)] responseLocation String Mocks the location response messages header Example await ui5 . mockserver . addNewRequest ( \"GET\" , \"path/to/project/localService/main/mockserver\" , \"*.Headers.*\" , \"path/to/project/localService/main/mockdata/test.json\" , 200 , true , JSON . stringify ( msg ));","title":"mockserver.addNewRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation)"},{"location":"doc/#mockserverremoverequestmethod-mockserverpath-urlpathregex","text":"Removes request mock [Doesn't work currently - Mockserver bug] Kind : static method of mockserver Param Type Description method String The http method [GET,POST..]. mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. urlPathRegex String The url path regex to filter the requests Example await ui5 . mockserver . removeRequest ( \"GET\" , \"path/to/project/localService/main/mockserver\" , \"*.Headers.*\" );","title":"mockserver.removeRequest(method, mockServerPath, urlPathRegex)"},{"location":"doc/#mockserveraddoroverriderequestmethod-mockserverpath-urlpathregex-responsejsonpath-returncode-istext-responsemessages-responselocation","text":"Adds new or overrides an existing mock request Kind : static method of mockserver Param Type Description method String The http method [GET,POST..]. mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. urlPathRegex String The url path regex to filter the requests responseJsonPath String The json object or the path to your json file to be used as response [use relative path from the html page started]. returnCode Integer The http response code to simulate for this mock request. isText Boolean If true then content type is text/plain otherwise application/json. responseMessages String Mocks the gw sap-message response messages [Don't forget to stringify your json before: JSON.stringify(msg)] responseLocation String Mocks the location response messages header Example await ui5 . mockserver . addOrOverrideRequest ( \"GET\" , \"path/to/project/localService/main/mockserver\" , \"*.Headers.*\" , \"path/to/project/localService/main/mockdata/test.json\" , 200 , true , JSON . stringify ( msg ));","title":"mockserver.addOrOverrideRequest(method, mockServerPath, urlPathRegex, responseJsonPath, returnCode, isText, responseMessages, responseLocation)"},{"location":"doc/#mockserverstartmockservermockserverpath","text":"(Re-)Starts mock server instance Kind : static method of mockserver Param Type Description mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. Example await ui5 . mockserver . startMockServer ( \"path/to/project/localService/main/mockserver\" );","title":"mockserver.startMockServer(mockServerPath)"},{"location":"doc/#mockserverinitmockservermockserverpath-mockserveroptions","text":"Initializes the provide mockserver instance on the fly Kind : static method of mockserver Param Type Description mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. mockServerOptions String The mock server options Example await ui5 . mockserver . initMockServer ( \"path/to/project/localService/main/mockserver\" , mockServerOptions );","title":"mockserver.initMockServer(mockServerPath, mockServerOptions)"},{"location":"doc/#mockserverinitapplicationmockserverpath","text":"Initializes the application [Used in the beggining of script, once the mockserver is fully initialized and request mocking is done] Kind : static method of mockserver Param Type Description mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. Example await ui5 . mockserver . initApplication ( \"path/to/project/localService/main/mockserver\" );","title":"mockserver.initApplication(mockServerPath)"},{"location":"doc/#mockserverstopmockservermockserverpath","text":"Stops the mockserver instance Kind : static method of mockserver Param Type Description mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. Example await ui5 . mockserver . stopMockServer ( \"path/to/project/localService/main/mockserver\" );","title":"mockserver.stopMockServer(mockServerPath)"},{"location":"doc/#mockserverloadmockdatafilefilepath-istext-string","text":"Loads a mock data file Kind : static method of mockserver Returns : String - The json object Param Type Description filePath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. isText Boolean If true then content type is text/plain otherwise application/json. Example await ui5 . mockserver . loadMockDataFile ( \"path/to/project/mockData/myData.json\" , true );","title":"mockserver.loadMockDataFile(filePath, isText) \u21d2 String"},{"location":"doc/#mockservergetentitysetdatamockserverpath-entitysetname-array","text":"Retrieves entity data Kind : static method of mockserver Returns : Array - An array of json objects Param Type Description mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. entitySetName String The entity set name Example await ui5 . mockserver . getEntitySetData ( \"path/to/project/localService/main/mockserver\" , \"Headers\" );","title":"mockserver.getEntitySetData(mockServerPath, entitySetName) \u21d2 Array"},{"location":"doc/#mockserversetentitysetdatamockserverpath-entitysetname-entries","text":"Override entity data entries Kind : static method of mockserver Param Type Description mockServerPath String The full path to your mockserver file [make sure you implemented getMockServer method in this file to return the mockserver instance]. entitySetName String The entity name entries String The json object to be used as data to be inserted [use relative path from the html page started]. Example await ui5 . mockserver . setEntitySetData ( \"path/to/project/localService/main/mockserver\" , \"Headers\" , entries );","title":"mockserver.setEntitySetData(mockServerPath, entitySetName, entries)"},{"location":"doc/#ui5navigation","text":"Kind : static class of ui5 .navigation .navigateToApplication(intent, [preventPopups], [verify], [refresh]) .navigateToApplicationAndRetry(intent, [preventPopups], [verify], [retries], [interval]) .navigateToSystemAndApplication(system, intent, [closePopups], [verify]) .navigateToSystemAndApplicationAndRetry(system, intent, [closePopups], [verify], [retries], [interval]) .navigateToApplicationWithQueryParams(intent, queryParams, [preventPopups], [verify]) .navigateToApplicationWithQueryParamsAndRetry(intent, queryParams, [preventPopups], [verify], [retries], [interval]) .closePopups([timeout]) .expectUnsupportedNavigationPopup(navigationTarget)","title":"ui5.navigation"},{"location":"doc/#navigationnavigatetoapplicationintent-preventpopups-verify-refresh","text":"Navigates to the application via the passed intent. The intent will be added to the baseUrl maintained in the config. Kind : static method of navigation Param Type Default Description intent String The intent of the application. [preventPopups] Boolean false Specifies if random popup appearance should be prevented. [verify] Boolean false Specifies if the url should be asserted after the navigation. [refresh] Boolean false Refresh the page after navigation. Example await ui5 . navigation . navigateToApplication ( \"PurchaseOrder-manage\" );","title":"navigation.navigateToApplication(intent, [preventPopups], [verify], [refresh])"},{"location":"doc/#navigationnavigatetoapplicationandretryintent-preventpopups-verify-retries-interval","text":"Navigates to the application via the passed intent, and retries in case it fails. Kind : static method of navigation Param Type Default Description intent String The intent of the app. [preventPopups] Boolean false Specifies if random popup appearance should be prevented. Might not work for specific popups. [verify] Boolean false Specifies if the url should be asserted after the navigation. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await ui5 . navigation . navigateToApplicationAndRetry ( \"PurchaseOrder-manage\" );","title":"navigation.navigateToApplicationAndRetry(intent, [preventPopups], [verify], [retries], [interval])"},{"location":"doc/#navigationnavigatetosystemandapplicationsystem-intent-closepopups-verify","text":"Navigates within the passed system to the application via the passed intent. Kind : static method of navigation Param Type Default Description system String The system url. intent String The intent of the application. [closePopups] Boolean false Specifies if random popups should be closed after the navigation. [verify] Boolean false Specifies if the url should be asserted after the navigation. Example await ui5 . navigation . navigateToSystemAndApplication ( \"yourFioriLaunchpad.domain\" , \"PurchaseOrder-manage\" );","title":"navigation.navigateToSystemAndApplication(system, intent, [closePopups], [verify])"},{"location":"doc/#navigationnavigatetosystemandapplicationandretrysystem-intent-closepopups-verify-retries-interval","text":"Navigates within the passed system to the application via the passed intent, and retries in case it fails. Kind : static method of navigation Param Type Default Description system String The system url. intent String The intent of the application. [closePopups] Boolean false Specifies if random popups should be closed after the navigation. [verify] Boolean false Specifies if the url should be asserted after the navigation. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await ui5 . navigation . navigateToSystemAndApplicationAndRetry ( \"yourFioriLaunchpad.domain\" , \"PurchaseOrder-manage\" );","title":"navigation.navigateToSystemAndApplicationAndRetry(system, intent, [closePopups], [verify], [retries], [interval])"},{"location":"doc/#navigationnavigatetoapplicationwithqueryparamsintent-queryparams-preventpopups-verify","text":"Navigates to the application with the passed queryParams via the passed intent. Kind : static method of navigation Param Type Default Description intent String The intent of the app. queryParams String [OPTIONAL] Add url query params. [preventPopups] Boolean false Specifies if random popup appearance should be prevented. [verify] Boolean false Specifies if the url should be asserted after the navigation. Example const intent = \"PurchaseOrder-manage\" const queryParams = \"?sap-language=EN&responderOn=true\" ; await ui5 . navigation . navigateToApplicationWithQueryParams ( intent , queryParams );","title":"navigation.navigateToApplicationWithQueryParams(intent, queryParams, [preventPopups], [verify])"},{"location":"doc/#navigationnavigatetoapplicationwithqueryparamsandretryintent-queryparams-preventpopups-verify-retries-interval","text":"Navigates to the application via the passed intent, and retries in case it fails. Kind : static method of navigation Param Type Default Description intent String The intent of the app. queryParams String [OPTIONAL] Add url query params. [preventPopups] Boolean false Specifies if random popup appearance should be prevented. [verify] Boolean false Specifies if the url should be asserted after the navigation. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example const intent = \"PurchaseOrder-manage\" const queryParams = \"?sap-language=EN&responderOn=true\" ; await ui5 . navigation . navigateToApplicationWithQueryParamsAndRetry ( intent , queryParams );","title":"navigation.navigateToApplicationWithQueryParamsAndRetry(intent, queryParams, [preventPopups], [verify], [retries], [interval])"},{"location":"doc/#navigationclosepopupstimeout","text":"Closes all popups if they occur after navigating to a specific page. Kind : static method of navigation Param Type Default Description [timeout] Number 30000 The timeout to wait. Example await ui5 . navigation . closePopups ();","title":"navigation.closePopups([timeout])"},{"location":"doc/#navigationexpectunsupportednavigationpopupnavigationtarget","text":"Expects navigation to an app that is not supported. This can be the case for Mocked tests when the application does not exist or when the app is not included in a role. Kind : static method of navigation Param Type Description navigationTarget String The selector describing the element. Example await ui5 . navigation . expectUnsupportedNavigationPopup ( \"#SupplierInvoice-display?FiscalYear=1234&SupplierInvoice=1234567890\" );","title":"navigation.expectUnsupportedNavigationPopup(navigationTarget)"},{"location":"doc/#ui5navigationbar","text":"Kind : static class of ui5 .navigationBar .clickBack([timeout]) .clickSapLogo([timeout]) .clickUserIcon([timeout]) .expectPageTitle(compareValue) .expectShellHeader([timeout])","title":"ui5.navigationBar"},{"location":"doc/#navigationbarclickbacktimeout","text":"Navigates one layer back. Kind : static method of navigationBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . navigationBar . clickBack ();","title":"navigationBar.clickBack([timeout])"},{"location":"doc/#navigationbarclicksaplogotimeout","text":"Clicks at the SAP Logo. Kind : static method of navigationBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . navigationBar . clickSapLogo ();","title":"navigationBar.clickSapLogo([timeout])"},{"location":"doc/#navigationbarclickusericontimeout","text":"Clicks at the Account Icon. Kind : static method of navigationBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . navigationBar . clickUserIcon ();","title":"navigationBar.clickUserIcon([timeout])"},{"location":"doc/#navigationbarexpectpagetitlecomparevalue","text":"Expects the page title of the current page to be the compare value. Kind : static method of navigationBar Param Type Description compareValue String The compare value. Example await ui5 . navigationBar . expectPageTitle ( \"Home\" );","title":"navigationBar.expectPageTitle(compareValue)"},{"location":"doc/#navigationbarexpectshellheadertimeout","text":"Expects the shell header to be visible Kind : static method of navigationBar Param Type Default Description [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . navigationBar . expectShellHeader ();","title":"navigationBar.expectShellHeader([timeout])"},{"location":"doc/#ui5qunit","text":"Kind : static class of ui5","title":"ui5.qunit"},{"location":"doc/#qunitexecutetestspath","text":"Executes QUnit & OPA5 tests. Qmate acts like a runner. Kind : static method of qunit Param Type Description path String Relative path to the QUnit/OPA5 html file. Example await ui5 . qunit . executeTests ( \"path/to/qunit.html\" );","title":"qunit.executeTests(path)"},{"location":"doc/#ui5session","text":"Kind : static class of ui5 .session .login(username, [password], [verify], [timeout]) .loginFiori(username, [password], [verify]) .loginSapCloud(username, [password], [verify]) .loginCustom(username, [password], usernameFieldSelector, passwordFieldSelector, logonButtonSelector, [verify]) .loginCustomViaConfig(username, [password], [verify]) .logout([verify]) .switchUser(username, [password], [authenticator], [wait]) .expectLogoutText()","title":"ui5.session"},{"location":"doc/#sessionloginusername-password-verify-timeout","text":"Login with specific username and password. This function works for both fiori and sap-cloud login. Kind : static method of session Param Type Default Description username String The username. [password] String The password. [verify] Boolean false Specifies if the function will check the shell header after logging in. [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . session . login ( \"PURCHASER\" ); Example await ui5 . session . login ( \"JOHN_DOE\" , \"abc123!\" , true );","title":"session.login(username, [password], [verify], [timeout])"},{"location":"doc/#sessionloginfioriusername-password-verify","text":"Login with fioriForm and specific username and password. Kind : static method of session Param Type Default Description username String The username. [password] String The password. [verify] Boolean false Specifies if the function will check the shell header after logging in. Example await ui5 . session . loginFiori ( \"john\" , \"abc123!\" );","title":"session.loginFiori(username, [password], [verify])"},{"location":"doc/#sessionloginsapcloudusername-password-verify","text":"Login with sapCloud form and specific username and password. Kind : static method of session Param Type Default Description username String The username. [password] String The password. [verify] Boolean false Specifies if the function will check the shell header after logging in. Example await ui5 . session . loginSapCloud ( \"john\" , \"abc123!\" );","title":"session.loginSapCloud(username, [password], [verify])"},{"location":"doc/#sessionlogincustomusername-password-usernamefieldselector-passwordfieldselector-logonbuttonselector-verify","text":"Login with custom form and specific username and password. Kind : static method of session Param Type Default Description username String The username. [password] String \"super-duper-sensitive-pw\" The password. usernameFieldSelector String The CSS selector of the username field. passwordFieldSelector String The CSS selector of the password field. logonButtonSelector String The CSS selector of the login button. [verify] Boolean false Specifies if the function will check the shell header after logging in. Example await ui5 . session . loginCustom ( \"JOHN_DOE\" , \"abc123!\" , \"#username\" , # password , \"#logon\" );","title":"session.loginCustom(username, [password], usernameFieldSelector, passwordFieldSelector, logonButtonSelector, [verify])"},{"location":"doc/#sessionlogincustomviaconfigusername-password-verify","text":"Login with specific username and password. The selectors will be taken from the config. Kind : static method of session Param Type Default Description username String The username. Can be specified in spec or config. If specified in both credentials will be taken from config. [password] String The password. Can be specified in spec or config. If specified in both credentials will be taken from config. [verify] Boolean false Specifies if the function will check the shell header after logging in. Example // config - SAMPLE 1 auth : { formType : 'plain' , usernameFieldSelector : \"#USERNAME_BLOCK input\" , passwordFieldSelector : \"#PASSWORD_BLOCK input\" , logonButtonSelector : \"#LOGIN_LINK\" }, // spec await ui5 . session . loginCustomViaConfig ( \"JOHN_DOE\" , \"abc123!\" ); // config - SAMPLE 2 auth : { formType : \"plain\" , username : \"PURCH_EXT\" , password : \"super-duper-sensitive-pw\" , usernameFieldSelector : \"#USERNAME_BLOCK input\" , passwordFieldSelector : \"#PASSWORD_BLOCK input\" , logonButtonSelector : \"#LOGIN_LINK\" }, // spec await ui5 . session . loginCustomViaConfig ();","title":"session.loginCustomViaConfig(username, [password], [verify])"},{"location":"doc/#sessionlogoutverify","text":"Logs the user out. Kind : static method of session Param Type Default Description [verify] Boolean \"true\" Specifies if the function will check the logout text after logging out. Set this to false if the system does not show the text after logging out. Example await ui5 . session . logout ();","title":"session.logout([verify])"},{"location":"doc/#sessionswitchuserusername-password-authenticator-wait","text":"switches the user according to the passed username and password. Kind : static method of session Param Type Default Description username String The username. [password] String The password. [authenticator] Object The login form type. Set to null to use generic login. [wait] Number 10000 The waiting time between logout and login (ms). Example await ui5 . session . switchUser ( \"PURCHASER\" ); Example const authenticator = ui5 . authenticators . fioriForm ; await ui5 . session . switchUser ( \"PURCHASER\" , \"super-duper-sensitive-pw\" , authenticator , 30000 );","title":"session.switchUser(username, [password], [authenticator], [wait])"},{"location":"doc/#sessionexpectlogouttext","text":"Expects the logout text after logout to be \"You have been logged off. This is essential for chaining scripts, so that no static browser sleep in the spec itself is required anymore. Kind : static method of session Example await ui5 . session . expectLogoutText ();","title":"session.expectLogoutText()"},{"location":"doc/#ui5table","text":"Kind : static class of ui5 .table .sortColumnAscending(columnName, [tableSelector]) .sortColumnDescending(columnName, [tableSelector]) .clickSettingsButton([tableSelector])","title":"ui5.table"},{"location":"doc/#tablesortcolumnascendingcolumnname-tableselector","text":"Sorts the given column \"Ascending\". Kind : static method of table Param Type Description columnName String The name of the column to sort. [tableSelector] Object The selector describing the table element (in case there are more then one). Example await ui5 . table . sortColumnAscending ( \"Supplier\" ); Example const glAccountItemsTable = { \"elementProperties\" : { \"viewName\" : \"ui.s2p.mm.supplinvoice.manage.s1.view.S1\" , \"metadata\" : \"sap.m.Table\" , \"id\" : \"*idS2P.MM.MSI.TableGLAccountItems\" } }; await ui5 . table . sortColumnAscending ( \"Amount\" , glAccountItemsTable );","title":"table.sortColumnAscending(columnName, [tableSelector])"},{"location":"doc/#tablesortcolumndescendingcolumnname-tableselector","text":"Sorts the given column \"Descending\". Kind : static method of table Param Type Description columnName String The name of the column to sort. [tableSelector] Object The selector describing the table element (in case there are more then one). Example await ui5 . table . sortColumnDescending ( \"Supplier\" ); Example const glAccountItemsTable = { \"elementProperties\" : { \"viewName\" : \"ui.s2p.mm.supplinvoice.manage.s1.view.S1\" , \"metadata\" : \"sap.m.Table\" , \"id\" : \"*idS2P.MM.MSI.TableGLAccountItems\" } }; await ui5 . table . sortColumnDescending ( \"Amount\" , glAccountItemsTable );","title":"table.sortColumnDescending(columnName, [tableSelector])"},{"location":"doc/#tableclicksettingsbuttontableselector","text":"Opens the user Settings. Kind : static method of table Param Type Description [tableSelector] Object The selector describing the table element (in case there are more then one). Example await ui5 . table . clickSettingsButton (); Example const glAccountItemsTable = { \"elementProperties\" : { \"viewName\" : \"ui.s2p.mm.supplinvoice.manage.s1.view.S1\" , \"metadata\" : \"sap.m.Table\" , \"id\" : \"*idS2P.MM.MSI.TableGLAccountItems\" } }; await ui5 . table . clickSettingsButton ( glAccountItemsTable );","title":"table.clickSettingsButton([tableSelector])"},{"location":"doc/#ui5userinteraction","text":"Kind : static class of ui5 .userInteraction .click(selector, [index], [timeout]) .clickAndRetry(selector, [index], [timeout], [retries], [interval]) .doubleClick(selector, [index], [timeout]) .rightClick(selector, [index], [timeout]) .clickTab(selector, [index], [timeout]) .clickListItem(selector, [index], [timeout]) .check(selector, [index], [timeout]) .uncheck(selector, [index], [timeout]) .fill(selector, value, [index], [timeout]) .fillAndRetry(selector, value, [index], [timeout], [retries], [interval]) .clear(selector, [index], [timeout]) .clearAndRetry(selector, [index], [timeout], [retries], [interval]) .clearAndFill(selector, value, [index], [timeout]) .clearAndFillAndRetry(selector, value, [index], [timeout], [retries], [interval], [verify]) .clearSmartFieldInput(selector, [index], [timeout]) .clearAndFillSmartFieldInput(selector, value, [index], [timeout]) .clearAndFillSmartFieldInputAndRetry(selector, value, [index], [timeout], [retries], [interval]) .selectBox(selector, value, [index]) .selectComboBox(selector, value, [index]) .selectMultiComboBox(selector, values, [index]) .clickSelectArrow(selector, [index]) .clickSelectArrowAndRetry(selector, [index], [retries], [interval]) .selectFromTab(selector, value, [index], [timeout]) .mouseOverElement(selector, [index], [timeout]) .scrollToElement(selector, [index], [alignment], [timeout]) .selectAll([selector], [index], [timeout]) .openF4Help(selector, [index], [timeout], useF4Key) .searchFor(selector, [index], [timeout], useEnter) .resetSearch(selector, [index], [timeout])","title":"ui5.userInteraction"},{"location":"doc/#userinteractionclickselector-index-timeout","text":"Clicks on the element with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . click ( selector );","title":"userInteraction.click(selector, [index], [timeout])"},{"location":"doc/#userinteractionclickandretryselector-index-timeout-retries-interval","text":"Clicks on the element with the given selector and retries the action in case of a failure. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await ui5 . userInteraction . clickAndRetry ( selector );","title":"userInteraction.clickAndRetry(selector, [index], [timeout], [retries], [interval])"},{"location":"doc/#userinteractiondoubleclickselector-index-timeout","text":"Double Clicks on the passed element. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . doubleClick ( selector );","title":"userInteraction.doubleClick(selector, [index], [timeout])"},{"location":"doc/#userinteractionrightclickselector-index-timeout","text":"Right Clicks on the passed element. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example const elem = await nonUi5 . element . getById ( \"button01\" ); await ui5 . userInteraction . rightClick ( elem );","title":"userInteraction.rightClick(selector, [index], [timeout])"},{"location":"doc/#userinteractionclicktabselector-index-timeout","text":"Clicks on the tab with the given selector and checks if the tab got selected successfully. The function retries the click for maximal 3 times if the selection of the tab (blue underline) was not successful. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . clickTab ( selector );","title":"userInteraction.clickTab(selector, [index], [timeout])"},{"location":"doc/#userinteractionclicklistitemselector-index-timeout","text":"Clicks or opens the list item with the given selector (e.g. ColumnListItem, StandardListItem). In some cases the default click function is not working correctly (clicks an element within the list item). Therefore we recommend to use this function to open a specific list item. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . clickListItem ( selector );","title":"userInteraction.clickListItem(selector, [index], [timeout])"},{"location":"doc/#userinteractioncheckselector-index-timeout","text":"Checks the checkbox with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . check ( selector );","title":"userInteraction.check(selector, [index], [timeout])"},{"location":"doc/#userinteractionuncheckselector-index-timeout","text":"Unchecks the checkbox with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . uncheck ( selector );","title":"userInteraction.uncheck(selector, [index], [timeout])"},{"location":"doc/#userinteractionfillselector-value-index-timeout","text":"Fills the input field with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String | Number The value to enter. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . fill ( selector , \"My Value\" );","title":"userInteraction.fill(selector, value, [index], [timeout])"},{"location":"doc/#userinteractionfillandretryselector-value-index-timeout-retries-interval","text":"Fills the input field with the given selector and retries the action in case of a failure. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String | Number The value to enter. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await ui5 . userInteraction . fillAndRetry ( selector , \"My Value\" );","title":"userInteraction.fillAndRetry(selector, value, [index], [timeout], [retries], [interval])"},{"location":"doc/#userinteractionclearselector-index-timeout","text":"Clears the input with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . clear ( selector );","title":"userInteraction.clear(selector, [index], [timeout])"},{"location":"doc/#userinteractionclearandretryselector-index-timeout-retries-interval","text":"Clears the input with the given selector and retries the action in case of a failure Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await ui5 . userInteraction . clearAndRetry ( selector );","title":"userInteraction.clearAndRetry(selector, [index], [timeout], [retries], [interval])"},{"location":"doc/#userinteractionclearandfillselector-value-index-timeout","text":"Clears the input field with the given selector and fills the given value. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String | Number The value to enter. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . clearAndFill ( selector , \"My Value\" );","title":"userInteraction.clearAndFill(selector, value, [index], [timeout])"},{"location":"doc/#userinteractionclearandfillandretryselector-value-index-timeout-retries-interval-verify","text":"Clears the input field with the given selector and fills the given value. Retries the action in case of a failure. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String The value to enter. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. [verify] Boolean true Specifies if the filled value should be verified. Example await ui5 . userInteraction . clearAndFillAndRetry ( selector , \"My Value\" );","title":"userInteraction.clearAndFillAndRetry(selector, value, [index], [timeout], [retries], [interval], [verify])"},{"location":"doc/#userinteractionclearsmartfieldinputselector-index-timeout","text":"Clears the smart filed with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . clearSmartFieldInput ( selector );","title":"userInteraction.clearSmartFieldInput(selector, [index], [timeout])"},{"location":"doc/#userinteractionclearandfillsmartfieldinputselector-value-index-timeout","text":"Clears the smart filed with the given selector and fills the given value. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String The value to enter. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . clearAndFillSmartFieldInput ( selector , \"My Value\" );","title":"userInteraction.clearAndFillSmartFieldInput(selector, value, [index], [timeout])"},{"location":"doc/#userinteractionclearandfillsmartfieldinputandretryselector-value-index-timeout-retries-interval","text":"Clears the smart filed with the given selector and fills the given value and retries the action in case of a failure. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String The value to enter. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await ui5 . userInteraction . clearAndFillSmartFieldInputAndRetry ( selector , \"My Value\" );","title":"userInteraction.clearAndFillSmartFieldInputAndRetry(selector, value, [index], [timeout], [retries], [interval])"},{"location":"doc/#userinteractionselectboxselector-value-index","text":"Selects the passed value of the Select box. Please note that the function will only work for the default select Box. In special cases, please use the clickSelectArrow function. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String The value to select. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). Example await ui5 . userInteraction . selectBox ( selector , \"Germany\" );","title":"userInteraction.selectBox(selector, value, [index])"},{"location":"doc/#userinteractionselectcomboboxselector-value-index","text":"Selects the passed value from the ComboBox with the given selector. Please note that the function will only work for the default ComboBox. In special cases you need to use the 'clickSelectArrow' function. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String The value to select. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). Example await ui5 . userInteraction . selectComboBox ( selector , \"Germany\" );","title":"userInteraction.selectComboBox(selector, value, [index])"},{"location":"doc/#userinteractionselectmulticomboboxselector-values-index","text":"Selects the passed values of the MultiComboBox with the given selector. Please note that the function will only work for the default MultiComboBox. In special cases, please use the clickSelectArrow function. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. values Array The values to select. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). Example await ui5 . userInteraction . selectMultiComboBox ( selector , [ \"Option 1\" , \"Option 2\" ]);","title":"userInteraction.selectMultiComboBox(selector, values, [index])"},{"location":"doc/#userinteractionclickselectarrowselector-index","text":"Clicks the arrow icon at the passed selector (select box). Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). Example await ui5 . userInteraction . clickSelectArrow ( selector );","title":"userInteraction.clickSelectArrow(selector, [index])"},{"location":"doc/#userinteractionclickselectarrowandretryselector-index-retries-interval","text":"Clicks the arrow icon at the passed selector (select box), and retries in case it fails. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example await ui5 . userInteraction . clickSelectArrowAndRetry ( selector );","title":"userInteraction.clickSelectArrowAndRetry(selector, [index], [retries], [interval])"},{"location":"doc/#userinteractionselectfromtabselector-value-index-timeout","text":"Selects the passed value on the tab with the given selector and checks if the tab got selected successfully. The function retries the click for maximal 3 times if the selection of the tab (blue underline) was not successful. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. value String The value to select. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . selectFromTab ( selector );","title":"userInteraction.selectFromTab(selector, value, [index], [timeout])"},{"location":"doc/#userinteractionmouseoverelementselector-index-timeout","text":"Moves the cursor/focus to the element with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . mouseOverElement ( selector );","title":"userInteraction.mouseOverElement(selector, [index], [timeout])"},{"location":"doc/#userinteractionscrolltoelementselector-index-alignment-timeout","text":"Scrolls the element with the given selector into view. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [alignment] String | Object \"center\" The alignment option for scrolling. Can be one of: \"start\", \"center\", \"end\", \"nearest\", or an object with properties: - block: Vertical alignment (\"start\", \"center\", \"end\", \"nearest\"). - inline: Horizontal alignment (\"start\", \"center\", \"end\", \"nearest\"). [timeout] Number 30000 The timeout to wait (ms). Example // Scroll to element with center alignment. await nonUi5 . userInteraction . scrollToElement ( selector , 0 , \"center\" ); Example // Scroll to element with custom alignment. const alignment = { block : \"start\" , inline : \"center\" }; await nonUi5 . userInteraction . scrollToElement ( selector , 0 , alignment );","title":"userInteraction.scrollToElement(selector, [index], [alignment], [timeout])"},{"location":"doc/#userinteractionselectallselector-index-timeout","text":"Performs \"select all\" (ctrl + a) at the element with the given selector. Kind : static method of userInteraction Param Type Default Description [selector] Object The selector describing the element. [index] Number 0 The index of the selector, in case there are more than one elements visible at the same time. [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . selectAll ( selector );","title":"userInteraction.selectAll([selector], [index], [timeout])"},{"location":"doc/#userinteractionopenf4helpselector-index-timeout-usef4key","text":"Opens the F4-help of the element with the given selector. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). useF4Key Boolean Specifies if the help is opened by pressing the F4-key or via the button. The default value is true (triggered by pressing the F4-key). Set \"useF4Key\" to false, to trigger the search by clicking the button. Example await ui5 . userInteraction . openF4Help ( selector , 0 , 30000 , false );","title":"userInteraction.openF4Help(selector, [index], [timeout], useF4Key)"},{"location":"doc/#userinteractionsearchforselector-index-timeout-useenter","text":"Searches for the passed value and executes the search. In case that the search is already filled, it will reset the field first. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). useEnter Boolean Specifies if the search is triggered by pressing the Enter-key or via the search button. The default value is true (triggered by pressing the Enter-key). Set \"useEnter\" to false, to trigger the search by clicking the search button. Example await ui5 . userInteraction . searchFor ( selector , \"My Value\" , 0 , 30000 , false );","title":"userInteraction.searchFor(selector, [index], [timeout], useEnter)"},{"location":"doc/#userinteractionresetsearchselector-index-timeout","text":"Resets the search field. Kind : static method of userInteraction Param Type Default Description selector Object The selector describing the element. [index] Number 0 The index of the selector (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await ui5 . userInteraction . resetSearch ( selector );","title":"userInteraction.resetSearch(selector, [index], [timeout])"},{"location":"doc/#nonui5","text":"Global namespace for non UI5 modules. Kind : global constant nonUi5 .assertion .expectAttributeToBe(elem, compareValue, [attribute]) .expectAttributeToContain(elem, compareValue, [attribute]) .expectValueToBe(elem, compareValue) .expectToBeVisible(element) .expectToBeNotVisible(element, [timeout]) .element .waitForAll(selector, [timeout]) .waitToBePresent(selector, [timeout]) .waitToBeVisible(selector, [timeout]) .waitToBeClickable(selector, [timeout]) .getAllDisplayed(selector, [timeout]) \u21d2 Array.<Object> .getAll(selector, [timeout]) .getByCss(selector, [index], [timeout], [includeHidden]) \u21d2 Object .getByCssContainingText(selector, [text], [index], [timeout], [includeHidden], [strict]) \u21d2 Object .getById(id, [timeout], [includeHidden]) \u21d2 Object .getByClass(elemClass, [index], [timeout], [includeHidden]) \u21d2 Object .getByName(name, [index], [timeout], [includeHidden]) \u21d2 Object .getByXPath(xpath, [index], [timeout], [includeHidden]) \u21d2 Object .getByChild(elementSelector, childSelector, [index], [timeout], [includeHidden]) \u21d2 Object .getByParent(elementSelector, parentSelector, [index], [timeout], [includeHidden]) \u21d2 Object .isVisible(element, [strict]) \u21d2 Boolean .isPresent(elem) \u21d2 Boolean .isPresentByCss(css, [index], [timeout]) \u21d2 boolean .isPresentByXPath(xpath, [index], [timeout]) \u21d2 boolean .isSelected(elem) \u21d2 boolean .getAttributeValue(elem, [attribute]) \u21d2 String .getValue(elem) \u21d2 String .setInnerHTML(elem) \u21d2 String .highlight(elem, [duration], [color]) .navigation .navigateToApplication(relativeReference, [refresh]) .session .loginSapNetWeaver(username, password, [clickContinue], [iframeCssSelector]) .userInteraction .click(element, [timeout]) .clickAndRetry(element, [timeout], [retries], [interval]) .doubleClick(element, [timeout]) .rightClick(element, [timeout]) .check(element) .uncheck(element) .fill(element, value) .fillAndRetry(element, value, [retries], [interval]) .clear(element) .clearAndRetry(element, [retries], [interval]) .clearAndFill(element, value) .clearAndFillAndRetry(element, value, [retries], [interval], [verify]) .mouseOverElement(element, [xOffset], [yOffset]) .scrollToElement(elem, [alignment]) .dragAndDrop(element, targetElem) .moveCursorAndClick(element) .clickElementInSvg(svgElem, innerSelector)","title":"nonUi5"},{"location":"doc/#nonui5assertion","text":"Kind : static class of nonUi5 .assertion .expectAttributeToBe(elem, compareValue, [attribute]) .expectAttributeToContain(elem, compareValue, [attribute]) .expectValueToBe(elem, compareValue) .expectToBeVisible(element) .expectToBeNotVisible(element, [timeout])","title":"nonUi5.assertion"},{"location":"doc/#assertionexpectattributetobeelem-comparevalue-attribute","text":"Expects the attributes value of the passed element to be the compare value. Kind : static method of assertion Param Type Description elem Object The element. compareValue String The compare value. [attribute] String The attribute to compare. If not passed, it will compare the inner HTML content of the element. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . assertion . expectAttributeToBe ( elem , \"Save\" ); Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . assertion . expectAttributeToBe ( element , \"Save\" , \"title\" );","title":"assertion.expectAttributeToBe(elem, compareValue, [attribute])"},{"location":"doc/#assertionexpectattributetocontainelem-comparevalue-attribute","text":"Expects the attributes value of the passed element to contain the compare value. Kind : static method of assertion Param Type Description elem Object The element. compareValue String The compare value. [attribute] String The attribute to compare. If not passed, it will compare the inner HTML content of the element. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . assertion . expectAttributeToContain ( element , \"Save\" , \"title\" );","title":"assertion.expectAttributeToContain(elem, compareValue, [attribute])"},{"location":"doc/#assertionexpectvaluetobeelem-comparevalue","text":"Expects the attributes value of the passed element to be the compare value. Kind : static method of assertion Param Type Description elem Object The element. compareValue String The compare value. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . assertion . expectValueToBe ( elem , \"Save\" );","title":"assertion.expectValueToBe(elem, compareValue)"},{"location":"doc/#assertionexpecttobevisibleelement","text":"Expects that the element is visible to the user. Kind : static method of assertion Param Type Description element Object The element. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . assertion . expectToBeVisible ( elem );","title":"assertion.expectToBeVisible(element)"},{"location":"doc/#assertionexpecttobenotvisibleelement-timeout","text":"Expects that the element is not visible to the user. Kind : static method of assertion Param Type Default Description element Object The element. [timeout] Number 30000 The timeout to wait (ms). Recommendation is to lower the timeout since the element is not expected to show up. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . assertion . expectToBeNotVisible ( elem , 5000 );","title":"assertion.expectToBeNotVisible(element, [timeout])"},{"location":"doc/#nonui5element","text":"Kind : static class of nonUi5 .element .waitForAll(selector, [timeout]) .waitToBePresent(selector, [timeout]) .waitToBeVisible(selector, [timeout]) .waitToBeClickable(selector, [timeout]) .getAllDisplayed(selector, [timeout]) \u21d2 Array.<Object> .getAll(selector, [timeout]) .getByCss(selector, [index], [timeout], [includeHidden]) \u21d2 Object .getByCssContainingText(selector, [text], [index], [timeout], [includeHidden], [strict]) \u21d2 Object .getById(id, [timeout], [includeHidden]) \u21d2 Object .getByClass(elemClass, [index], [timeout], [includeHidden]) \u21d2 Object .getByName(name, [index], [timeout], [includeHidden]) \u21d2 Object .getByXPath(xpath, [index], [timeout], [includeHidden]) \u21d2 Object .getByChild(elementSelector, childSelector, [index], [timeout], [includeHidden]) \u21d2 Object .getByParent(elementSelector, parentSelector, [index], [timeout], [includeHidden]) \u21d2 Object .isVisible(element, [strict]) \u21d2 Boolean .isPresent(elem) \u21d2 Boolean .isPresentByCss(css, [index], [timeout]) \u21d2 boolean .isPresentByXPath(xpath, [index], [timeout]) \u21d2 boolean .isSelected(elem) \u21d2 boolean .getAttributeValue(elem, [attribute]) \u21d2 String .getValue(elem) \u21d2 String .setInnerHTML(elem) \u21d2 String .highlight(elem, [duration], [color])","title":"nonUi5.element"},{"location":"doc/#elementwaitforallselector-timeout_1","text":"Waits until all elements with the given selector are rendered. Will fail if no element is found. Kind : static method of element Param Type Default Description selector Object The CSS selector describing the element. [timeout] Number 30000 The timeout to wait (ms). Example await nonUi5 . element . waitForAll ( \".inputField\" );","title":"element.waitForAll(selector, [timeout])"},{"location":"doc/#elementwaittobepresentselector-timeout","text":"Waits until the element with the given selector is present. Kind : static method of element Param Type Default Description selector Object The CSS selector describing the element. [timeout] Number 30000 The timeout to wait (ms). Example await nonUi5 . element . waitToBePresent ( \".input01\" ); Example await nonUi5 . element . waitToBePresent ( \"#button12\" ); Example await nonUi5 . element . waitToBePresent ( \"p:first-child\" );","title":"element.waitToBePresent(selector, [timeout])"},{"location":"doc/#elementwaittobevisibleselector-timeout","text":"Waits until the element with the given selector is visible. Kind : static method of element Param Type Default Description selector Object The CSS selector describing the element. [timeout] Number 30000 The timeout to wait (ms). Example await nonUi5 . element . waitToBeVisible ( \".input01\" ); Example await nonUi5 . element . waitToBeVisible ( \"#button12\" ); Example await nonUi5 . element . waitToBeVisible ( \"p:first-child\" );","title":"element.waitToBeVisible(selector, [timeout])"},{"location":"doc/#elementwaittobeclickableselector-timeout","text":"Waits until the element with the given selector is clickable. Kind : static method of element Param Type Default Description selector Object The CSS selector describing the element. [timeout] Number 30000 The timeout to wait (ms). Example await nonUi5 . element . waitToBeClickable ( \".input01\" ); Example await nonUi5 . element . waitToBeClickable ( \"#button12\" ); Example await nonUi5 . element . waitToBeClickable ( \"p:first-child\" );","title":"element.waitToBeClickable(selector, [timeout])"},{"location":"doc/#elementgetalldisplayedselector-timeout-arrayobject_1","text":"Gets all visible elements with the passed selector. Kind : static method of element Returns : Array.<Object> - The array of elements. Param Type Default Description selector Object The CSS selector describing the element. [timeout] Number 30000 The timeout to wait (ms). Example await nonUi5 . element . getAllDisplayed ( \".inputField\" );","title":"element.getAllDisplayed(selector, [timeout]) \u21d2 Array.&lt;Object&gt;"},{"location":"doc/#elementgetallselector-timeout","text":"Returns all elements found by the given selector despite visible or not. Kind : static method of element Param Type Default Description selector Object The CSS selector describing the element. [timeout] Number 30000 The timeout to wait (ms). Example const hiddenElements = await nonUi5 . element . getAll ( \".sapUiInvisibleText\" ); const isPresent = await nonUi5 . element . isPresent ( hiddenElements [ 0 ]); await common . assertion . expectTrue ( isPresent );","title":"element.getAll(selector, [timeout])"},{"location":"doc/#elementgetbycssselector-index-timeout-includehidden-object","text":"Gets the element with the given CSS selector. Kind : static method of element Returns : Object - The found element. Param Type Default Description selector Object The CSS selector describing the element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if hidden elements are also considered. By default it checks only for visible ones. Example const elem = await nonUi5 . element . getByCss ( \".button01\" );","title":"element.getByCss(selector, [index], [timeout], [includeHidden]) \u21d2 Object"},{"location":"doc/#elementgetbycsscontainingtextselector-text-index-timeout-includehidden-strict-object","text":"Gets the element with the given CSS selector containing the given text value. Kind : static method of element Returns : Object - The found element. Param Type Default Description selector Object The CSS selector describing the element. [text] String \"\" The containing text value of the element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if hidden elements are also considered. By default it checks only for visible ones. [strict] Boolean false Specifies if the values match should be exact Example const elem = await nonUi5 . element . getByCssContainingText ( \".input01\" , \"Jack Jackson\" );","title":"element.getByCssContainingText(selector, [text], [index], [timeout], [includeHidden], [strict]) \u21d2 Object"},{"location":"doc/#elementgetbyidid-timeout-includehidden-object","text":"Gets the element with the given ID. Kind : static method of element Returns : Object - The found element. Param Type Default Description id String The id of the element. [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if the function will check for the elements visibility. Example const elem = await nonUi5 . element . getById ( \"button01\" );","title":"element.getById(id, [timeout], [includeHidden]) \u21d2 Object"},{"location":"doc/#elementgetbyclasselemclass-index-timeout-includehidden-object","text":"Gets the element with the given class. Kind : static method of element Returns : Object - The found element. Param Type Default Description elemClass String The class describing the element [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if hidden elements are also considered. By default it checks only for visible ones. Example const elem = await nonUi5 . element . getByClass ( \"button01\" ); const elem = await nonUi5 . element . getByClass ( \"sapMIBar sapMTB sapMTBNewFlex sapContrastPlus\" );","title":"element.getByClass(elemClass, [index], [timeout], [includeHidden]) \u21d2 Object"},{"location":"doc/#elementgetbynamename-index-timeout-includehidden-object","text":"Gets the element with the given name. Kind : static method of element Returns : Object - The found element. Param Type Default Description name String The name attribute of the element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if hidden elements are also considered. By default it checks only for visible ones. Example const elem = await nonUi5 . element . getByName ( \".button01\" );","title":"element.getByName(name, [index], [timeout], [includeHidden]) \u21d2 Object"},{"location":"doc/#elementgetbyxpathxpath-index-timeout-includehidden-object","text":"Gets the element with the given XPath. Kind : static method of element Returns : Object - The found element. Param Type Default Description xpath String The XPath describing the element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if hidden elements are also considered. By default it checks only for visible ones. Example const elem = await nonUi5 . element . getByXPath ( \"//ul/li/a\" );","title":"element.getByXPath(xpath, [index], [timeout], [includeHidden]) \u21d2 Object"},{"location":"doc/#elementgetbychildelementselector-childselector-index-timeout-includehidden-object","text":"Gets an element by its selector and child selector. Can be used when multiple elements have the same properties. Kind : static method of element Returns : Object - The found element. Param Type Default Description elementSelector String The CSS selector describing the element. childSelector String The CSS selector describing the child element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if hidden elements are also considered. By default it checks only for visible ones. Example const elem = await nonUi5 . element . getByChild ( \".form01\" , \".input01\" );","title":"element.getByChild(elementSelector, childSelector, [index], [timeout], [includeHidden]) \u21d2 Object"},{"location":"doc/#elementgetbyparentelementselector-parentselector-index-timeout-includehidden-object","text":"Gets an element by its selector and parent selector. Can be used when multiple elements have the same properties. Kind : static method of element Returns : Object - The found element. Param Type Default Description elementSelector String The CSS selector describing the element. parentSelector String The CSS selector describing the parent element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). [includeHidden] Boolean false Specifies if hidden elements are also considered. By default it checks only for visible ones. Example const elem = await nonUi5 . element . getByParent ( \".form01\" , \".input01\" );","title":"element.getByParent(elementSelector, parentSelector, [index], [timeout], [includeHidden]) \u21d2 Object"},{"location":"doc/#elementisvisibleelement-strict-boolean","text":"Returns a boolean if the element is visible to the user. Kind : static method of element Returns : Boolean - Returns true or false. Param Type Default Description element Object The element. [strict] Boolean true If strict mode is enabled it will only return \"true\" if the element is visible on the page and within the viewport. If disabled, it will be sufficient if the element is visible on the page but not inside the current viewport. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . element . isVisible ( elem );","title":"element.isVisible(element, [strict]) \u21d2 Boolean"},{"location":"doc/#elementispresentelem-boolean","text":"Returns a boolean if the element is present at the DOM or not. It might be hidden. Kind : static method of element Returns : Boolean - Returns true or false. Param Type Description elem Object The element. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . element . isPresent ( elem );","title":"element.isPresent(elem) \u21d2 Boolean"},{"location":"doc/#elementispresentbycsscss-index-timeout-boolean","text":"Returns a boolean if the element is present at the DOM or not. Kind : static method of element Returns : boolean - Returns true or false. Param Type Default Description css String The CSS selector describing the element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await nonUi5 . element . isPresentByCss ( \".button01\" );","title":"element.isPresentByCss(css, [index], [timeout]) \u21d2 boolean"},{"location":"doc/#elementispresentbyxpathxpath-index-timeout-boolean","text":"Returns a boolean if the element is present at the DOM or not. Kind : static method of element Param Type Default Description xpath String The XPath describing the element. [index] Number 0 The index of the element (in case there are more than one elements visible at the same time). [timeout] Number 30000 The timeout to wait (ms). Example await nonUi5 . element . isPresentByXPath ( \".//*[text()='Create']\" );","title":"element.isPresentByXPath(xpath, [index], [timeout]) \u21d2 boolean"},{"location":"doc/#elementisselectedelem-boolean","text":"Returns a boolean if the element (e.g. checkbox) is selected. Kind : static method of element Param Type Description elem Object The element. Example const elem = await nonUi5 . element . getById ( \"elem01\" ); const isSelected = await nonUi5 . element . isSelected ( elem );","title":"element.isSelected(elem) \u21d2 boolean"},{"location":"doc/#elementgetattributevalueelem-attribute-string","text":"Returns the attributes value of the passed element. Kind : static method of element Returns : String - The attributes value of the element. Param Type Description elem Object The element. [attribute] String The attribute of the element. Leave empty to return the inner HTML value of the element. Example const elem = await nonUi5 . element . getById ( \"elem01\" ); const text = await nonUi5 . element . getAttributeValue ( elem , \"text\" ); Example const elem = await nonUi5 . element . getById ( \"elem02\" ); const innerHTML = await nonUi5 . element . getAttributeValue ( elem );","title":"element.getAttributeValue(elem, [attribute]) \u21d2 String"},{"location":"doc/#elementgetvalueelem-string","text":"Returns the value of the passed element. Kind : static method of element Returns : String - The value of the element. Param Type Description elem Object The element. Example const elem = await nonUi5 . element . getById ( \"elem02\" ); const innerHTML = await nonUi5 . element . getValue ( elem );","title":"element.getValue(elem) \u21d2 String"},{"location":"doc/#elementsetinnerhtmlelem-string","text":"Sets the innerHTML value of the given element. CAUTION: Only use this if filling the value in the normal way is not working and if it is unavoidable. Keep in mind, that a user is not able to perform such actions. Kind : static method of element Returns : String - The value to set. Param Type Description elem Object The element. Example const elem = await nonUi5 . element . getById ( \"text-editor\" ); await nonUi5 . element . setInnerHTML ( elem , \"Hello World!\" );","title":"element.setInnerHTML(elem) \u21d2 String"},{"location":"doc/#elementhighlightelem-duration-color","text":"Highlights the passed element. Kind : static method of element Param Type Default Description elem Object The element. [duration] Integer 2000 The duration of the highlighting (ms). [color] String \"red\" The color of the highlighting (CSS value). Example const elem = await nonUi5 . element . getById ( \"text01\" ); await nonUi5 . element . highlight ( elem ); Example const elem = await nonUi5 . element . getById ( \"text01\" ); await nonUi5 . element . highlight ( elem , 3000 , \"green\" );","title":"element.highlight(elem, [duration], [color])"},{"location":"doc/#nonui5navigation","text":"Kind : static class of nonUi5","title":"nonUi5.navigation"},{"location":"doc/#navigationnavigatetoapplicationrelativereference-refresh","text":"Navigates to the application via the passed relative reference. The path will be added to the baseUrl maintained in the config. Kind : static method of navigation Param Type Default Description relativeReference String Relative reference of an application (path, query and fragment) [refresh] Boolean true Refresh the page after navigation. Example await nonUi5 . navigation . navigateToApplication ( \"categories\" );","title":"navigation.navigateToApplication(relativeReference, [refresh])"},{"location":"doc/#nonui5session","text":"Kind : static class of nonUi5","title":"nonUi5.session"},{"location":"doc/#sessionloginsapnetweaverusername-password-clickcontinue-iframecssselector","text":"Login for SAP NetWebGUI form and specific username and password. Kind : static method of session Param Type Default Description username String The username. password String The password. [clickContinue] Boolean true Specifies if the function will press continue if applicable. [iframeCssSelector] String \"iframe\" The specific iframe selector the login form is contained. Example await nonUi5 . session . loginSapNetWeaver ( \"john\" , \"abc123!\" );","title":"session.loginSapNetWeaver(username, password, [clickContinue], [iframeCssSelector])"},{"location":"doc/#nonui5userinteraction","text":"Kind : static class of nonUi5 .userInteraction .click(element, [timeout]) .clickAndRetry(element, [timeout], [retries], [interval]) .doubleClick(element, [timeout]) .rightClick(element, [timeout]) .check(element) .uncheck(element) .fill(element, value) .fillAndRetry(element, value, [retries], [interval]) .clear(element) .clearAndRetry(element, [retries], [interval]) .clearAndFill(element, value) .clearAndFillAndRetry(element, value, [retries], [interval], [verify]) .mouseOverElement(element, [xOffset], [yOffset]) .scrollToElement(elem, [alignment]) .dragAndDrop(element, targetElem) .moveCursorAndClick(element) .clickElementInSvg(svgElem, innerSelector)","title":"nonUi5.userInteraction"},{"location":"doc/#userinteractionclickelement-timeout","text":"Clicks on the passed element. Kind : static method of userInteraction Param Type Default Description element Object The element. [timeout] Number 30000 The timeout to wait (ms). Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . userInteraction . click ( elem );","title":"userInteraction.click(element, [timeout])"},{"location":"doc/#userinteractionclickandretryelement-timeout-retries-interval","text":"Clicks on the passed element, retries in case it fails. Kind : static method of userInteraction Param Type Default Description element Object The element. [timeout] Number 30000 The timeout to wait (ms). [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . userInteraction . clickAndRetry ( elem );","title":"userInteraction.clickAndRetry(element, [timeout], [retries], [interval])"},{"location":"doc/#userinteractiondoubleclickelement-timeout","text":"Double Clicks on the passed element. Kind : static method of userInteraction Param Type Default Description element Object The element. [timeout] Number 30000 The timeout to wait (ms). Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . userInteraction . doubleClick ( elem );","title":"userInteraction.doubleClick(element, [timeout])"},{"location":"doc/#userinteractionrightclickelement-timeout","text":"Right Clicks on the passed element. Kind : static method of userInteraction Param Type Default Description element Object The element. [timeout] Number 30000 The timeout to wait (ms). Example const elem = await nonUi5 . element . getById ( \"button01\" ); await nonUi5 . userInteraction . rightClick ( elem );","title":"userInteraction.rightClick(element, [timeout])"},{"location":"doc/#userinteractioncheckelement","text":"Checks the given checkbox. Kind : static method of userInteraction Param Type Description element Object The element. Example await nonUi5 . userInteraction . check ( selector );","title":"userInteraction.check(element)"},{"location":"doc/#userinteractionuncheckelement","text":"Unchecks the given checkbox. Kind : static method of userInteraction Param Type Description element Object The element. Example await nonUi5 . userInteraction . uncheck ( selector );","title":"userInteraction.uncheck(element)"},{"location":"doc/#userinteractionfillelement-value","text":"Fills the given value into the passed input. Kind : static method of userInteraction Param Type Description element Object The element. value String | Number The value to enter. Example const elem = await nonUi5 . element . getById ( \"input01\" ); await nonUi5 . userInteraction . fill ( elem , \"Service 01\" );","title":"userInteraction.fill(element, value)"},{"location":"doc/#userinteractionfillandretryelement-value-retries-interval","text":"Fills the given value into the passed input, retries in case of a failure. Kind : static method of userInteraction Param Type Default Description element Object The element. value String | Number The value to enter. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example const elem = await nonUi5 . element . getById ( \"input01\" ); await nonUi5 . userInteraction . fillAndRetry ( elem , \"Service 01\" );","title":"userInteraction.fillAndRetry(element, value, [retries], [interval])"},{"location":"doc/#userinteractionclearelement","text":"Clears the passed input element. Kind : static method of userInteraction Param Type Description element Object The element. Example const elem = await nonUi5 . element . getById ( \"input01\" ); await nonUi5 . userInteraction . clear ( elem );","title":"userInteraction.clear(element)"},{"location":"doc/#userinteractionclearandretryelement-retries-interval","text":"Clears the passed input element, retries in case of a failure. Kind : static method of userInteraction Param Type Default Description element Object The element. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. Example const elem = await nonUi5 . element . getById ( \"input01\" , 10000 ); await nonUi5 . userInteraction . clearAndRetry ( elem );","title":"userInteraction.clearAndRetry(element, [retries], [interval])"},{"location":"doc/#userinteractionclearandfillelement-value","text":"Clears and fills the passed input element. Kind : static method of userInteraction Param Type Description element Object The element. value String | Number The value to enter in. Example const elem = await nonUi5 . element . getById ( \"input01\" ); await nonUi5 . userInteraction . clearAndFill ( elem , \"Service 01\" );","title":"userInteraction.clearAndFill(element, value)"},{"location":"doc/#userinteractionclearandfillandretryelement-value-retries-interval-verify","text":"Clears and fills the passed input, retries in case it fails. Kind : static method of userInteraction Param Type Default Description element Object The element. value String | Number The value to enter in. [retries] Number 3 The number of retries, can be set in config for all functions under params stepsRetries. [interval] Number 5000 The delay between the retries (ms). Can be set in config for all functions under params.stepRetriesIntervals. [verify] Boolean true Specifies if the filled value should be verified. Example const elem = await nonUi5 . element . getById ( \"input01\" ); await nonUi5 . userInteraction . clearAndFillAndRetry ( elem , \"Service 01\" );","title":"userInteraction.clearAndFillAndRetry(element, value, [retries], [interval], [verify])"},{"location":"doc/#userinteractionmouseoverelementelement-xoffset-yoffset","text":"Moves the cursor/focus to the passed element. Kind : static method of userInteraction Param Type Description element Object The element. [xOffset] Number X offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element. [yOffset] Number Y offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element. Example const elem = await nonUi5 . element . getById ( \"dropdown42\" ); await nonUi5 . userInteraction . mouseOverElement ( elem );","title":"userInteraction.mouseOverElement(element, [xOffset], [yOffset])"},{"location":"doc/#userinteractionscrolltoelementelem-alignment","text":"Scrolls an element into view. Kind : static method of userInteraction Param Type Default Description elem Element The target element to scroll to. [alignment] String | Object \"center\" The alignment option for scrolling. Can be one of: \"start\", \"center\", \"end\", \"nearest\", or an object with properties: - block: Vertical alignment (\"start\", \"center\", \"end\", \"nearest\"). - inline: Horizontal alignment (\"start\", \"center\", \"end\", \"nearest\"). Example // Scroll to element with center alignment. const elem = await nonUi5 . userInteraction . getElementById ( \"footer01\" ); await nonUi5 . userInteraction . scrollToElement ( elem , \"center\" ); Example // Scroll to element with custom alignment. const elem = await nonUi5 . userInteraction . getElementById ( \"footer01\" ); const alignment = { block : \"start\" , inline : \"center\" }; await nonUi5 . userInteraction . scrollToElement ( elem , alignment );","title":"userInteraction.scrollToElement(elem, [alignment])"},{"location":"doc/#userinteractiondraganddropelement-targetelem","text":"Drags and drops the given element to the given target element. Kind : static method of userInteraction Param Type Description element Object The element to drag. targetElem Object The target element to drop the element. Example const elem = await nonUi5 . element . getById ( \"drag01\" ); Example const targetElem = await nonUi5 . element . getById ( \"drop02\" ); await nonUi5 . userInteraction . dragAndDrop ( elem , targetElem );","title":"userInteraction.dragAndDrop(element, targetElem)"},{"location":"doc/#userinteractionmovecursorandclickelement","text":"Moves the cursor to the target element and clicks on it. Can be used for charts. Kind : static method of userInteraction Param Type Description element Object The element to be clicked. Example const elem = await nonUi5 . element . getById ( \"chartPartToClick\" ); await nonUi5 . userInteraction . moveCursorAndClick ( elem );","title":"userInteraction.moveCursorAndClick(element)"},{"location":"doc/#userinteractionclickelementinsvgsvgelem-innerselector","text":"Clicks on an inner element within a SVG element. Kind : static method of userInteraction Param Type Description svgElem Object The SVG element. innerSelector String The CSS selector describing the inner element to be clicked. Example const svgElem = await nonUi5 . element . getByCss ( \"svg\" ); const innerSelector = \"circle:nth-child(6)\" ; await nonUi5 . userInteraction . clickElementInSvg ( svgElem , innerSelector );","title":"userInteraction.clickElementInSvg(svgElem, innerSelector)"},{"location":"doc/#service","text":"Global namespace for service modules. Kind : global constant service .odata .init(url, username, password, [loggingEnabled], [params], [authType]) \u21d2 Object .get(srv, entitySet, keys, raw) .getEntitySet(srv, entitySet, [filterString], [selectionFields], [queryParams]) \u21d2 Array .isFeatureToggleActivated(srv, featureName) .post(srv, entitySet, payload, raw) .merge(srv, entitySet, payload) .delete(srv, entitySet, options) .callFunctionImport(srv, functionImportName, options) .getOutputManagementPdfStream(outputConf, url, username, password) .readPdfFromDirectUrl(url, [username], [password], [isSaml]) .rest .init([customConfig]) \u21d2 Object .get(uri, [config]) \u21d2 Object .post(uri, payload, [config]) \u21d2 Object .delete(uri, [config]) \u21d2 Object .patch(uri, payload, [config]) \u21d2 Object .put(uri, payload, [config]) \u21d2 Object","title":"service"},{"location":"doc/#serviceodata","text":"Kind : static class of service .odata .init(url, username, password, [loggingEnabled], [params], [authType]) \u21d2 Object .get(srv, entitySet, keys, raw) .getEntitySet(srv, entitySet, [filterString], [selectionFields], [queryParams]) \u21d2 Array .isFeatureToggleActivated(srv, featureName) .post(srv, entitySet, payload, raw) .merge(srv, entitySet, payload) .delete(srv, entitySet, options) .callFunctionImport(srv, functionImportName, options) .getOutputManagementPdfStream(outputConf, url, username, password) .readPdfFromDirectUrl(url, [username], [password], [isSaml])","title":"service.odata"},{"location":"doc/#odatainiturl-username-password-loggingenabled-params-authtype-object","text":"Initializes The service to work with. XCSRF-Token will be automatically fetched and stored in the service instance. Cookies will also automatically assembled and stored in the service instance. Kind : static method of odata Returns : Object - The initialized service object. Param Type Default Description url String The base url of the service username String The username. password String The password of the username. [loggingEnabled] boolean false The boolean param to control whether user wants to see logs during build run [params] Object {} JSON object with key-value pairs of parameter names and corresponding values by default we send { \"client\": \"715\", \"documentation\": [\"heading\", \"quickinfo\"], \"language\": \"EN\" } These can be overridden by sending params as JSON object with additional params as shown in example [authType] String authentication type, in case you want to override the default SAML authentication. Set this to \"basic\", to use basic authentication for communication users for whom SAML login doesn't work. Or \"none\" for no authentication. Example const url = \"<urlToSystem>/sap/opu/odata/sap/API_PURCHASEORDER_PROCESS_SRV/\" ; const params = { \"saml2\" : \"disabled\" , \"language\" : \"de\" } srv = await service . odata . init ( url , user , password , false , params );","title":"odata.init(url, username, password, [loggingEnabled], [params], [authType]) \u21d2 Object"},{"location":"doc/#odatagetsrv-entityset-keys-raw","text":"makes a GET request. Kind : static method of odata Param Type Description srv Object Instance of the service entitySet String The entitySet you want to GET from. keys Object The required keys for the GET-request. raw Boolean Response includes all header contents. Example const url = \"<baseUrl>/sap/opu/odata/sap/API_PURCHASEORDER_PROCESS_SRV/\" ; srv = await service . odata . init ( url , user , password ); const keys = { PurchaseOrder : \"4100000000\" }; const res = await service . odata . get ( srv , \"A_PurchaseOrder\" , keys );","title":"odata.get(srv, entitySet, keys, raw)"},{"location":"doc/#odatagetentitysetsrv-entityset-filterstring-selectionfields-queryparams-array","text":"GET's the EntitySet collection. Kind : static method of odata Returns : Array - - Result set array Param Type Description srv Object Instance of the service entitySet String The entitySet you want to GET from. [filterString] String The filters to be applied on get query [selectionFields] String comma separated list of fields to be selected [queryParams] Object JSON object of key value pairs of custom query parameters. Example const url = \"<baseUrl>/sap/opu/odata/sap/API_PURCHASEORDER_PROCESS_SRV/\" ; srv = await service . odata . init ( url , user , password ); let filterString = \"Status eq '01'\" ; let res = await service . odata . getEntitySet ( srv , \"A_PurchaseOrder\" , filterString ); let select = \"CentralPurchaseContract,PurchasingProcessingStatus\" ; let res = await service . odata . getEntitySet ( srv , \"A_PurchaseOrder\" , filterString , select ); let queryParams = { \"$top\" : 5 , \"$skip\" : 10 , }; let res = await service . odata . getEntitySet ( srv , \"A_PurchaseOrder\" , filterString , select , queryParams );","title":"odata.getEntitySet(srv, entitySet, [filterString], [selectionFields], [queryParams]) \u21d2 Array"},{"location":"doc/#odataisfeaturetoggleactivatedsrv-featurename","text":"checks if a feature toggle is switched on or off Kind : static method of odata Param Type Description srv Object Instance of the service featureName String The name of the feature you want know the status of. Example const url = browser . params . systemUrl + \"/sap/opu/odata/SAP/CA_FM_FEATURE_TOGGLE_STATUS_SRV/\" ; const srv = await service . odata . init ( url , user , password ); let isFeatureActive = await service . odata . isFeatureToggleActivated ( srv , \"MM_PUR_PO_BATCHES_IN_MANAGE_PO\" );","title":"odata.isFeatureToggleActivated(srv, featureName)"},{"location":"doc/#odatapostsrv-entityset-payload-raw","text":"makes a POST request. Kind : static method of odata Param Type Description srv Object Instance of the service entitySet String The entitySet you want to POST against. payload Object The payload for the POST-request. raw Boolean Response includes all header contents. Example let payload = { \"PurchaseOrder\" : \"4500007108\" , \"DraftUUID\" : \"00000000-0000-0000-0000-000000000000\" , \"IsActiveEntity\" : \"true\" }; let res = await service . odata . post ( srv , \"A_PurchaseOrder\" , payload );","title":"odata.post(srv, entitySet, payload, raw)"},{"location":"doc/#odatamergesrv-entityset-payload","text":"makes a MERGE request. Kind : static method of odata Param Type Description srv Object Instance of the service entitySet String The entitySet you want to MERGE in. payload Object The payload for the MERGE-request. Example let res = await service . odata . merge ( srv , \"A_PurchaseOrderScheduleLine\" , { \"PurchasingDocument\" : \"4500007108\" , \"PurchasingDocumentItem\" : \"10\" , \"ScheduleLine\" : \"1\" , \"ScheduleLineDeliveryDate\" : new Date () };","title":"odata.merge(srv, entitySet, payload)"},{"location":"doc/#odatadeletesrv-entityset-options","text":"makes a DELETE request. Kind : static method of odata Param Type Description srv Object Instance of the service entitySet String The entitySet you want to DELETE. options Object The options for the DELETE-request. Example let options = { \"PurchaseOrder\" : \"\" , \"DraftUUID\" : draftUUID , \"IsActiveEntity\" : false }; await service . odata . delete ( srv , \"C_PurchaseOrderTP\" , options );","title":"odata.delete(srv, entitySet, options)"},{"location":"doc/#odatacallfunctionimportsrv-functionimportname-options","text":"makes a function import request on an OData service. Kind : static method of odata Param Type Description srv Object Instance of the service functionImportName String Name of Function Import options Object parameters for function import Example const options = { CentralRequestForQuotation : \"7500000026\" , Supplier : \"100006\" }; const res = await service . odata . callFunctionImport ( srv , \"Cancel\" , options );","title":"odata.callFunctionImport(srv, functionImportName, options)"},{"location":"doc/#odatagetoutputmanagementpdfstreamoutputconf-url-username-password","text":"returns a stream of output management pdf file. Kind : static method of odata Param Type Description outputConf Object Configuration for the output management pdf. url String system url username String username for login password String password for login Example const outputConf = ApplObjectType : \"REQUEST_FOR_QUOTATION\" , ApplObjectId : \"7000002653\" , ItemId : \"1\" }; const pdfStream = await service . odata . getOutputManagementPdfStream ( outputConf , url , user , password );","title":"odata.getOutputManagementPdfStream(outputConf, url, username, password)"},{"location":"doc/#odatareadpdffromdirecturlurl-username-password-issaml","text":"returns a stream of pdf file which is part of attachment. Kind : static method of odata Param Type Default Description url String system url [username] String username for login [password] String password for login [isSaml] Boolean false use SAML login if true Example const url = \"https://domain.com/getPdfFile\" ; const pdfStream = await service . odata . readPdfFromDirectUrl ( url , \"username\" , \"Password\" );","title":"odata.readPdfFromDirectUrl(url, [username], [password], [isSaml])"},{"location":"doc/#servicerest","text":"Kind : static class of service .rest .init([customConfig]) \u21d2 Object .get(uri, [config]) \u21d2 Object .post(uri, payload, [config]) \u21d2 Object .delete(uri, [config]) \u21d2 Object .patch(uri, payload, [config]) \u21d2 Object .put(uri, payload, [config]) \u21d2 Object","title":"service.rest"},{"location":"doc/#restinitcustomconfig-object","text":"Returns an axios instance for custom axios handling. Kind : static method of rest Returns : Object - The axios instance. Param Type Default Description [customConfig] Object {} Custom config for axios. If not specified axios defaults will be taken. Example const customConfig = { baseURL : 'https://some-domain.com/api/' , timeout : 1000 , headers : { 'X-Custom-Header' : 'foobar' } const axios = service . rest . init ( customConfig );","title":"rest.init([customConfig]) \u21d2 Object"},{"location":"doc/#restgeturi-config-object","text":"makes a GET request. Kind : static method of rest Returns : Object - The response of the GET request. Param Type Description uri String The uri to the data source you want to GET. [config] Object The config options for the request. Example const uri = https : //api.predic8.de/shop/products/\"; let res = await service . rest . get ( uri ); common . assertion . expectEqual ( res . data . title , \"qmate-service\" );","title":"rest.get(uri, [config]) \u21d2 Object"},{"location":"doc/#restposturi-payload-config-object","text":"makes a POST request. Kind : static method of rest Returns : Object - The response of the POST request. Param Type Description uri String The uri to the data source you want to POST against. payload Object The data you want to POST against your entity set. [config] Object The config options for the request. Example const payload = { id : 99 , title : \"qmate-service\" , author : \"marvin\" }; const config = { headers : { \"X-CSRF-TOKEN\" : \"<CSRF TOKEN>\" , \"Cookie\" : \"<COOKIE>\" , \"Content-Type\" : \"application/json\" } }; let res = await service . rest . post ( ` ${ browser . config . baseUrl } /posts/99` , payload , config );","title":"rest.post(uri, payload, [config]) \u21d2 Object"},{"location":"doc/#restdeleteuri-config-object","text":"makes a DELETE request. Kind : static method of rest Returns : Object - The response of the DELETE request. Param Type Description uri String The uri to the data source you want to DELETE. [config] Object The config options for the request. Example const config = { auth : { \"username\" : \"<username>\" , \"password\" : \"<password>\" } }; let res = await service . rest . delete ( ` ${ browser . config . baseUrl } /posts/99` , config );","title":"rest.delete(uri, [config]) \u21d2 Object"},{"location":"doc/#restpatchuri-payload-config-object","text":"makes a PATCH request. Kind : static method of rest Returns : Object - The response of the PATCH request. Param Type Description uri String The uri to the data source you want to PATCH. payload Object The data to be used for updating the entity. [config] Object The config options for the request. Example const config = { auth : { \"username\" : \"<username>\" , \"password\" : \"<password>\" } }; const payload = { \"title\" : \"patched-qmate-service\" , \"author\" : \"qmate-tester\" }, let res = await service . rest . patch ( ` ${ browser . config . baseUrl } /posts/99` , payload , config );","title":"rest.patch(uri, payload, [config]) \u21d2 Object"},{"location":"doc/#restputuri-payload-config-object","text":"makes a PUT request. Kind : static method of rest Returns : Object - The response of the PUT request. Param Type Description uri String The uri to the data source you want to PUT. payload Object The data to be used for updating the entity. [config] Object The config options for the request. Example const config = { auth : { \"username\" : \"<username>\" , \"password\" : \"<password>\" } } const payload = { \"id\" : 99 , \"title\" : \"put-qmate-service\" , \"author\" : \"qmate-tester\" }, let res = await service . rest . put ( ` ${ browser . config . baseUrl } /posts/99` , payload , config );","title":"rest.put(uri, payload, [config]) \u21d2 Object"},{"location":"sections/contact/","text":"In case of questions or issues, please feel free to reach out to us or open an issue on our GitHub Page . Benjamin Warth Walldorf - Germany benjamin.warth@sap.com Georgios Treska Walldorf - Germany georgios.treska@sap.com Marvin Gr\u00fc\u00dfinger Walldorf - Germany marvin.gruessinger@sap.com","title":"Contact"},{"location":"sections/contact/#benjamin-warth","text":"Walldorf - Germany benjamin.warth@sap.com","title":"Benjamin Warth"},{"location":"sections/contact/#georgios-treska","text":"Walldorf - Germany georgios.treska@sap.com","title":"Georgios Treska"},{"location":"sections/contact/#marvin-gruinger","text":"Walldorf - Germany marvin.gruessinger@sap.com","title":"Marvin Gr\u00fc\u00dfinger"},{"location":"sections/bestPractices/authentication/","text":"Best Practices - Authentication For the standard Fiori and Cloud login Pages, we provide some configuration parameters and reuse methods to enable you an easy way of system authentication. There are two different approaches to log into the system: Via reuse methods (recommended) Via configuration file Which way to choose depends on your needs and preferences. If you are testing a scenario which goes through various systems (especially non UI5 systems) it is not recommended/possible to use a global authentication via the configuration file. If there is only one login during the script execution, it is up to you, to do the authentication via the configuration file. Info For consistency reasons we recommend to use the login via reuse methods only. Via reuse methods The other way of system authentication, is to use the specific reuse method . This is commonly recommended, especially if you are switching between multiple users or systems during the test execution. With this approach, you handle the login within a step of your script/s. The benefit of this approach is, to have more control over the login as an actual step inside your test process. With that, you are able to use the login/logout multiple times during the test execution if you need to switch users or systems during runtime. You can use one of the following methods: Generic Login Fiori Login SAP Cloud Login Custom Login There is a generic login function which can be used for both types of forms (fiori & sap-cloud) to authenticate. This function will automatically determine the right login form and call the proper function. it ( \"Step 01: login generic\" , async function () { await ui5 . session . login ( \"JOHNDOE\" , \"abc123\" ); }); Use this configuration for the Fiori Login Screen . Define the step (on top of your script) and pass at least a valid user to the method. it ( \"Step 01: login fiori\" , async function () { await ui5 . session . loginFiori ( \"JOHNDOE\" , \"abc123\" ); }); Use this configuration for the SAP Cloud Login Screen . Define the step (on top of your script) and pass at least a valid user to the method. it ( \"Step 01: login sap cloud\" , async function () { await ui5 . session . loginSapCloud ( \"JOHNDOE\" , \"abc123\" ); }); If you want to define your own custom form, you can use the following method. Define the step (on top of your script) and pass the username , password , usernameFieldSelector , passwordFieldSelector and logonButtonSelector . Therefore, you need to define the CSS selectors of the corresponding elements. it ( \"Step 01: login Custom\" , async function () { const username = \"JOHNDOE\" ; const password = \"Greetings1!\" ; const usernameSelector = \"#USERNAME_BLOCK input\" ; const passwordSelector = \"#PASSWORD_BLOCK input\" ; const loginButtonSelector = \"#LOGIN_LINK\" ; await ui5 . session . loginCustom ( username , password , usernameSelector , passwordSelector , loginButtonSelector ); }); Tip You can disable the login centrally without touching your specs by setting the formType to \"skip\" inside your configuration file. Via configuration file Inside the conf.js file You can specify how the script will automatically log into the system. This will only be executed once before the first script gets executed. Hence, we recommend to use this only if you are not switching between multiple users or systems during the test execution. There are multiple options, based on the login screen to set the formType of the Configuration . Fiori Login SAP Cloud Login Others Custom Login Skip Login Use this configuration for the Fiori Login Screen . You only need to specify the username and password . auth : { formType : \"fiori-form\" , username : \"JOHNDOE\" , password : \"Greetings1!\" }, Use this configuration for the SAP Cloud Login Screen . You only need to specify the username and password . auth : { formType : \"sapcloud-form\" , username : \"JOHNDOE\" , password : \"Greetings1!\" }, The following options for formType are also available. You need to specify the username and password for this configuration. XSA-form POT-form MIA-form UI5-Form If you want to define your own custom form, you can use the following configuration. Additionally to the username and password , you need to specify the usernameFieldSelector , passwordFieldSelector and logonButtonSelector . Therefore set the CSS selectors of the corresponding elements. auth : { formType : \"custom-form\" , username : \"JOHNDOE\" , password : \"Greetings1!\" , usernameFieldSelector : \"#USERNAME_BLOCK input\" , passwordFieldSelector : \"#PASSWORD_BLOCK input\" , logonButtonSelector : \"#LOGIN_LINK\" }, Use this configuration to skip the login and logout inside the specs. auth : { formType : \"skip\" }, Logout To logout from a S/4 system, please use the following method. it ( \"Step XX: logout\" , async function () { await ui5 . session . logout (); }); Info Please note, if formType is set to \"skip\" , the logout will be skipped as well. Finding the right login form Please use the screenshots to find the proper login form. Fiori Login Screen SAP Cloud Login Screen","title":"Authentication"},{"location":"sections/bestPractices/authentication/#best-practices-authentication","text":"For the standard Fiori and Cloud login Pages, we provide some configuration parameters and reuse methods to enable you an easy way of system authentication. There are two different approaches to log into the system: Via reuse methods (recommended) Via configuration file Which way to choose depends on your needs and preferences. If you are testing a scenario which goes through various systems (especially non UI5 systems) it is not recommended/possible to use a global authentication via the configuration file. If there is only one login during the script execution, it is up to you, to do the authentication via the configuration file. Info For consistency reasons we recommend to use the login via reuse methods only.","title":"Best Practices - Authentication"},{"location":"sections/bestPractices/authentication/#via-reuse-methods","text":"The other way of system authentication, is to use the specific reuse method . This is commonly recommended, especially if you are switching between multiple users or systems during the test execution. With this approach, you handle the login within a step of your script/s. The benefit of this approach is, to have more control over the login as an actual step inside your test process. With that, you are able to use the login/logout multiple times during the test execution if you need to switch users or systems during runtime. You can use one of the following methods: Generic Login Fiori Login SAP Cloud Login Custom Login There is a generic login function which can be used for both types of forms (fiori & sap-cloud) to authenticate. This function will automatically determine the right login form and call the proper function. it ( \"Step 01: login generic\" , async function () { await ui5 . session . login ( \"JOHNDOE\" , \"abc123\" ); }); Use this configuration for the Fiori Login Screen . Define the step (on top of your script) and pass at least a valid user to the method. it ( \"Step 01: login fiori\" , async function () { await ui5 . session . loginFiori ( \"JOHNDOE\" , \"abc123\" ); }); Use this configuration for the SAP Cloud Login Screen . Define the step (on top of your script) and pass at least a valid user to the method. it ( \"Step 01: login sap cloud\" , async function () { await ui5 . session . loginSapCloud ( \"JOHNDOE\" , \"abc123\" ); }); If you want to define your own custom form, you can use the following method. Define the step (on top of your script) and pass the username , password , usernameFieldSelector , passwordFieldSelector and logonButtonSelector . Therefore, you need to define the CSS selectors of the corresponding elements. it ( \"Step 01: login Custom\" , async function () { const username = \"JOHNDOE\" ; const password = \"Greetings1!\" ; const usernameSelector = \"#USERNAME_BLOCK input\" ; const passwordSelector = \"#PASSWORD_BLOCK input\" ; const loginButtonSelector = \"#LOGIN_LINK\" ; await ui5 . session . loginCustom ( username , password , usernameSelector , passwordSelector , loginButtonSelector ); }); Tip You can disable the login centrally without touching your specs by setting the formType to \"skip\" inside your configuration file.","title":"Via reuse methods"},{"location":"sections/bestPractices/authentication/#via-configuration-file","text":"Inside the conf.js file You can specify how the script will automatically log into the system. This will only be executed once before the first script gets executed. Hence, we recommend to use this only if you are not switching between multiple users or systems during the test execution. There are multiple options, based on the login screen to set the formType of the Configuration . Fiori Login SAP Cloud Login Others Custom Login Skip Login Use this configuration for the Fiori Login Screen . You only need to specify the username and password . auth : { formType : \"fiori-form\" , username : \"JOHNDOE\" , password : \"Greetings1!\" }, Use this configuration for the SAP Cloud Login Screen . You only need to specify the username and password . auth : { formType : \"sapcloud-form\" , username : \"JOHNDOE\" , password : \"Greetings1!\" }, The following options for formType are also available. You need to specify the username and password for this configuration. XSA-form POT-form MIA-form UI5-Form If you want to define your own custom form, you can use the following configuration. Additionally to the username and password , you need to specify the usernameFieldSelector , passwordFieldSelector and logonButtonSelector . Therefore set the CSS selectors of the corresponding elements. auth : { formType : \"custom-form\" , username : \"JOHNDOE\" , password : \"Greetings1!\" , usernameFieldSelector : \"#USERNAME_BLOCK input\" , passwordFieldSelector : \"#PASSWORD_BLOCK input\" , logonButtonSelector : \"#LOGIN_LINK\" }, Use this configuration to skip the login and logout inside the specs. auth : { formType : \"skip\" },","title":"Via configuration file"},{"location":"sections/bestPractices/authentication/#logout","text":"To logout from a S/4 system, please use the following method. it ( \"Step XX: logout\" , async function () { await ui5 . session . logout (); }); Info Please note, if formType is set to \"skip\" , the logout will be skipped as well.","title":"Logout"},{"location":"sections/bestPractices/authentication/#finding-the-right-login-form","text":"Please use the screenshots to find the proper login form. Fiori Login Screen SAP Cloud Login Screen","title":"Finding the right login form"},{"location":"sections/bestPractices/dataHandling/","text":"Best Practices - Data Handling Related Topics: Data Handling | Advanced Data Handling Always decouple the data from the spec. The maintenance of data will become very handy also more transparent. Store your data files inside the data folder. Create a separate .json file for every script. Unless specifically needed by the test scenario to use data from multiple files, it is recommended to keep things simple, and use only one import prefix (that maps to a JSON file) per script. Name the file exactly like the script which the data belongs to. Structure your data according to the related section of the UI. To pass data between different specs, use the references.json file and group the specs inside the config. Use meaningful key names for import and export parameters, and use meaningful names for data folders, subfolders, and JSON files. config.js params : { import : { purchaseOrder : \"./data/purchaseOrder.json\" , ordersFolder : \"./data/orders\" }, export : { supplierInvoice : \"./data/export/supplierInvoice.json\" } }, Structure your data. data.json { \"session\" : { \"username\" : \"JOHNDOE\" , \"password\" : \"abc123!!\" }, \"userData\" : { \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"address\" : { \"street\" : \"Main Road\" , \"number\" : \"42\" , \"zipCode\" : \"12345\" , \"city\" : \"Metropolis\" } } } You can check if data has been imported correctly by using assertions before accessing it. const data = browser . config . params . import . yourPrefixSpecName ; // make an assertion to ensure data was loaded await common . assertion . expectDefined ( data ); await common . assertion . expectDefined ( data . email ); (Only for data export) Each script should write to different export files, unless the test scenario needs to do otherwise. If different scripts write to same export file, make sure to merge and not overwrite the export data.","title":"Data Handling"},{"location":"sections/bestPractices/dataHandling/#best-practices-data-handling","text":"Related Topics: Data Handling | Advanced Data Handling Always decouple the data from the spec. The maintenance of data will become very handy also more transparent. Store your data files inside the data folder. Create a separate .json file for every script. Unless specifically needed by the test scenario to use data from multiple files, it is recommended to keep things simple, and use only one import prefix (that maps to a JSON file) per script. Name the file exactly like the script which the data belongs to. Structure your data according to the related section of the UI. To pass data between different specs, use the references.json file and group the specs inside the config. Use meaningful key names for import and export parameters, and use meaningful names for data folders, subfolders, and JSON files. config.js params : { import : { purchaseOrder : \"./data/purchaseOrder.json\" , ordersFolder : \"./data/orders\" }, export : { supplierInvoice : \"./data/export/supplierInvoice.json\" } }, Structure your data. data.json { \"session\" : { \"username\" : \"JOHNDOE\" , \"password\" : \"abc123!!\" }, \"userData\" : { \"firstName\" : \"John\" , \"lastName\" : \"Doe\" , \"address\" : { \"street\" : \"Main Road\" , \"number\" : \"42\" , \"zipCode\" : \"12345\" , \"city\" : \"Metropolis\" } } } You can check if data has been imported correctly by using assertions before accessing it. const data = browser . config . params . import . yourPrefixSpecName ; // make an assertion to ensure data was loaded await common . assertion . expectDefined ( data ); await common . assertion . expectDefined ( data . email ); (Only for data export) Each script should write to different export files, unless the test scenario needs to do otherwise. If different scripts write to same export file, make sure to merge and not overwrite the export data.","title":"Best Practices - Data Handling"},{"location":"sections/bestPractices/selectors/","text":"Best Practices - Selectors Related Topics: Selectors Try to avoid text dependencies in selectors. Texts are more likely to change on the UI and if you want to enable your specs for LAT (Language Acceptance Tests) it will break your test. avoid UI5 non UI5 const selector = { \"elementProperties\" : { \"viewName\" : \"sap.suite.ui.generic.template.ObjectPage.view.Details\" , \"metadata\" : \"sap.m.Button\" , \"text\" : \"Create\" } }; const saveButton = await nonUi5 . element . getElementByCss ( \"BUTTON[text='Save']\" ); Avoid xPath in non_ui5 selectors: xPath is a complex construct which includes multiple nodes. Due to the intransparent dependencies of other elements it may brake your test in case of any change of the corresponding elements. avoid const elem1 = await nonUi5 . element . getElementByXPath ( \".//*[@role='toolbar']/span[3]/span[2]/input\" ); Avoid screen size specific and style dependent attributes of elements. avoid [ @ style = 'width:100%;' ] Refrain from building manual xPaths at all costs. Indexes can change very easy if the path changes etc. avoid const SupplierPartyId = childrenArray [ 5 ]. getElementsByTagName ( \"SPAN\" )[ 1 ]. innerText ; Always check for a stable IDs or for other unique properties/attributes. Even if spotlight doesn't offer it to you.","title":"Selectors"},{"location":"sections/bestPractices/selectors/#best-practices-selectors","text":"Related Topics: Selectors Try to avoid text dependencies in selectors. Texts are more likely to change on the UI and if you want to enable your specs for LAT (Language Acceptance Tests) it will break your test. avoid UI5 non UI5 const selector = { \"elementProperties\" : { \"viewName\" : \"sap.suite.ui.generic.template.ObjectPage.view.Details\" , \"metadata\" : \"sap.m.Button\" , \"text\" : \"Create\" } }; const saveButton = await nonUi5 . element . getElementByCss ( \"BUTTON[text='Save']\" ); Avoid xPath in non_ui5 selectors: xPath is a complex construct which includes multiple nodes. Due to the intransparent dependencies of other elements it may brake your test in case of any change of the corresponding elements. avoid const elem1 = await nonUi5 . element . getElementByXPath ( \".//*[@role='toolbar']/span[3]/span[2]/input\" ); Avoid screen size specific and style dependent attributes of elements. avoid [ @ style = 'width:100%;' ] Refrain from building manual xPaths at all costs. Indexes can change very easy if the path changes etc. avoid const SupplierPartyId = childrenArray [ 5 ]. getElementsByTagName ( \"SPAN\" )[ 1 ]. innerText ; Always check for a stable IDs or for other unique properties/attributes. Even if spotlight doesn't offer it to you.","title":"Best Practices - Selectors"},{"location":"sections/features/advancedDataHandling/","text":"Data can be imported from JSON files and used in the tests. Data obtained during the test run can also be saved or exported to JSON files. Importing Data Test configuration for import Data to be imported may be in a specific JSON file, or in a directory, and sub-directories under that directory. In the config file, under params add import , and within it specify the import data. config.js params : { import : { myFolder1 : \"./data/my/folder/data/<systemName>\" , myFolder2 : \"data/another/folder/data/anotherFolder\" , myFolder3 : \"C:/Users/C1234567/data/testFolder\" , yourPrefixSpecName : \"./data/my/folder/data/<systemName>/data.json\" , uiUser : \"./data/my/folder/data/<systemName>/webUser.json\" , } }, Info The folders or JSON files are specified as key-value pair. In this sample, yourPrefixSpecName is the key which points to a JSON file ./data/my/folder/data/<systemName>/data.json . Similarly, the key myFolder2 points to a folder data/another/folder/data/anotherFolder . Tip File paths may be relative or absolute. If relative, they are resolved relative to the config file directory. Data import from JSON file Data from a JSON file will be added under the specified key. Data from ./data/my/folder/data/<systemName>/data.json will be available in browser.config.params.import.yourPrefixSpecName . Similarly data from ./data/my/folder/data/<systemName>/webUser.json will be available in browser.config.params.import.uiUser . config.js params : { import : { yourPrefixSpecName : \"./data/my/folder/data/<systemName>/data.json\" , uiUser : \"./data/my/folder/data/<systemName>/webUser.json\" , } }, Let's assume the file ./data/my/folder/data/ /data.json has the following data: data.json { \"name\" : \"Joe Doe\" , \"email\" : \"joe.doe@example.com\" , \"telephone\" : \"333-000-111-222\" , \"amount\" : 4.79 , \"website\" : \"http://www.userdataexport.test\" } Since yourPrefixSpecName is the key, to access the email value in the test spec, we use browser.config.params.import.yourPrefixSpecName.email . // load entire data from \"./data/my/folder/data/<systemName>/data.json\" const userData = browser . config . params . import . yourPrefixSpecName ; // make an assertion to ensure data was loaded await common . assertion . expectDefined ( userData ); await common . assertion . expectDefined ( userData . email ); // enter data to input field await ui5 . userInteraction . fill ( emailSelector , userData . email ); // define and enter specific data value const email = browser . config . params . import . yourPrefixSpecName . email ; await ui5 . userInteraction . fill ( emailSelector , email ); Data import from folders and subfolders config.js params : { import : { myFolder1 : \"./data/my/folder/data/<systemName>\" , myFolder2 : \"./data/another/folder/data/anotherFolder\" , } }, Let us assume that the folders have the following files: ./data/my/folder/data/<systemName>/data.json ./data/my/folder/data/<systemName>/purchaseRequisition.json ./data/another/folder/data/anotherFolder/purchaseRequisition_HI.json ./data/another/folder/data/anotherFolder/purchaseOrders/ServicePurchaseOrder.json ./data/another/folder/data/anotherFolder/purchaseOrders/LimitPurchaseOrder.json ./data/another/folder/data/anotherFolder/my-po-set/Limit-Purchase-Order.json ./data/another/folder/data/anotherFolder/my-po-set/ServicePurchaseOrder.2Items.json Data in ./data/my/folder/data/ /data.json can be accessed using the folder key myFolder1 , and the file name prefix, which is data in this case. const myData = browser . config . params . import . myFolder1 . data ; Data in ./data/my/folder/data/ /purchaseRequisition.json can be accessed using the folder key myFolder1 , and the file name prefix purchaseRequisition . const prData = browser . config . params . import . myFolder1 . purchaseRequisition ; Similarly data in data/another/folder/data/anotherFolder can be accessed using the folder key myFolder2 , subfolder name and file prefix as keys. data/another/folder/data/anotherFolder/purchaseRequisition_HI.json const prDataHI = browser . config . params . import . myFolder2 . purchaseRequisition_HI ; data/another/folder/data/anotherFolder/purchaseOrders/ServicePurchaseOrder.json const servicePO = browser . config . params . import . myFolder2 . purchaseOrders . ServicePurchaseOrder ; data/another/folder/data/anotherFolder/purchaseOrders/LimitPurchaseOrder.json const limitPO = browser . config . params . import . myFolder2 . purchaseOrders . LimitPurchaseOrder ; Tip It is recommended that the subfolder names and JSON file names used to import data do not have special characters. If there are special characters in the file name or subfolder name, then the dot notation can't be used. In that case, you can use the following syntax: data/another/folder/data/anotherFolder/my-po-set/Limit-Purchase-Order.json const limitPO = browser . config . params . import . myFolder2 [ \"my-po-set\" ][ \"Limit-Purchase-Order\" ]; data/another/folder/data/anotherFolder/my-po-set/ServicePurchaseOrder.2Items.json const servicePO = browser . config . params . import . myFolder2 [ \"my-po-set\" ][ \"ServicePurchaseOrder.2Items\" ]; Warning Qmate will not fail if import files and folders are missing, not readable, or have an invalid JSON . In such cases, warnings are logged on the console, and the data corresponding to those files and folders will remain undefined. Exporting Data Test configuration for export Data can be exported persistently to one or more files. In the sample configuration file under params , add export with a list of file names as shown below. config.js params : { export : { exportData : \"./data/my/folder/path/in/exportFile.json\" , exportMoreData : \"./data/my/folder/path/in/moreDataFile.json\" , exportArrayData : \"./data/my/folder/path/in/arrayDataFile.json\" } }, Exporting data to JSON file The data in browser.config.params.export is written to output files at the end of the test run. The export file is created or overwritten if already present. Any intermediate folders are also created if necessary. it ( \"Step 01: export data to 'exportData' file\" , async function () { // exportData: \"./data/my/folder/path/in/exportFile.json\", browser . config . params . export . exportData = { name : \"joe\" , description : \"exported into exportFile.json\" }; }); it ( \"Step 02: export data to 'exportMoreData' file\" , async function () { // exportMoreData: \"./data/my/folder/path/in/moreDataFile.json\", browser . config . params . export . exportMoreData = { name : \"jack\" , description : \"exported into moreDataFile.json\" }; }); it ( \"Step 03: export array data to 'exportArrayData' file\" , async function () { // exportArrayData: \"./data/my/folder/path/in/arrayDataFile.json\", browser . config . params . export . exportArrayData = [ { itemNo : \"1\" , description : \"exported into arrayDataFile.json\" , type : \"material\" }, { itemNo : \"2\" , description : \"Service item\" , type : \"service\" } ]; await common . assertion . expectEqual ( Array . isArray ( browser . config . params . export . exportArrayData ), true ); // file \"./data/my/folder/path/in/arrayDataFile.json\" will have the array data // check manually after test run is complete }); At the end of the test run, the file ./data/my/folder/path/in/exportFile.json will look like: { na me : \"joe\" , descrip t io n : \"exported into exportFile.json\" } File ./data/my/folder/path/in/moreDataFile.json will look like: { na me : \"jack\" , descrip t io n : \"exported into moreDataFile.json\" } File ./data/my/folder/path/in/moreDataFile.json will look like: [ { i te mNo : \"1\" , descrip t io n : \"exported into arrayDataFile.json\" , t ype : \"material\" }, { i te mNo : \"2\" , descrip t io n : \"Service item\" , t ype : \"service\" } ] Warning If you are adding export data to the same export key, make sure you don't overwrite previous data. // browser.config.params.export.exportData has data assigned to it from previous steps browser . config . params . export . exportData [ \"name\" ] = \"joe\" ; // or if browser.config.params.export.exportData is an Array if ( Array . isArray ( browser . config . params . export . exportData )) { // add an element to an array browser . config . params . export . exportData . push ({ name : \"Joe\" }); } Info If there is no data assigned to an export key, then the export file corresponding to that key will be empty. Doing any of the following things will create an empty JSON file. // \"./data/my/folder/path/in/exportFile.json\" will be a blank file at end of test run browser . config . params . export . exportData = null ; // or browser . config . params . export . exportData = {}; // or browser . config . params . export . exportData = []; Parallel test runs and exporting data If tests are running in parallel, there will be multiple browser instances and each test run will have it's own browser instance. If these parallel instances write to the same export file, then the export data from parallel test instances is merged together and written out to the file. Warning This module does not fail if export files are not writable or if the export folder is inaccessible. In such cases, warnings are logged on the console, and export data will not get written out.","title":"advancedDataHandling"},{"location":"sections/features/advancedDataHandling/#importing-data","text":"","title":"Importing Data"},{"location":"sections/features/advancedDataHandling/#test-configuration-for-import","text":"Data to be imported may be in a specific JSON file, or in a directory, and sub-directories under that directory. In the config file, under params add import , and within it specify the import data. config.js params : { import : { myFolder1 : \"./data/my/folder/data/<systemName>\" , myFolder2 : \"data/another/folder/data/anotherFolder\" , myFolder3 : \"C:/Users/C1234567/data/testFolder\" , yourPrefixSpecName : \"./data/my/folder/data/<systemName>/data.json\" , uiUser : \"./data/my/folder/data/<systemName>/webUser.json\" , } }, Info The folders or JSON files are specified as key-value pair. In this sample, yourPrefixSpecName is the key which points to a JSON file ./data/my/folder/data/<systemName>/data.json . Similarly, the key myFolder2 points to a folder data/another/folder/data/anotherFolder . Tip File paths may be relative or absolute. If relative, they are resolved relative to the config file directory.","title":"Test configuration for import"},{"location":"sections/features/advancedDataHandling/#data-import-from-json-file","text":"Data from a JSON file will be added under the specified key. Data from ./data/my/folder/data/<systemName>/data.json will be available in browser.config.params.import.yourPrefixSpecName . Similarly data from ./data/my/folder/data/<systemName>/webUser.json will be available in browser.config.params.import.uiUser . config.js params : { import : { yourPrefixSpecName : \"./data/my/folder/data/<systemName>/data.json\" , uiUser : \"./data/my/folder/data/<systemName>/webUser.json\" , } }, Let's assume the file ./data/my/folder/data/ /data.json has the following data: data.json { \"name\" : \"Joe Doe\" , \"email\" : \"joe.doe@example.com\" , \"telephone\" : \"333-000-111-222\" , \"amount\" : 4.79 , \"website\" : \"http://www.userdataexport.test\" } Since yourPrefixSpecName is the key, to access the email value in the test spec, we use browser.config.params.import.yourPrefixSpecName.email . // load entire data from \"./data/my/folder/data/<systemName>/data.json\" const userData = browser . config . params . import . yourPrefixSpecName ; // make an assertion to ensure data was loaded await common . assertion . expectDefined ( userData ); await common . assertion . expectDefined ( userData . email ); // enter data to input field await ui5 . userInteraction . fill ( emailSelector , userData . email ); // define and enter specific data value const email = browser . config . params . import . yourPrefixSpecName . email ; await ui5 . userInteraction . fill ( emailSelector , email );","title":"Data import from JSON file"},{"location":"sections/features/advancedDataHandling/#data-import-from-folders-and-subfolders","text":"config.js params : { import : { myFolder1 : \"./data/my/folder/data/<systemName>\" , myFolder2 : \"./data/another/folder/data/anotherFolder\" , } }, Let us assume that the folders have the following files: ./data/my/folder/data/<systemName>/data.json ./data/my/folder/data/<systemName>/purchaseRequisition.json ./data/another/folder/data/anotherFolder/purchaseRequisition_HI.json ./data/another/folder/data/anotherFolder/purchaseOrders/ServicePurchaseOrder.json ./data/another/folder/data/anotherFolder/purchaseOrders/LimitPurchaseOrder.json ./data/another/folder/data/anotherFolder/my-po-set/Limit-Purchase-Order.json ./data/another/folder/data/anotherFolder/my-po-set/ServicePurchaseOrder.2Items.json Data in ./data/my/folder/data/ /data.json can be accessed using the folder key myFolder1 , and the file name prefix, which is data in this case. const myData = browser . config . params . import . myFolder1 . data ; Data in ./data/my/folder/data/ /purchaseRequisition.json can be accessed using the folder key myFolder1 , and the file name prefix purchaseRequisition . const prData = browser . config . params . import . myFolder1 . purchaseRequisition ; Similarly data in data/another/folder/data/anotherFolder can be accessed using the folder key myFolder2 , subfolder name and file prefix as keys. data/another/folder/data/anotherFolder/purchaseRequisition_HI.json const prDataHI = browser . config . params . import . myFolder2 . purchaseRequisition_HI ; data/another/folder/data/anotherFolder/purchaseOrders/ServicePurchaseOrder.json const servicePO = browser . config . params . import . myFolder2 . purchaseOrders . ServicePurchaseOrder ; data/another/folder/data/anotherFolder/purchaseOrders/LimitPurchaseOrder.json const limitPO = browser . config . params . import . myFolder2 . purchaseOrders . LimitPurchaseOrder ; Tip It is recommended that the subfolder names and JSON file names used to import data do not have special characters. If there are special characters in the file name or subfolder name, then the dot notation can't be used. In that case, you can use the following syntax: data/another/folder/data/anotherFolder/my-po-set/Limit-Purchase-Order.json const limitPO = browser . config . params . import . myFolder2 [ \"my-po-set\" ][ \"Limit-Purchase-Order\" ]; data/another/folder/data/anotherFolder/my-po-set/ServicePurchaseOrder.2Items.json const servicePO = browser . config . params . import . myFolder2 [ \"my-po-set\" ][ \"ServicePurchaseOrder.2Items\" ]; Warning Qmate will not fail if import files and folders are missing, not readable, or have an invalid JSON . In such cases, warnings are logged on the console, and the data corresponding to those files and folders will remain undefined.","title":"Data import from folders and subfolders"},{"location":"sections/features/advancedDataHandling/#exporting-data","text":"","title":"Exporting Data"},{"location":"sections/features/advancedDataHandling/#test-configuration-for-export","text":"Data can be exported persistently to one or more files. In the sample configuration file under params , add export with a list of file names as shown below. config.js params : { export : { exportData : \"./data/my/folder/path/in/exportFile.json\" , exportMoreData : \"./data/my/folder/path/in/moreDataFile.json\" , exportArrayData : \"./data/my/folder/path/in/arrayDataFile.json\" } },","title":"Test configuration for export"},{"location":"sections/features/advancedDataHandling/#exporting-data-to-json-file","text":"The data in browser.config.params.export is written to output files at the end of the test run. The export file is created or overwritten if already present. Any intermediate folders are also created if necessary. it ( \"Step 01: export data to 'exportData' file\" , async function () { // exportData: \"./data/my/folder/path/in/exportFile.json\", browser . config . params . export . exportData = { name : \"joe\" , description : \"exported into exportFile.json\" }; }); it ( \"Step 02: export data to 'exportMoreData' file\" , async function () { // exportMoreData: \"./data/my/folder/path/in/moreDataFile.json\", browser . config . params . export . exportMoreData = { name : \"jack\" , description : \"exported into moreDataFile.json\" }; }); it ( \"Step 03: export array data to 'exportArrayData' file\" , async function () { // exportArrayData: \"./data/my/folder/path/in/arrayDataFile.json\", browser . config . params . export . exportArrayData = [ { itemNo : \"1\" , description : \"exported into arrayDataFile.json\" , type : \"material\" }, { itemNo : \"2\" , description : \"Service item\" , type : \"service\" } ]; await common . assertion . expectEqual ( Array . isArray ( browser . config . params . export . exportArrayData ), true ); // file \"./data/my/folder/path/in/arrayDataFile.json\" will have the array data // check manually after test run is complete }); At the end of the test run, the file ./data/my/folder/path/in/exportFile.json will look like: { na me : \"joe\" , descrip t io n : \"exported into exportFile.json\" } File ./data/my/folder/path/in/moreDataFile.json will look like: { na me : \"jack\" , descrip t io n : \"exported into moreDataFile.json\" } File ./data/my/folder/path/in/moreDataFile.json will look like: [ { i te mNo : \"1\" , descrip t io n : \"exported into arrayDataFile.json\" , t ype : \"material\" }, { i te mNo : \"2\" , descrip t io n : \"Service item\" , t ype : \"service\" } ] Warning If you are adding export data to the same export key, make sure you don't overwrite previous data. // browser.config.params.export.exportData has data assigned to it from previous steps browser . config . params . export . exportData [ \"name\" ] = \"joe\" ; // or if browser.config.params.export.exportData is an Array if ( Array . isArray ( browser . config . params . export . exportData )) { // add an element to an array browser . config . params . export . exportData . push ({ name : \"Joe\" }); } Info If there is no data assigned to an export key, then the export file corresponding to that key will be empty. Doing any of the following things will create an empty JSON file. // \"./data/my/folder/path/in/exportFile.json\" will be a blank file at end of test run browser . config . params . export . exportData = null ; // or browser . config . params . export . exportData = {}; // or browser . config . params . export . exportData = [];","title":"Exporting data to JSON file"},{"location":"sections/features/advancedDataHandling/#parallel-test-runs-and-exporting-data","text":"If tests are running in parallel, there will be multiple browser instances and each test run will have it's own browser instance. If these parallel instances write to the same export file, then the export data from parallel test instances is merged together and written out to the file. Warning This module does not fail if export files are not writable or if the export folder is inaccessible. In such cases, warnings are logged on the console, and export data will not get written out.","title":"Parallel test runs and exporting data"},{"location":"sections/features/config/","text":"Important WebdriverIO Parameters WebdriverIO Parameters For more information about how to setup your config please see the official documentation from WebdriverIO. baseUrl The baseUrl defines the entry point of your script. Here you can define in which system or application your script/s is/are being executed. baseUrl : \"https://www.sap.com\" specs Inside the specs array you specify the scripts to execute. specs : [ path . resolve ( __dirname , \"path/to/specs/yourSpec1.spec.js\" ), path . resolve ( __dirname , \"path/to/specs/yourSpec2.spec.js\" ), path . resolve ( __dirname , \"path/to/specs/yourSpec3.spec.js\" ) ], Warning These specs are being executed sequentially in different instances . Therefore, data (e.g. via references.json) can not be passed between the specs. To pass data between the specs (run them in a shared instance), you have to group them as shown below: specs : [ // grouped [ path . resolve ( __dirname , \"path/to/specs/yourSpec1.spec.js\" ), path . resolve ( __dirname , \"path/to/specs/yourSpec2.spec.js\" ) ], // ungrouped path . resolve ( __dirname , \"path/to/specs/yourSpec3.spec.js\" ) ], maxInstances The number of parallel instances running at the same time. maxInstances : 0 bail & mocha bail In qmate there are two different types of parameters to specify how your test executions should behave in case of a failure. Please make sure to set both parameters with the values according to the table below. wdio bail mocha bail Possible values are: 0 , 1 bail : 1 Possible values: true , false mochaOpts : { bail : true } Please find the below table for a detailed overview of all possible options: name mocha bail wdio bail result break all true 1 break whole test execution after failure break further false 1 continue with failed spec, break further spec execution after failure break current true 0 break failed spec, continue further spec execution ignore false 0 don't break test execution at all Warning Grouped specs or describes within the same file will behave the same as the failed spec. specFileRetries\u200b The number of times to retry an entire specfile when it fails as a whole. specFileRetries \u200b : 3 logLevel The level of logging verbosity. Possible values are: trace | debug | info | warn | error | silent logLevel : \"warn\" Qmate Service specific parameters The params object inside your config defines soe specific Qmate relevant parameters. params : { // [..] } Warning The following parameters are being defined inside the params object above. auth Specifies the way, Qmate will login to the system. See section Authentication for possible options and more details. params : { auth : { formType : \"plain\" } } systemUrl Defines your system url used for OData/REST API calls. params : { systemUrl : \"https://www.sap.com\" } logUI5Version Specifies the log level of the UI5 version and timestamp of the system in use. Possible values are: always true false Logs the UI5 version after each system login. params : { logUI5Version : \"always\" } Logs the UI5 version per execution. params : { logUI5Version : true } Does not log the UI5 version at all. params : { logUI5Version : false } console output UI5 Version: 1.96.1 UI5 Timestamp: 25/11/2021 qmateCustomTimeout Overwrites the default timeout of 30 seconds in the functions from the Qmate Reuse API with the given value. Unit is milliseconds. params : { qmateCustomTimeout : 40000 } stepSleepTime Static sleep time after each step. Unit is milliseconds. Can be used to manually slow down the test execution. Set to 0 to disable. params : { stepSleepTime : 5000 } loadPropertyTimeout Overwrites the default loadPropertyTimeout of 10 seconds in the functions from the Qmate Reuse API with the given value. Unit is milliseconds. params : { qmateCustomTimeout : 20000 }","title":"Config"},{"location":"sections/features/config/#important-webdriverio-parameters","text":"WebdriverIO Parameters For more information about how to setup your config please see the official documentation from WebdriverIO.","title":"Important WebdriverIO Parameters"},{"location":"sections/features/config/#baseurl","text":"The baseUrl defines the entry point of your script. Here you can define in which system or application your script/s is/are being executed. baseUrl : \"https://www.sap.com\"","title":"baseUrl"},{"location":"sections/features/config/#specs","text":"Inside the specs array you specify the scripts to execute. specs : [ path . resolve ( __dirname , \"path/to/specs/yourSpec1.spec.js\" ), path . resolve ( __dirname , \"path/to/specs/yourSpec2.spec.js\" ), path . resolve ( __dirname , \"path/to/specs/yourSpec3.spec.js\" ) ], Warning These specs are being executed sequentially in different instances . Therefore, data (e.g. via references.json) can not be passed between the specs. To pass data between the specs (run them in a shared instance), you have to group them as shown below: specs : [ // grouped [ path . resolve ( __dirname , \"path/to/specs/yourSpec1.spec.js\" ), path . resolve ( __dirname , \"path/to/specs/yourSpec2.spec.js\" ) ], // ungrouped path . resolve ( __dirname , \"path/to/specs/yourSpec3.spec.js\" ) ],","title":"specs"},{"location":"sections/features/config/#maxinstances","text":"The number of parallel instances running at the same time. maxInstances : 0","title":"maxInstances"},{"location":"sections/features/config/#bail-mocha-bail","text":"In qmate there are two different types of parameters to specify how your test executions should behave in case of a failure. Please make sure to set both parameters with the values according to the table below. wdio bail mocha bail Possible values are: 0 , 1 bail : 1 Possible values: true , false mochaOpts : { bail : true } Please find the below table for a detailed overview of all possible options: name mocha bail wdio bail result break all true 1 break whole test execution after failure break further false 1 continue with failed spec, break further spec execution after failure break current true 0 break failed spec, continue further spec execution ignore false 0 don't break test execution at all Warning Grouped specs or describes within the same file will behave the same as the failed spec.","title":"bail &amp; mocha bail"},{"location":"sections/features/config/#specfileretries","text":"The number of times to retry an entire specfile when it fails as a whole. specFileRetries \u200b : 3","title":"specFileRetries\u200b"},{"location":"sections/features/config/#loglevel","text":"The level of logging verbosity. Possible values are: trace | debug | info | warn | error | silent logLevel : \"warn\"","title":"logLevel"},{"location":"sections/features/config/#qmate-service-specific-parameters","text":"The params object inside your config defines soe specific Qmate relevant parameters. params : { // [..] } Warning The following parameters are being defined inside the params object above.","title":"Qmate Service specific parameters"},{"location":"sections/features/config/#auth","text":"Specifies the way, Qmate will login to the system. See section Authentication for possible options and more details. params : { auth : { formType : \"plain\" } }","title":"auth"},{"location":"sections/features/config/#systemurl","text":"Defines your system url used for OData/REST API calls. params : { systemUrl : \"https://www.sap.com\" }","title":"systemUrl"},{"location":"sections/features/config/#logui5version","text":"Specifies the log level of the UI5 version and timestamp of the system in use. Possible values are: always true false Logs the UI5 version after each system login. params : { logUI5Version : \"always\" } Logs the UI5 version per execution. params : { logUI5Version : true } Does not log the UI5 version at all. params : { logUI5Version : false } console output UI5 Version: 1.96.1 UI5 Timestamp: 25/11/2021","title":"logUI5Version"},{"location":"sections/features/config/#qmatecustomtimeout","text":"Overwrites the default timeout of 30 seconds in the functions from the Qmate Reuse API with the given value. Unit is milliseconds. params : { qmateCustomTimeout : 40000 }","title":"qmateCustomTimeout"},{"location":"sections/features/config/#stepsleeptime","text":"Static sleep time after each step. Unit is milliseconds. Can be used to manually slow down the test execution. Set to 0 to disable. params : { stepSleepTime : 5000 }","title":"stepSleepTime"},{"location":"sections/features/config/#loadpropertytimeout","text":"Overwrites the default loadPropertyTimeout of 10 seconds in the functions from the Qmate Reuse API with the given value. Unit is milliseconds. params : { qmateCustomTimeout : 20000 }","title":"loadPropertyTimeout"},{"location":"sections/features/dataHandling/","text":"Data Handling Related Topics: Best Practices - Data Handling | Advanced Data Handling Data Types There are basically two different types of data being used within your test execution. Input Data Input data is the data defined by the scenario to perform all types of user inputs within the test execution. It is recommended to create one JSON file for each spec or test. A common pattern is to name the data file exactly like the spec file . E.g. createSupplierInvoice.json contains all and exclusively the required data for the test createSupplierInvoice.spec.js . With that, the relationship between the data and the test itself is clear and the data is easily maintainable. Your data file could look like: data/createSupplierInvoice.json { \"session\" : { \"username\" : \"<username\" , \"password\" : \"<password>\" }, \"generalInformation\" : { \"companyCode\" : \"1010\" , \"postingDate\" : \"today\" , } } As you can see above, the data is separated into different sections like session and generalInformation . To keep transparency, it is recommended to follow that approach and define your data according to the related section of the UI. Reference Data For some cases - especially for scenario testing - it is required to pass dynamically created data between different specs. For example, your first script is creating a document number you might require inside the process of the second script. Therefore this data needs to be shared during the runtime between multiple scripts. To do so, you can create a reference.json file within your data folder which will then be imported in all related scripts. data/references.json { \"purchaseOrderNumber\" : null , \"supplierInvoiceNumber\" : null } Info Here, the initial values are not set (set to null ), since they will be stored during the runtime of your test execution. Data Import With the following approach, it is possible to dynamically define (different) data and data paths independently from the actual location of the specs or data files. Thus, it is the recommended way to handle your test data. Define data paths Commonly, your data is stored inside the data folder of your test suite. Therefore the path pointing to the data file(s) is defined in the configuration file like: config.js params : { import : { data : \"./data/\" } }, Tip For some special cases, you might require to defined multiple and more advanced data paths. Please find further information under Advanced Data Handling . Load data To import data inside your spec, add the following code at the top of your test / describe block: specs/createSupplierInvoice.spec const data = browser . config . params . import . data [ \"createSupplierInvoice\" ]; const references = browser . config . params . import . data [ \"references\" ]; Tip Alternatively, you can load the data with the following reuse method : const data = util . data . getData ( \"createSupplierInvoice\" ); This function only works for data located in the folder defined as data in the config. Store data To store any value inside the imported file and make it available for other specs within the same group, use the following code inside a step (it block) : specs/createPurchaseOrder.spec references . documentNumber = \"4500012345\" ; Warning To be able to share data between different scripts, the specs need to be grouped together inside the configuration file. Please find more information under Configuration - Specs . Please consider, that the data is only stored during the runtime of the test execution. To store data persistently, please see chapter Advanced Data Handling . Read data To read data from the input data or reference file, use the following code inside a step (it block) : Input Data Reference Data specs/createSupplierInvoice.spec const companyCode = data . generalInformation . companyCode ; specs/createSupplierInvoice.spec const purchaseOrderNumber = references . purchaseOrderNumber ;","title":"Data Handling"},{"location":"sections/features/dataHandling/#data-handling","text":"Related Topics: Best Practices - Data Handling | Advanced Data Handling","title":"Data Handling"},{"location":"sections/features/dataHandling/#data-types","text":"There are basically two different types of data being used within your test execution.","title":"Data Types"},{"location":"sections/features/dataHandling/#input-data","text":"Input data is the data defined by the scenario to perform all types of user inputs within the test execution. It is recommended to create one JSON file for each spec or test. A common pattern is to name the data file exactly like the spec file . E.g. createSupplierInvoice.json contains all and exclusively the required data for the test createSupplierInvoice.spec.js . With that, the relationship between the data and the test itself is clear and the data is easily maintainable. Your data file could look like: data/createSupplierInvoice.json { \"session\" : { \"username\" : \"<username\" , \"password\" : \"<password>\" }, \"generalInformation\" : { \"companyCode\" : \"1010\" , \"postingDate\" : \"today\" , } } As you can see above, the data is separated into different sections like session and generalInformation . To keep transparency, it is recommended to follow that approach and define your data according to the related section of the UI.","title":"Input Data"},{"location":"sections/features/dataHandling/#reference-data","text":"For some cases - especially for scenario testing - it is required to pass dynamically created data between different specs. For example, your first script is creating a document number you might require inside the process of the second script. Therefore this data needs to be shared during the runtime between multiple scripts. To do so, you can create a reference.json file within your data folder which will then be imported in all related scripts. data/references.json { \"purchaseOrderNumber\" : null , \"supplierInvoiceNumber\" : null } Info Here, the initial values are not set (set to null ), since they will be stored during the runtime of your test execution.","title":"Reference Data"},{"location":"sections/features/dataHandling/#data-import","text":"With the following approach, it is possible to dynamically define (different) data and data paths independently from the actual location of the specs or data files. Thus, it is the recommended way to handle your test data.","title":"Data Import"},{"location":"sections/features/dataHandling/#define-data-paths","text":"Commonly, your data is stored inside the data folder of your test suite. Therefore the path pointing to the data file(s) is defined in the configuration file like: config.js params : { import : { data : \"./data/\" } }, Tip For some special cases, you might require to defined multiple and more advanced data paths. Please find further information under Advanced Data Handling .","title":"Define data paths"},{"location":"sections/features/dataHandling/#load-data","text":"To import data inside your spec, add the following code at the top of your test / describe block: specs/createSupplierInvoice.spec const data = browser . config . params . import . data [ \"createSupplierInvoice\" ]; const references = browser . config . params . import . data [ \"references\" ]; Tip Alternatively, you can load the data with the following reuse method : const data = util . data . getData ( \"createSupplierInvoice\" ); This function only works for data located in the folder defined as data in the config.","title":"Load data"},{"location":"sections/features/dataHandling/#store-data","text":"To store any value inside the imported file and make it available for other specs within the same group, use the following code inside a step (it block) : specs/createPurchaseOrder.spec references . documentNumber = \"4500012345\" ; Warning To be able to share data between different scripts, the specs need to be grouped together inside the configuration file. Please find more information under Configuration - Specs . Please consider, that the data is only stored during the runtime of the test execution. To store data persistently, please see chapter Advanced Data Handling .","title":"Store data"},{"location":"sections/features/dataHandling/#read-data","text":"To read data from the input data or reference file, use the following code inside a step (it block) : Input Data Reference Data specs/createSupplierInvoice.spec const companyCode = data . generalInformation . companyCode ; specs/createSupplierInvoice.spec const purchaseOrderNumber = references . purchaseOrderNumber ;","title":"Read data"},{"location":"sections/features/selectors/","text":"Selectors To perform any action on an element (e.g. clicking a button), you need to specify the element at which the action is being executed. This differs from the web technology you are using. Read the following instructions, depending on the UI technology of the application to be tested. Info Selectors are typically created using our Chrome Extension, but it is important to note that this tool is currently only available for internal use at SAP . For further information as internal , please refer to our official Qmate documentation. UI5 Supported Selector Properties The supported properties for any UI5 based application are the following: const selector = { \"elementProperties\" : { ... }, \"ancestorProperties\" : { ... }, \"parentProperties\" : { ... }, \"siblingProperties\" : { ... }, \"prevSiblingProperties\" : { ... }, \"nextSiblingProperties\" : { ... }, \"childProperties\" : { ... }, \"descendantProperties\" : { ... } }; The selector consists of one mandatory selector called elementProperties , representing the target element where the action should be applied to and seven optional selectors: ancestorProperties, parentProperties : While the parentProperties can be used only as direct parent of the element, the ancestorProperties can be used for any level of ancestry (parent, grandparent, grand-grand etc.). childProperties, descendantProperties : The difference between them is, that the childProperties can be used only as direct child of the element, whereas the descendantProperties can be use for any level of descendance (child, grandson, grand-grand etc.). siblingProperties, prevSiblingProperties, nextSiblingProperties : The siblingProperties can be any sibling, whereas the prevSiblingProperties can be only the direct previous sibling and nextSiblingProperties can be only the direct next sibling. You have to define at least one property in elementProperties . This could be metadata or any other property of the Overview below. Sample \"elementProperties\" : { \"metadata\" : \"sap.m.Button\" , \"<ui5Property>\" : \"*Any UI5 Property/Aggregation/Association\" \"id\" : \"*myId\" , \"viewName\" : \"*myView*Name\" , \"viewId\" : \"*id*viewId\" , \"bindingContextPath\" : \"/ProductCategories(nodeKey=guid't12321-123213-34rer332', enabled='true', category='LT')\" \"text\" : [{ \"path\" : \"oDataModelName>companyChangedManually\" }, { \"path\" : \"*enabled\" }], \"tooltip\" : [{ \"path\" : \"i18n>welcomeDescription\" }] \"domProperties\" : { \"nodeName\" : \"li\" , \"class\" : \"*sapMButton\" \"tooltip\" : \"*text*\" }, \"ancestorProperties\" : { \"metadata\" : \"sap.m.ColumnListItem\" , \"ancestorProperties\" : { \"metadata\" : \"sap.m.Table\" , \"items\" : { \"path\" : \"oDataModelName>PurchaseOrderItems\" }, \"siblingProperties\" : {...}, ... }, }, \"descendantProperties\" : { \"metadata\" : \"sap.m.Icon\" }, \"siblingProperties\" : { \"metadata\" : \"sap.m.Input\" }, } Tip For most of the cases it will be sufficient to provide only the elementProperties. Spotlight will generate the minimal unique selector for you. Overview The following properties apply to all selector types (elementProperties, ancestorProperties, parentProperties, siblingProperties, prevSiblingProperties, nextSiblingProperties, childProperties, descendantProperties). Property Description Sample Format Remark metadata the control type \"metadata\": \"sap.m.Button\" , \"metadata\": \"sap.m.Input\" string: \"property\": \"value\" <ui5Property> UI5 properties including aggregations and associations, as defined in the official UI5 API \"text\": \"Amount\" , \"tooltip\": \"Amount\" , \"title\": \"Currency\" , \"enabled\": true string: \"property\": \"value\" , numeric: \"property\": 123 , boolean: \"property\": true id the ID of the control \"id\": \"myButtonId\" , \"id\": \"my*Id*\" string: \"property\": \"value\" viewName the view name \"viewName\": \"myViewName\" , \"viewName\": \"*view*\" string: \"property\": \"value\" viewId the view ID \"viewId\": \"*myViewId*\" string: \"property\": \"value\" bindingContextPath the binding context path \"bindingContextPath\": \"/odata/entity('1')\" , \"bindingContextPath\": \"/odata/entity(*)*\" string: \"property\": \"value\" binding property paths the binding property paths of the model (for all types of properties: UI properties, aggregations, associations) \"text\":[{\"path\": \"oDataModelName>companyChangedManually\"}] , \"title\": {\"path\": \"oDataModelName>companyChangedTitle\"} , \"items\": {\"path\": \"oDataModelName>PurchaseOrderItems\"} , \"enabled\": [{\"path\": \"company*Enabled*\"}] , json: \"items\": {\"path\": ...} , array: \"items\": [{\"path\": ...}, {\"path\": ...} ...] model name is optional i18n keys the binding properties path for i18n \"tooltip\": [{\"path\": \"i18n>welcomeDescription\"}] , \"tooltip\": {\"path\": \"i18n>welcomeDescription\"} , \"tooltip\": [{\"path\": \"*i18n*welcomeDescription\"}] json: \"items\": {\"path\": ...} , array: \"items\": [{\"path\": ...}, {\"path\": ...} ...] i18n is a model, and therefore all the above mentioned rules (as described in binding property paths ) apply domProperties the properties of the DOM \"domProperties\": {\"nodeName\": \"div\", \"class\": \"buttonNU* class2*\", \"id\": \"my*Id*\"} string: \"property\": \"value\" , numeric: \"property\": 123 , boolean: \"property\": true can be used if the UI5 Virtual DOM is not sufficient Info Wildcards are supported for all properties, aggregation and associations \"text\" : \"my*text*\" Nested Properties In case you need to specify the element based on its surrounding, you can define nested properties. \"elementProperties\" : { ... \"ancestorProperties\" : { \"metadata\" : \"sap.m.ColumnListItem\" , \"ancestorProperties\" : { \"metadata\" : \"sap.m.Table\" , \"items\" : { \"path\" : \"oDataModelName>PurchaseOrderItems\" }, \"siblingProperties\" : {...}, ... }, } }; Info Nesting is enabled infinitely for ancestorProperties , siblingProperties and descendantProperties . Be cautious, the more level of nesting you add the slower your script will be. Usage of Selectors For almost every UI5 action we provide, you can pass the selector directly to the function like: it ( \"Step 01: click on 'Save' button\" , async function () { const selector = { \"elementProperties\" : { \"metadata\" : \"sap.m.Button\" , \"text\" : \"Save\" } }; await ui5 . userInteraction . click ( selector ); }); Non UI5 Defining the element For all non UI5 applications you can define the element in different ways. We provide all common functionalities to get an element by its ID, Class or any other CSS attribute. Hence, you can not pass any selector directly to the function performing an action. Instead, you have to define the element first with one of the provided methods. // Get an element by its ID const elem = await nonUi5 . element . getById ( \"button-abc\" ); // Get an element by its class (pass an index if there are more than one elements with the same class) const elem = await nonUi5 . element . getByClass ( \".button\" , 0 ); // Get an element by its attribute value of \"title\" const elem = await nonUi5 . element . getByCss ( \"input[title='name']\" ); // Get an element by its class and text value const elem = await nonUi5 . element . getByCssContainingText ( \".button\" , \"Save\" ); Info To get a complete overview about all possible methods, please see nonUi5.element . Getting the attributes manually To get the properties of an element manually, please follow the steps below: Open the dev-tools F12 and switch to the Elements Tab. Select the element ( right click \u279c inspect ) Find any attribute or set of attributes to identify the element clearly. To verify the uniqueness of the element, switch to the Console tab of the dev-tools and type in the following command using your found attribute/s: $$ ( \"[<attr>='<attrValue>']\" ) ; Warning If there are more than one elements found, try to find another attribute or add some more attributes until you will find a single element (you can still pass an index to the reuse function if you are not able to find a unique selector). Usage To perform the action, pass the defined element to the action function. it ( \"Step 01: click on 'Save' button\" , async function () { const elem = await nonUi5 . element . getByCss ( \".saveButton\" ); await nonUi5 . userInteraction . click ( elem ); });","title":"Selectors"},{"location":"sections/features/selectors/#selectors","text":"To perform any action on an element (e.g. clicking a button), you need to specify the element at which the action is being executed. This differs from the web technology you are using. Read the following instructions, depending on the UI technology of the application to be tested. Info Selectors are typically created using our Chrome Extension, but it is important to note that this tool is currently only available for internal use at SAP . For further information as internal , please refer to our official Qmate documentation.","title":"Selectors"},{"location":"sections/features/selectors/#ui5","text":"","title":"UI5"},{"location":"sections/features/selectors/#supported-selector-properties","text":"The supported properties for any UI5 based application are the following: const selector = { \"elementProperties\" : { ... }, \"ancestorProperties\" : { ... }, \"parentProperties\" : { ... }, \"siblingProperties\" : { ... }, \"prevSiblingProperties\" : { ... }, \"nextSiblingProperties\" : { ... }, \"childProperties\" : { ... }, \"descendantProperties\" : { ... } }; The selector consists of one mandatory selector called elementProperties , representing the target element where the action should be applied to and seven optional selectors: ancestorProperties, parentProperties : While the parentProperties can be used only as direct parent of the element, the ancestorProperties can be used for any level of ancestry (parent, grandparent, grand-grand etc.). childProperties, descendantProperties : The difference between them is, that the childProperties can be used only as direct child of the element, whereas the descendantProperties can be use for any level of descendance (child, grandson, grand-grand etc.). siblingProperties, prevSiblingProperties, nextSiblingProperties : The siblingProperties can be any sibling, whereas the prevSiblingProperties can be only the direct previous sibling and nextSiblingProperties can be only the direct next sibling. You have to define at least one property in elementProperties . This could be metadata or any other property of the Overview below.","title":"Supported Selector Properties"},{"location":"sections/features/selectors/#sample","text":"\"elementProperties\" : { \"metadata\" : \"sap.m.Button\" , \"<ui5Property>\" : \"*Any UI5 Property/Aggregation/Association\" \"id\" : \"*myId\" , \"viewName\" : \"*myView*Name\" , \"viewId\" : \"*id*viewId\" , \"bindingContextPath\" : \"/ProductCategories(nodeKey=guid't12321-123213-34rer332', enabled='true', category='LT')\" \"text\" : [{ \"path\" : \"oDataModelName>companyChangedManually\" }, { \"path\" : \"*enabled\" }], \"tooltip\" : [{ \"path\" : \"i18n>welcomeDescription\" }] \"domProperties\" : { \"nodeName\" : \"li\" , \"class\" : \"*sapMButton\" \"tooltip\" : \"*text*\" }, \"ancestorProperties\" : { \"metadata\" : \"sap.m.ColumnListItem\" , \"ancestorProperties\" : { \"metadata\" : \"sap.m.Table\" , \"items\" : { \"path\" : \"oDataModelName>PurchaseOrderItems\" }, \"siblingProperties\" : {...}, ... }, }, \"descendantProperties\" : { \"metadata\" : \"sap.m.Icon\" }, \"siblingProperties\" : { \"metadata\" : \"sap.m.Input\" }, } Tip For most of the cases it will be sufficient to provide only the elementProperties. Spotlight will generate the minimal unique selector for you.","title":"Sample"},{"location":"sections/features/selectors/#overview","text":"The following properties apply to all selector types (elementProperties, ancestorProperties, parentProperties, siblingProperties, prevSiblingProperties, nextSiblingProperties, childProperties, descendantProperties). Property Description Sample Format Remark metadata the control type \"metadata\": \"sap.m.Button\" , \"metadata\": \"sap.m.Input\" string: \"property\": \"value\" <ui5Property> UI5 properties including aggregations and associations, as defined in the official UI5 API \"text\": \"Amount\" , \"tooltip\": \"Amount\" , \"title\": \"Currency\" , \"enabled\": true string: \"property\": \"value\" , numeric: \"property\": 123 , boolean: \"property\": true id the ID of the control \"id\": \"myButtonId\" , \"id\": \"my*Id*\" string: \"property\": \"value\" viewName the view name \"viewName\": \"myViewName\" , \"viewName\": \"*view*\" string: \"property\": \"value\" viewId the view ID \"viewId\": \"*myViewId*\" string: \"property\": \"value\" bindingContextPath the binding context path \"bindingContextPath\": \"/odata/entity('1')\" , \"bindingContextPath\": \"/odata/entity(*)*\" string: \"property\": \"value\" binding property paths the binding property paths of the model (for all types of properties: UI properties, aggregations, associations) \"text\":[{\"path\": \"oDataModelName>companyChangedManually\"}] , \"title\": {\"path\": \"oDataModelName>companyChangedTitle\"} , \"items\": {\"path\": \"oDataModelName>PurchaseOrderItems\"} , \"enabled\": [{\"path\": \"company*Enabled*\"}] , json: \"items\": {\"path\": ...} , array: \"items\": [{\"path\": ...}, {\"path\": ...} ...] model name is optional i18n keys the binding properties path for i18n \"tooltip\": [{\"path\": \"i18n>welcomeDescription\"}] , \"tooltip\": {\"path\": \"i18n>welcomeDescription\"} , \"tooltip\": [{\"path\": \"*i18n*welcomeDescription\"}] json: \"items\": {\"path\": ...} , array: \"items\": [{\"path\": ...}, {\"path\": ...} ...] i18n is a model, and therefore all the above mentioned rules (as described in binding property paths ) apply domProperties the properties of the DOM \"domProperties\": {\"nodeName\": \"div\", \"class\": \"buttonNU* class2*\", \"id\": \"my*Id*\"} string: \"property\": \"value\" , numeric: \"property\": 123 , boolean: \"property\": true can be used if the UI5 Virtual DOM is not sufficient Info Wildcards are supported for all properties, aggregation and associations \"text\" : \"my*text*\"","title":"Overview"},{"location":"sections/features/selectors/#nested-properties","text":"In case you need to specify the element based on its surrounding, you can define nested properties. \"elementProperties\" : { ... \"ancestorProperties\" : { \"metadata\" : \"sap.m.ColumnListItem\" , \"ancestorProperties\" : { \"metadata\" : \"sap.m.Table\" , \"items\" : { \"path\" : \"oDataModelName>PurchaseOrderItems\" }, \"siblingProperties\" : {...}, ... }, } }; Info Nesting is enabled infinitely for ancestorProperties , siblingProperties and descendantProperties . Be cautious, the more level of nesting you add the slower your script will be.","title":"Nested Properties"},{"location":"sections/features/selectors/#usage-of-selectors","text":"For almost every UI5 action we provide, you can pass the selector directly to the function like: it ( \"Step 01: click on 'Save' button\" , async function () { const selector = { \"elementProperties\" : { \"metadata\" : \"sap.m.Button\" , \"text\" : \"Save\" } }; await ui5 . userInteraction . click ( selector ); });","title":"Usage of Selectors"},{"location":"sections/features/selectors/#non-ui5","text":"","title":"Non UI5"},{"location":"sections/features/selectors/#defining-the-element","text":"For all non UI5 applications you can define the element in different ways. We provide all common functionalities to get an element by its ID, Class or any other CSS attribute. Hence, you can not pass any selector directly to the function performing an action. Instead, you have to define the element first with one of the provided methods. // Get an element by its ID const elem = await nonUi5 . element . getById ( \"button-abc\" ); // Get an element by its class (pass an index if there are more than one elements with the same class) const elem = await nonUi5 . element . getByClass ( \".button\" , 0 ); // Get an element by its attribute value of \"title\" const elem = await nonUi5 . element . getByCss ( \"input[title='name']\" ); // Get an element by its class and text value const elem = await nonUi5 . element . getByCssContainingText ( \".button\" , \"Save\" ); Info To get a complete overview about all possible methods, please see nonUi5.element .","title":"Defining the element"},{"location":"sections/features/selectors/#getting-the-attributes-manually","text":"To get the properties of an element manually, please follow the steps below: Open the dev-tools F12 and switch to the Elements Tab. Select the element ( right click \u279c inspect ) Find any attribute or set of attributes to identify the element clearly. To verify the uniqueness of the element, switch to the Console tab of the dev-tools and type in the following command using your found attribute/s: $$ ( \"[<attr>='<attrValue>']\" ) ; Warning If there are more than one elements found, try to find another attribute or add some more attributes until you will find a single element (you can still pass an index to the reuse function if you are not able to find a unique selector).","title":"Getting the attributes manually"},{"location":"sections/features/selectors/#usage","text":"To perform the action, pass the defined element to the action function. it ( \"Step 01: click on 'Save' button\" , async function () { const elem = await nonUi5 . element . getByCss ( \".saveButton\" ); await nonUi5 . userInteraction . click ( elem ); });","title":"Usage"},{"location":"sections/features/spec/","text":"","title":"Spec"},{"location":"sections/gettingStarted/config/","text":"Related Topics: Features \u276f Config Enable Qmate Service To use our service you have to enable @sap_oss/wdio-qmate-service in your config.js . config.js const QmateService = require ( \"@sap_oss/wdio-qmate-service\" ); exports . config = { // ... services : [[ QmateService ]], // ... }; WebdriverIO Parameters For more information about how to setup your config , please see the official documentation from WebdriverIO.","title":"Config"},{"location":"sections/gettingStarted/config/#enable-qmate-service","text":"To use our service you have to enable @sap_oss/wdio-qmate-service in your config.js . config.js const QmateService = require ( \"@sap_oss/wdio-qmate-service\" ); exports . config = { // ... services : [[ QmateService ]], // ... }; WebdriverIO Parameters For more information about how to setup your config , please see the official documentation from WebdriverIO.","title":"Enable Qmate Service"},{"location":"sections/gettingStarted/execution/","text":"Run your test To execute your test you have to call your config.js npx wdio config.js","title":"Execution"},{"location":"sections/gettingStarted/execution/#run-your-test","text":"To execute your test you have to call your config.js npx wdio config.js","title":"Run your test"},{"location":"sections/gettingStarted/setup/","text":"Prerequisites Make sure Node.js is installed on your computer. To use Qmate Service , you will have to install WebdriverIO . Installation To install the latest version of the service, simply execute the following command: npm install @sap_oss/wdio-qmate-service","title":"Setup"},{"location":"sections/gettingStarted/setup/#prerequisites","text":"Make sure Node.js is installed on your computer. To use Qmate Service , you will have to install WebdriverIO .","title":"Prerequisites"},{"location":"sections/gettingStarted/setup/#installation","text":"To install the latest version of the service, simply execute the following command: npm install @sap_oss/wdio-qmate-service","title":"Installation"},{"location":"sections/gettingStarted/spec/","text":"Related Topics: Features \u276f Spec | Features \u276f Selectors Sample Inside the .spec.js file, you define the sequence of steps for your test script. Each file consists of at least one describe block. clickGoOnListReport.spec.js describe ( \"clickGoOnListReport - click 'Go' on ListReport\" , function () { it ( \"Step 01: Navigate to your application\" , async function () { await ui5 . navigation . navigateToApplication ( \"PurchaseOrder-manage\" ) }); it ( \"Step 02: Navigate\" , async function () { await ui5 . session . login ( \"JOHNDOE\" , \"Greetings1!\" ); }); it ( \"Step 03: Click 'Go' on ListReport\" , async function () { const selector = { \"elementProperties\" : { \"viewName\" : \"sap.suite.ui.generic.template.ListReport.view.ListReport\" , \"metadata\" : \"sap.m.Button\" , \"id\" : \"*listReportFilter-btnGo\" } }; await ui5 . userInteraction . click ( selector ); }); // ... });","title":"Spec"},{"location":"sections/gettingStarted/spec/#sample","text":"Inside the .spec.js file, you define the sequence of steps for your test script. Each file consists of at least one describe block. clickGoOnListReport.spec.js describe ( \"clickGoOnListReport - click 'Go' on ListReport\" , function () { it ( \"Step 01: Navigate to your application\" , async function () { await ui5 . navigation . navigateToApplication ( \"PurchaseOrder-manage\" ) }); it ( \"Step 02: Navigate\" , async function () { await ui5 . session . login ( \"JOHNDOE\" , \"Greetings1!\" ); }); it ( \"Step 03: Click 'Go' on ListReport\" , async function () { const selector = { \"elementProperties\" : { \"viewName\" : \"sap.suite.ui.generic.template.ListReport.view.ListReport\" , \"metadata\" : \"sap.m.Button\" , \"id\" : \"*listReportFilter-btnGo\" } }; await ui5 . userInteraction . click ( selector ); }); // ... });","title":"Sample"},{"location":"sections/gettingStarted/specs/","text":"Specs Inside the .spec.js file, you define the sequence of steps for your test script. Each file consists of at least one describe block. describe ( \"01_yourScript - describe the test\" , function () { it ( \"Step 01: describe the step\" , async function () { // [...] }); it ( \"Step 02: describe the step\" , async function () { // [...] }); // [...] });","title":"Specs"},{"location":"sections/gettingStarted/specs/#specs","text":"Inside the .spec.js file, you define the sequence of steps for your test script. Each file consists of at least one describe block. describe ( \"01_yourScript - describe the test\" , function () { it ( \"Step 01: describe the step\" , async function () { // [...] }); it ( \"Step 02: describe the step\" , async function () { // [...] }); // [...] });","title":"Specs"},{"location":"sections/support/bugReporting/","text":"Bug Reporting & Feature Requests Related Topics: Troubleshooting | Known Issues & Limitations Report a Bug Important Information Before you open an issue , please go through the checklist below. Have a look at the trouble shooting and known Issues & Limitations section first, and check if a solution for your issue already exists. Be sure that there is no syntactical error displayed in the error log. Provide links to pipelines/gh-actions and/or specs/files of your repository. Provide a detailed analysis and add screenshots if possible. Follow the template given when opening an issue. Report a Bug Request a Feature If you want to request a feature, please make sure that it will add a common value to Qmate Service . Request a Feature","title":"Issues & Feature Requests"},{"location":"sections/support/bugReporting/#bug-reporting-feature-requests","text":"Related Topics: Troubleshooting | Known Issues & Limitations","title":"Bug Reporting &amp; Feature Requests"},{"location":"sections/support/bugReporting/#report-a-bug","text":"Important Information Before you open an issue , please go through the checklist below. Have a look at the trouble shooting and known Issues & Limitations section first, and check if a solution for your issue already exists. Be sure that there is no syntactical error displayed in the error log. Provide links to pipelines/gh-actions and/or specs/files of your repository. Provide a detailed analysis and add screenshots if possible. Follow the template given when opening an issue. Report a Bug","title":"Report a Bug"},{"location":"sections/support/bugReporting/#request-a-feature","text":"If you want to request a feature, please make sure that it will add a common value to Qmate Service . Request a Feature","title":"Request a Feature"},{"location":"sections/support/knownIssuesAndLimitations/","text":"","title":"Known Issues & Limitations"},{"location":"sections/support/troubleshooting/","text":"Troubleshooting If you find any bug or issue which is not listed below, please open a new issue in the qmate repository. Thanks for your support. SessionNotCreatedError Error Message Error: SessionNotCreatedError: session not created: This version of ChromeDriver only supports Chrome version 89 Current browser version is 91.0.4472.77 with binary path C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe Possible Reasons The installed chromedriver does not support the current chrome-browser version or vice versa. Possible Solutions Please update your chromedriver version. Also update your Chrome Browser version by visiting About Google Chrome . This will automatically trigger the Chrome Browser update. You will have to restart Chrome after the update is completed.","title":"Troubleshooting"},{"location":"sections/support/troubleshooting/#troubleshooting","text":"If you find any bug or issue which is not listed below, please open a new issue in the qmate repository. Thanks for your support.","title":"Troubleshooting"},{"location":"sections/support/troubleshooting/#sessionnotcreatederror","text":"Error Message Error: SessionNotCreatedError: session not created: This version of ChromeDriver only supports Chrome version 89 Current browser version is 91.0.4472.77 with binary path C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe Possible Reasons The installed chromedriver does not support the current chrome-browser version or vice versa. Possible Solutions Please update your chromedriver version. Also update your Chrome Browser version by visiting About Google Chrome . This will automatically trigger the Chrome Browser update. You will have to restart Chrome after the update is completed.","title":"SessionNotCreatedError"}]}